{"version":3,"sources":["accounting/kepik/bordrosession/helper/ProcessCode.js","accounting/kepik/bordro/component/BordroTableIdSelected.js","accounting/kepik/bordrosession/ResendMimePage.js"],"names":["ProcessCode","SIGNBORDRO","code","SIGNMIME","RESENDMIME","BordroTableIdSelected","Component","constructor","props","super","getEmployeeId","async","self","this","params","url","state","content","employee","id","method","response","requestK","setState","employeeUserId","data","error","showAxiosError","loading","getApprovalUserId","approvalUserId","alert","selection","manual","total","page","size","fetchData","bind","previewBordro","setMediaViewer","accessor","direction","sortStr","undefined","processCode","selectedBordroIdList","searching","then","bordroSession","totalElements","React","createElement","SweetAlert","confirmBtnText","confirmBtnBsStyle","title","onConfirm","history","push","pathname","peykName","toggleModal","length","message","Alert","warning","position","effect","timeout","updateFlowTimeout","onComplete","selectedIdList","readFlowTimeoutTemplate","readTimeoutTemplate","catch","mediaModal","row","responseType","blob","Blob","type","headers","base64Data","reader","FileReader","readAsDataURL","onloadend","result","render","columnList","Header","Cell","term","moment","format","name","className","parsedTckn","surname","kepAddress","style","margin","warningCount","DocumentState","messageType","sortable","textAlign","onClick","e","columns","renewListForKepOwnership","isKepOwner","ApproveDocumentViewer","modal","listener","closeModal","Table","options","ResendMimePage","newValue","flowTimeOut","mimeBody","selected","completed","signedDocumentCount","progressLength","notifyMimeResend","createRef","resendMimes","showErrorMessage","current","notificationAlert","place","errorMessage","autoDismiss","componentDidMount","location","mimeTitle","kepAccount","account","updateMailInfo","bordroSessionId","body","smsBody","selectedBordros","pageState","disableButton","recordIds","disableSendBtn","success","renderNavButtons","Nav","paddingLeft","height","StickButton","fontSize","label","showCancel","cancelBtnText","cancelBtnBsStyle","onCancel","renderMimeInputs","Container","Row","sm","Col","top","Input","marginTop","value","disable","onChange","target","rows","border","disabled","color","renderBordroList","pageSize","Notify","ref","notify","md","Card","CardHeader","CardTitle","tag","CardBody"],"mappings":"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","file":"static/js/21.f2d76271.chunk.js","sourcesContent":["let ProcessCode = {\n    SIGNBORDRO: {\n        code: 0\n    },\n    SIGNMIME: {\n        code: 1\n    },\n    RESENDMIME: {\n        code: 2\n    }\n};\n\nexport default ProcessCode;","import React, {Component} from 'react';\nimport Table from \"../../../../components/Table/Table\";\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport 'react-datetime/css/react-datetime.css'\nimport moment from 'moment';\nimport 'moment/locale/tr'\nimport Alert from \"react-s-alert\";\nimport ProcessCode from \"../../bordrosession/helper/ProcessCode\";\nimport {showAxiosError} from \"../../../../helper/helper\";\nimport {requestK} from \"../../../../helper/APIUtils\";\nimport {renewListForKepOwnership} from \"../../common/PeykHelper\";\nimport DocumentState from \"../../common/DocumentState\";\nimport ApproveDocumentViewer from \"../../approval/helper/ApproveDocumentViewer\";\n\nclass BordroTableIdSelected extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      alert: null,\n      selection: [],\n      manual: false,\n      content: [],\n      total: 0,\n      page: 0,\n      size: 10\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.previewBordro = this.previewBordro.bind(this);\n    this.setMediaViewer = this.setMediaViewer.bind(this);\n  }\n\n  getEmployeeId = async () => {\n    let self = this;\n    let employeeId = this.state.content[0].employee.id;\n    let params = {\n      url: `/employee/getEmployeeId/${employeeId}`,\n      method: \"post\"\n    };\n\n    try {\n      let response = await requestK(params);\n      self.setState({\n        employeeUserId: response.data\n      });\n    } catch (error) {\n      showAxiosError(error);\n      self.setState({ loading: false });\n    }\n  };\n\n  getApprovalUserId = async () => {\n    let self = this;\n    let approvalId = this.state.content[0].id;\n    let params = {\n      url: `/approval/getApprovalUserId/${approvalId}`,\n      method: \"post\"\n    };\n\n    try {\n      let response = await requestK(params);\n      self.setState({\n        approvalUserId: response.data\n      });\n    } catch (error) {\n      showAxiosError(error);\n      self.setState({ loading: false });\n    }\n  };\n\n  fetchData(accessor, direction, page, size) {\n    let self = this;\n    let sortStr = accessor !== undefined ? ('&sort=' + accessor + ',' + direction) : '';\n    let params = {\n      url: '/bordro/readBordroAllByIds?processCode=' + self.props.processCode + '&page=' + page + '&size=' + size + sortStr,\n      method: \"post\",\n      data: self.props.selectedBordroIdList\n    };\n    self.setState({loading: true, searching: true, manual: self.manual === true ? false : self.manual});\n    requestK(params)\n        .then(async function (response) {\n        let id = self.props.bordroSession && self.props.bordroSession.id;\n        if (response.data.page && response.data.page.totalElements === 0) {\n          self.setState({\n            alert: (<SweetAlert error\n                                confirmBtnText=\"Tamam\"\n                                confirmBtnBsStyle=\"danger\"\n                                title=\"Hata\"\n                                onConfirm={() => {\n                                  id ?\n                                    self.props.history.push({pathname: `/${self.props.peykName}/bordroimport/` + id}) :\n                                    self.setState({alert: null});\n                                    self.props.toggleModal && self.props.toggleModal(true);\n                                }}>\n              {self.props.processCode === ProcessCode.RESENDMIME.code && \"Seçilen alıcıların onayda bekleyen gönderileri bulunmamaktadır.\"}\n              {self.props.processCode === ProcessCode.SIGNBORDRO.code && \"Seçilen ücret bordrolarının imzalı iletiler bulunduğu veya çalışan eşleşmesi yapılmamış olduğu için bu işlem yapılamaz.\"}\n              {self.props.processCode === ProcessCode.SIGNMIME.code && \"Seçilen ücret bordrolarının imzalı iletiler bulunduğu veya çalışan eşleşmesi yapılmamış olduğu için bu işlem yapılamaz.\"}\n            </SweetAlert>),\n            loading: false\n          });\n          return;\n        } else if (response.data.page && response.data.page.totalElements < self.props.selectedBordroIdList.length) {\n          self.props.toggleModal(false);\n          let message = self.props.processCode === ProcessCode.RESENDMIME.code ? 'Tekrar gönderime hazır bordrolar seçilmiştir.' :\n            (self.props.processCode === ProcessCode.SIGNBORDRO.code ? 'Çalışan eşleşmesi olmayanlar ve daha önce gönderilmiş bordro listeden çıkarılmıştır.' :\n              'Çalışan eşleşmesi olmayanlar ve daha önce gönderilmiş bordro listeden çıkarılmıştır.');\n          Alert.warning(message, {\n            position: 'top-right',\n            effect: 'stackslide',\n            timeout: 8000\n          });\n        }\n\n        self.setState({\n          page: page,\n          size: size,\n          total: response.data.page && response.data.page.totalElements,\n          content: response.data.page && response.data.page.content,\n          loading: false\n        }, () => {\n          if (response.data.page.content[0].state === \"FLOW_TIMEOUT\") {\n            self.props.updateFlowTimeout(true);\n          }\n        self.props.onComplete(response.data.selectedIdList);\n        });\n          if(response.data.page.content[0].state === 'FLOW_TIMEOUT'){\n            await self.getEmployeeId();\n            await self.getApprovalUserId();\n            if (self.state.approvalUserId === self.state.employeeUserId) {\n              self.props.readFlowTimeoutTemplate();\n            } else {\n              self.props.readTimeoutTemplate();\n            }\n          }\n      }).catch(function (error) {\n      self.setState({loading: false});\n      showAxiosError(error);\n    });\n  }\n\n  setMediaViewer() {\n    this.setState({url: null, mediaModal: false});\n  }\n\n  previewBordro(row) {\n    let self = this;\n    let params = {\n      url: `/bordro/previewBordroContent`,\n      responseType: 'arraybuffer',\n      method: \"post\",\n      data: row.id\n    };\n    self.setState({mediaModal: true});\n    requestK(params)\n      .then(function (response) {\n        let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n        let base64Data=\"\";\n        if (blob != undefined) {\n          let reader = new FileReader();\n          reader.readAsDataURL(blob);\n          reader.onloadend = function() {\n            base64Data = reader.result;\n            self.setState({url: base64Data});\n          }\n        }\n      }).catch(function (error) {\n      showAxiosError(error);\n      self.setState({mediaModal: false});\n    });\n  }\n\n  render() {\n\n    let columnList = [\n      {\n        Header: \"Dönem\",\n        accessor: \"term\",\n        Cell: row => (\n          <div>\n            {!!row.term && moment(row.term, 'YYYY/MM/DD').format('YYYY/MM')}\n          </div>\n        )\n      },\n      {\n        Header: \"TCKN\",\n        accessor: \"parsedTckn\",\n        Cell: row => (\n          <div>\n            {(row.employee && row.employee.name) && <span className=\"text-success\">{row.parsedTckn}</span>}\n            {!(row.employee && row.employee.name) && <span className=\"text-danger\">{row.parsedTckn}</span>}\n          </div>\n        )\n      },\n      {\n        Header: \"Adı\",\n        accessor: \"employee_name\",\n        Cell: row => (<div>{row.employee && row.employee.name}</div>\n        )\n      },\n      {\n        Header: \"Soyadı\",\n        accessor: \"employee_surname\",\n        Cell: row => (<div>{row.employee && row.employee.surname}</div>\n        )\n      },\n      {\n        Header: \"Kep Adresi\",\n        accessor: \"employee_kepAddress\",\n        Cell: row => (\n          <div>\n            {row.employee && row.employee.kepAddress}\n          </div>\n        )\n      },\n      {\n        Header: \"Uyarı Sayısı\",\n        accessor: \"warningCount\",\n        Cell: row => (\n            <div style={{margin: 0}}>\n              {row.warningCount}\n            </div>\n        )\n      },\n      {\n        Header: \"Durumu\",\n        accessor: \"state\",\n        Cell: row => (\n          <div>\n            {row.error && <span className=\"text-danger\">{row.error}</span>}\n            {!row.error &&\n            <span\n              className={\"text-\" + DocumentState[row.state].messageType}>{DocumentState[row.state].message}</span>}\n          </div>\n        )\n      },\n      {\n        Header: \"İşlemler\",\n        sortable: false,\n        accessor: \"\",\n        Cell: row => (\n          <div style={{textAlign: 'left'}}>\n            <button title=\"Ücret Bordrosu Görüntüle\" className=\"btn-icon btn btn-info btn-sm\"\n                    style={{margin: '0px 3px'}}\n                    onClick={e => this.previewBordro(row)}>\n              <i className=\"now-ui-icons ui-1_zoom-bold\"/>\n            </button>\n          </div>\n        )\n      }\n    ];\n    let columns = renewListForKepOwnership(columnList, \"accessor\", this.props.isKepOwner);\n    return <div>\n      {this.state.mediaModal &&\n      <ApproveDocumentViewer modal={this.state.mediaModal}\n                             url={this.state.url}\n                             title=\"Ücret Bordrosu\"\n                             listener={this.setMediaViewer}\n                             closeModal={this.setMediaViewer}/>\n      }\n      <Table columns={columns}\n             content={this.state.content}\n             loading={this.props.loading ? this.props.loading : this.state.loading}\n             total={this.state.total}\n             page={this.state.page}\n             manual={this.state.manual}\n             size={this.state.size}\n             options={[\"5\", \"10\", \"20\", \"50\", \"100\"]}\n             fetchData={this.fetchData}\n      />\n      {this.state.alert}\n    </div>;\n  }\n}\n\nexport default BordroTableIdSelected;\n","import React, {Component} from 'react';\nimport {Card, CardBody, CardHeader, CardTitle, Col, Container, Input, Nav, Row} from 'reactstrap';\nimport 'react-table/react-table.css'\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport Notify from 'react-notification-alert';\nimport 'react-datetime/css/react-datetime.css'\nimport 'moment/locale/tr'\nimport BordroTableIdSelected from \"../bordro/component/BordroTableIdSelected\";\nimport StickButton from \"../../../components/StickButton\";\nimport ProcessCode from \"./helper/ProcessCode\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport {showAxiosError} from \"../../../helper/helper\";\nimport Alert from \"react-s-alert\";\nimport ReactLoading from \"react-loading\";\n\nclass ResendMimePage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            selected: null,\n            completed: false,\n            signedDocumentCount: 0,\n            progressLength: 1,\n            selectedBordroIdList: [],\n            flowTimeOut: false\n        };\n        this.notifyMimeResend = React.createRef();\n\n        this.resendMimes = this.resendMimes.bind(this);\n        this.showErrorMessage = this.showErrorMessage.bind(this);\n    }\n    updateFlowTimeout = (newValue) => {\n        this.setState({ flowTimeOut: newValue });\n    }\n    readFlowTimeoutTemplate = () => {\n        let self = this;\n        let params = {\n            url: `/signer/readFlowTimeoutTemplate`,\n            method: \"get\"\n        };\n        requestK(params)\n            .then(function (response) {\n                if (response.data) {\n                    self.setState({mimeBody: response.data})\n                }\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    };\n    readTimeoutTemplate = () => {\n        let self = this;\n        let params = {\n            url: `/signer/readTimeoutTemplate`,\n            method: \"get\"\n        };\n        requestK(params)\n            .then(function (response) {\n                if (response.data) {\n                    self.setState({mimeBody: response.data})\n                }\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    };\n    showErrorMessage(error) {\n        this.notifyMimeResend.current.notificationAlert({\n            place: 'tr',\n            message: 'Hata: ' + error.errorMessage,\n            type: 'danger',\n            autoDismiss: 10,\n        });\n    }\n\n    componentDidMount() {\n        if (!this.props || !this.props.location || !this.props.location.bordroSession)\n            this.props.history.push({pathname: `/${this.props.peykName}/bordrosessionlist`});\n        else {\n            this.setState({selectedBordroIdList: this.props.location.selectedBordroIdList});\n            let self = this;\n            let params = {\n                url: '/bordrosession/readMimeInfo',\n                method: \"post\",\n                data: self.props.location.bordroSession.id\n            };\n            self.setState({loading: true});\n            requestK(params)\n                .then(function (response) {\n                    self.setState({\n                        mimeTitle: response.data.mimeTitle,\n                        mimeBody: response.data.mimeBody,\n                        loading: false,\n                    });\n                    if (self.props.location.isKepOwner) {\n                        self.setState({kepAccount: response.data.account});\n                    }\n                })\n                .catch(function (error) {\n                    showAxiosError(error);\n                    self.setState({loading: false});\n                });\n        }\n    }\n    updateMailInfo() {\n        let self = this;\n        let selectedBordroIdList = self.state.selectedBordroIdList ? self.state.selectedBordroIdList : self.props.location.selectedBordroIdList;\n        let params = {\n            url: `/signer/writeMailInfo`,\n            method: \"post\",\n            data: {\n                bordroSessionId: self.props.location.bordroSession.id,\n                title: self.state.mimeTitle,\n                body: self.state.mimeBody,\n                smsBody: self.state.smsBody,\n                selectedBordros: selectedBordroIdList\n            }\n        };\n        self.setState({selectedBordroIdList, pageState: 10, alert: null, disableButton: true});\n        requestK(params)\n            .then(function (response) {\n                self.resendMimes();\n            }).catch(function (error) {\n            showAxiosError(error);\n            self.setState({pageState: 40, disableButton: false});\n        });\n    }\n\n    resendMimes() {\n        let self = this;\n        let params = {\n            url: `/bordrosession/resendMime`,\n            method: \"post\",\n            data: {\n                id: self.props.location.bordroSession.id,\n                recordIds: self.state.selectedBordroIdList\n            }\n        };\n        Alert.warning(\"Uyarı gönderme işlemi başlatılıyor...\", {\n            position: 'top-right',\n            effect: 'stackslide',\n            timeout: 4000\n        });\n        self.setState({disableSendBtn: true,loading: true});\n        requestK(params)\n            .then(function (response) {\n                Alert.success(response.data, {\n                    position: 'top-right',\n                    effect: 'stackslide',\n                    timeout: 2000\n                });\n                self.setState({disableSendBtn: false, loading: false});\n                self.props.history.push({pathname: `/${self.props.peykName}/bordroimport/` + self.props.location.bordroSession.id});\n            })\n            .catch(function (error) {\n                self.setState({disableSendBtn: false, loading: false});\n                showAxiosError(error);\n            });\n    }\n\n    renderNavButtons() {\n        return (\n            <Nav className=\"topbar\" style={{paddingLeft: '14px', height: '53px'}}>\n                <StickButton position=\"leftSide\" className=\"zocial GeriDon\" style={{fontSize: 'small'}}\n                             label=\"Geri\" title=\"Önceki Sayfaya Git\"\n                             onClick={e => this.props.history.push({\n                                 pathname: `/${this.props.peykName}/bordroimport/` + this.props.location.bordroSession.id,\n                                 selectedBordroIdList: this.props.location.selectedBordroIdList\n                             })}/>\n                <StickButton position=\"leftSide\" className=\"zocial Gonder\" style={{fontSize: 'small'}}\n                             label=\"Uyarı Gönder\" title=\"Gönderilmiş İletilere Uyarı Gönder\"\n                             onClick={e => {\n                                 this.setState({\n                                     alert: (\n                                         <SweetAlert showCancel warning\n                                                     confirmBtnText=\"Evet\"\n                                                     cancelBtnText=\"Hayır\"\n                                                     confirmBtnBsStyle=\"danger\"\n                                                     cancelBtnBsStyle=\"default\"\n                                                     title=\"Emin misiniz?\"\n                                                     onConfirm={() => {\n                                                         this.setState({alert: null});\n                                                         this.updateMailInfo()\n                                                     }}\n                                                     onCancel={() => this.setState({alert: null})}\n                                         >\n                                             Uyarı iletileri gönderilecek.\n                                         </SweetAlert>\n                                     )\n                                 });\n                             }}/>\n            </Nav>\n        );\n    }\n\n    renderMimeInputs() {\n\n        return <Container>\n            <div className=\"FormRenk\">\n                {this.props.location.isKepOwner &&\n                <Row sm={6}>\n                    <Col sm={2} style={{top: '7px'}}>\n                        Kep Hesabı\n                    </Col>\n                    <Col sm={6}>\n                        <Input type=\"text\" style={{marginTop: '2px'}}\n                               value={this.state.kepAccount}\n                               disable={true}/>\n                    </Col>\n                </Row>}\n                <Row sm={6}>\n                    <Col sm={2} style={{top: '5px'}}>\n                        {this.props.location.isKepOwner ? \"KEP İleti Konusu\" : \"E-Posta İleti Konusu\"}\n                    </Col>\n                    <Col sm={6}>\n                        <Input type=\"text\" style={{marginTop: '2px'}}\n                               value={this.state.mimeTitle}\n                               onChange={(e) => this.setState({mimeTitle: e.target.value})}/>\n                    </Col>\n                </Row>\n                <Row sm={6}>\n                    <Col sm={2} style={{top: '25px'}}>\n                        {this.props.location.isKepOwner ? \"KEP İleti İçeriği\" : \"E-Posta İleti İçeriği\"}\n                    </Col>\n                    <Col sm={6}>\n                        <Input type=\"textarea\" rows={5}\n                               style={{height: '200px', border: '1px solid #E3E3E3', marginTop: '2px'}}\n                               value={this.state.mimeBody}\n                               disabled={this.state.flowTimeOut}\n                               onChange={(e) => this.setState({mimeBody: e.target.value})}/>\n                        {this.state.flowTimeOut &&\n                            <span><span style={{ color: 'red' }}>NOT:</span> E-Posta İleti İçeriğini Bildirim Tasarım Ekranından değiştirebilirsiniz.</span>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        </Container>\n    }\n\n    renderBordroList() {\n        return <BordroTableIdSelected bordroSession={this.props.location.bordroSession}\n                                      selectedBordroIdList={this.props.location.selectedBordroIdList}\n                                      onComplete={e => this.setState({selectedBordroIdList: e})}\n                                      pageSize={10} history={this.props.history} peykName={this.props.peykName}\n                                      loading={this.state.loading}\n                                      processCode={ProcessCode.RESENDMIME.code}\n                                      updateFlowTimeout={this.updateFlowTimeout}\n                                      readFlowTimeoutTemplate={this.readFlowTimeoutTemplate}\n                                      readTimeoutTemplate={this.readTimeoutTemplate}/>\n\n    }\n\n    render() {\n        return (\n            <Row className=\"baseBackground\">\n                <Notify ref={this.notifyMimeResend} className=\"modalAlert\"/>\n                {this.renderNavButtons()}\n                {this.state.alert &&\n                <div className=\"row satirBasi\">\n                    <Notify ref={this.notify}/>\n                    {this.state.alert}\n                </div>}\n                <div className=\"row satirBasi\">\n                    <Col md=\"12\">\n                        <Card className=\"card\">\n                            <CardHeader>\n                                <CardTitle tag=\"h4\">\n                                    Uyarı Gönder\n                                </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderMimeInputs()}\n                            </CardBody>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderBordroList()}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </div>\n            </Row>\n        );\n    }\n}\n\nexport default ResendMimePage;\n"],"sourceRoot":""}