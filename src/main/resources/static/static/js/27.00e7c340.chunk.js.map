{"version":3,"sources":["accounting/kepik/bordrosession/helper/ProcessCode.js","accounting/kepik/bordro/component/BordroTableIdSelected.js","accounting/kepik/bordrosession/SignMimePage.js"],"names":["ProcessCode","SIGNBORDRO","code","SIGNMIME","RESENDMIME","BordroTableIdSelected","Component","constructor","props","super","getEmployeeId","async","self","this","params","url","state","content","employee","id","method","response","requestK","setState","employeeUserId","data","error","showAxiosError","loading","getApprovalUserId","approvalUserId","alert","selection","manual","total","page","size","fetchData","bind","previewBordro","setMediaViewer","accessor","direction","sortStr","undefined","processCode","selectedBordroIdList","searching","then","bordroSession","totalElements","React","createElement","SweetAlert","confirmBtnText","confirmBtnBsStyle","title","onConfirm","history","push","pathname","peykName","toggleModal","length","message","Alert","warning","position","effect","timeout","updateFlowTimeout","onComplete","selectedIdList","readFlowTimeoutTemplate","readTimeoutTemplate","catch","mediaModal","row","responseType","blob","Blob","type","headers","base64Data","reader","FileReader","readAsDataURL","onloadend","result","render","columnList","Header","Cell","term","moment","format","name","className","parsedTckn","surname","kepAddress","style","margin","warningCount","DocumentState","messageType","sortable","textAlign","onClick","e","columns","renewListForKepOwnership","isKepOwner","ApproveDocumentViewer","modal","listener","closeModal","Table","options","SignMimePage","completed","signedDocumentCount","progressLength","pageState","timer","timerStarted","certError","signMimes","updateMimeInfo","writeSignedMime","updateMimeCertificates","stateMap","0","label","10","wait","20","30","40","danger","componentDidMount","axios","Axios","create","baseURL","location","kepAccountList","createUpdateLoading","monthNames","yearInput","monthInput","mimeTitle","mimeBody","componentDidUpdate","setInterval","prevState","bordroSessionId","kepAccountId","parseInt","body","selectedBordros","hsmType","mimeCertificate","certificate","value","certificateKeyId","keyId","bordroIdList","signedInfoList","p","Promise","resolve","signedMime","forEach","element","index","bordroName","post","base64","pin","signedInfo","signature","signedDocument","HsmErrorAlert","renderNavButtons","Nav","paddingLeft","height","StickButton","fontSize","showCancel","cancelBtnText","cancelBtnBsStyle","onCancel","renderState","marginBottom","Col","sm","display","marginRight","ReactLoading","color","width","top","renderMimeInputs","Row","Input","disabled","onChange","target","key","map","account","marginTop","rows","border","padding","renderBordroList","pageSize","Notify","ref","md","Card","CardHeader","CardTitle","tag","CardBody","HsmCertificateViewer","sessionId","val","pinValueChange","certificateError","pdfName","displayCertificateMenu","userId","currentUser"],"mappings":"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","file":"static/js/27.00e7c340.chunk.js","sourcesContent":["let ProcessCode = {\n    SIGNBORDRO: {\n        code: 0\n    },\n    SIGNMIME: {\n        code: 1\n    },\n    RESENDMIME: {\n        code: 2\n    }\n};\n\nexport default ProcessCode;","import React, {Component} from 'react';\nimport Table from \"../../../../components/Table/Table\";\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport 'react-datetime/css/react-datetime.css'\nimport moment from 'moment';\nimport 'moment/locale/tr'\nimport Alert from \"react-s-alert\";\nimport ProcessCode from \"../../bordrosession/helper/ProcessCode\";\nimport {showAxiosError} from \"../../../../helper/helper\";\nimport {requestK} from \"../../../../helper/APIUtils\";\nimport {renewListForKepOwnership} from \"../../common/PeykHelper\";\nimport DocumentState from \"../../common/DocumentState\";\nimport ApproveDocumentViewer from \"../../approval/helper/ApproveDocumentViewer\";\n\nclass BordroTableIdSelected extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      alert: null,\n      selection: [],\n      manual: false,\n      content: [],\n      total: 0,\n      page: 0,\n      size: 10\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.previewBordro = this.previewBordro.bind(this);\n    this.setMediaViewer = this.setMediaViewer.bind(this);\n  }\n\n  getEmployeeId = async () => {\n    let self = this;\n    let employeeId = this.state.content[0].employee.id;\n    let params = {\n      url: `/employee/getEmployeeId/${employeeId}`,\n      method: \"post\"\n    };\n\n    try {\n      let response = await requestK(params);\n      self.setState({\n        employeeUserId: response.data\n      });\n    } catch (error) {\n      showAxiosError(error);\n      self.setState({ loading: false });\n    }\n  };\n\n  getApprovalUserId = async () => {\n    let self = this;\n    let approvalId = this.state.content[0].id;\n    let params = {\n      url: `/approval/getApprovalUserId/${approvalId}`,\n      method: \"post\"\n    };\n\n    try {\n      let response = await requestK(params);\n      self.setState({\n        approvalUserId: response.data\n      });\n    } catch (error) {\n      showAxiosError(error);\n      self.setState({ loading: false });\n    }\n  };\n\n  fetchData(accessor, direction, page, size) {\n    let self = this;\n    let sortStr = accessor !== undefined ? ('&sort=' + accessor + ',' + direction) : '';\n    let params = {\n      url: '/bordro/readBordroAllByIds?processCode=' + self.props.processCode + '&page=' + page + '&size=' + size + sortStr,\n      method: \"post\",\n      data: self.props.selectedBordroIdList\n    };\n    self.setState({loading: true, searching: true, manual: self.manual === true ? false : self.manual});\n    requestK(params)\n        .then(async function (response) {\n        let id = self.props.bordroSession && self.props.bordroSession.id;\n        if (response.data.page && response.data.page.totalElements === 0) {\n          self.setState({\n            alert: (<SweetAlert error\n                                confirmBtnText=\"Tamam\"\n                                confirmBtnBsStyle=\"danger\"\n                                title=\"Hata\"\n                                onConfirm={() => {\n                                  id ?\n                                    self.props.history.push({pathname: `/${self.props.peykName}/bordroimport/` + id}) :\n                                    self.setState({alert: null});\n                                    self.props.toggleModal && self.props.toggleModal(true);\n                                }}>\n              {self.props.processCode === ProcessCode.RESENDMIME.code && \"Seçilen alıcıların onayda bekleyen gönderileri bulunmamaktadır.\"}\n              {self.props.processCode === ProcessCode.SIGNBORDRO.code && \"Seçilen ücret bordrolarının imzalı iletiler bulunduğu veya çalışan eşleşmesi yapılmamış olduğu için bu işlem yapılamaz.\"}\n              {self.props.processCode === ProcessCode.SIGNMIME.code && \"Seçilen ücret bordrolarının imzalı iletiler bulunduğu veya çalışan eşleşmesi yapılmamış olduğu için bu işlem yapılamaz.\"}\n            </SweetAlert>),\n            loading: false\n          });\n          return;\n        } else if (response.data.page && response.data.page.totalElements < self.props.selectedBordroIdList.length) {\n          self.props.toggleModal(false);\n          let message = self.props.processCode === ProcessCode.RESENDMIME.code ? 'Tekrar gönderime hazır bordrolar seçilmiştir.' :\n            (self.props.processCode === ProcessCode.SIGNBORDRO.code ? 'Çalışan eşleşmesi olmayanlar ve daha önce gönderilmiş bordro listeden çıkarılmıştır.' :\n              'Çalışan eşleşmesi olmayanlar ve daha önce gönderilmiş bordro listeden çıkarılmıştır.');\n          Alert.warning(message, {\n            position: 'top-right',\n            effect: 'stackslide',\n            timeout: 8000\n          });\n        }\n\n        self.setState({\n          page: page,\n          size: size,\n          total: response.data.page && response.data.page.totalElements,\n          content: response.data.page && response.data.page.content,\n          loading: false\n        }, () => {\n          if (response.data.page.content[0].state === \"FLOW_TIMEOUT\") {\n            self.props.updateFlowTimeout(true);\n          }\n        self.props.onComplete(response.data.selectedIdList);\n        });\n          if(response.data.page.content[0].state === 'FLOW_TIMEOUT'){\n            await self.getEmployeeId();\n            await self.getApprovalUserId();\n            if (self.state.approvalUserId === self.state.employeeUserId) {\n              self.props.readFlowTimeoutTemplate();\n            } else {\n              self.props.readTimeoutTemplate();\n            }\n          }\n      }).catch(function (error) {\n      self.setState({loading: false});\n      showAxiosError(error);\n    });\n  }\n\n  setMediaViewer() {\n    this.setState({url: null, mediaModal: false});\n  }\n\n  previewBordro(row) {\n    let self = this;\n    let params = {\n      url: `/bordro/previewBordroContent`,\n      responseType: 'arraybuffer',\n      method: \"post\",\n      data: row.id\n    };\n    self.setState({mediaModal: true});\n    requestK(params)\n      .then(function (response) {\n        let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n        let base64Data=\"\";\n        if (blob != undefined) {\n          let reader = new FileReader();\n          reader.readAsDataURL(blob);\n          reader.onloadend = function() {\n            base64Data = reader.result;\n            self.setState({url: base64Data});\n          }\n        }\n      }).catch(function (error) {\n      showAxiosError(error);\n      self.setState({mediaModal: false});\n    });\n  }\n\n  render() {\n\n    let columnList = [\n      {\n        Header: \"Dönem\",\n        accessor: \"term\",\n        Cell: row => (\n          <div>\n            {!!row.term && moment(row.term, 'YYYY/MM/DD').format('YYYY/MM')}\n          </div>\n        )\n      },\n      {\n        Header: \"TCKN\",\n        accessor: \"parsedTckn\",\n        Cell: row => (\n          <div>\n            {(row.employee && row.employee.name) && <span className=\"text-success\">{row.parsedTckn}</span>}\n            {!(row.employee && row.employee.name) && <span className=\"text-danger\">{row.parsedTckn}</span>}\n          </div>\n        )\n      },\n      {\n        Header: \"Adı\",\n        accessor: \"employee_name\",\n        Cell: row => (<div>{row.employee && row.employee.name}</div>\n        )\n      },\n      {\n        Header: \"Soyadı\",\n        accessor: \"employee_surname\",\n        Cell: row => (<div>{row.employee && row.employee.surname}</div>\n        )\n      },\n      {\n        Header: \"Kep Adresi\",\n        accessor: \"employee_kepAddress\",\n        Cell: row => (\n          <div>\n            {row.employee && row.employee.kepAddress}\n          </div>\n        )\n      },\n      {\n        Header: \"Uyarı Sayısı\",\n        accessor: \"warningCount\",\n        Cell: row => (\n            <div style={{margin: 0}}>\n              {row.warningCount}\n            </div>\n        )\n      },\n      {\n        Header: \"Durumu\",\n        accessor: \"state\",\n        Cell: row => (\n          <div>\n            {row.error && <span className=\"text-danger\">{row.error}</span>}\n            {!row.error &&\n            <span\n              className={\"text-\" + DocumentState[row.state].messageType}>{DocumentState[row.state].message}</span>}\n          </div>\n        )\n      },\n      {\n        Header: \"İşlemler\",\n        sortable: false,\n        accessor: \"\",\n        Cell: row => (\n          <div style={{textAlign: 'left'}}>\n            <button title=\"Ücret Bordrosu Görüntüle\" className=\"btn-icon btn btn-info btn-sm\"\n                    style={{margin: '0px 3px'}}\n                    onClick={e => this.previewBordro(row)}>\n              <i className=\"now-ui-icons ui-1_zoom-bold\"/>\n            </button>\n          </div>\n        )\n      }\n    ];\n    let columns = renewListForKepOwnership(columnList, \"accessor\", this.props.isKepOwner);\n    return <div>\n      {this.state.mediaModal &&\n      <ApproveDocumentViewer modal={this.state.mediaModal}\n                             url={this.state.url}\n                             title=\"Ücret Bordrosu\"\n                             listener={this.setMediaViewer}\n                             closeModal={this.setMediaViewer}/>\n      }\n      <Table columns={columns}\n             content={this.state.content}\n             loading={this.props.loading ? this.props.loading : this.state.loading}\n             total={this.state.total}\n             page={this.state.page}\n             manual={this.state.manual}\n             size={this.state.size}\n             options={[\"5\", \"10\", \"20\", \"50\", \"100\"]}\n             fetchData={this.fetchData}\n      />\n      {this.state.alert}\n    </div>;\n  }\n}\n\nexport default BordroTableIdSelected;\n","import React, {Component} from 'react';\nimport {Card, CardBody, CardHeader, CardTitle, Col, Input, Nav, Row} from 'reactstrap';\nimport 'react-table/react-table.css'\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport Notify from 'react-notification-alert';\nimport 'react-datetime/css/react-datetime.css'\nimport 'moment/locale/tr'\nimport Axios from 'axios'\nimport HsmErrorAlert from '../../../common/hsm/HsmErrorAlert'\nimport HsmCertificateViewer from '../common/HsmCertificateViewer';\nimport BordroTableIdSelected from \"../bordro/component/BordroTableIdSelected\";\nimport ReactLoading from 'react-loading';\nimport StickButton from \"../../../components/StickButton\";\nimport ProcessCode from \"./helper/ProcessCode\";\nimport {showAxiosError} from \"../../../helper/helper\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport moment from \"moment\";\n\nclass SignMimePage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            completed: false,\n            signedDocumentCount: 0,\n            progressLength: 1,\n            pageState: 0,\n            selectedBordroIdList: [],\n            timer: 1,\n            timerStarted: false,\n            certError: true\n        };\n\n        this.signMimes              = this.signMimes.bind(this);\n        this.updateMimeInfo         = this.updateMimeInfo.bind(this);\n        this.writeSignedMime        = this.writeSignedMime.bind(this);\n        this.updateMimeCertificates = this.updateMimeCertificates.bind(this);\n\n        this.stateMap = {\n            0: {\n                label: \"İletiler imzalama için hazır. İmzalayınız\",\n            },\n            // İmzala'ya basıldı -> 1.E-posta bilgileri alınıyor\n            10: {\n                label: \"İletiler oluşturuluyor. Lütfen bekleyiniz.\",\n                wait: true\n            },\n            // İmzala'ya basıldı -> 2.Sertifika session'a kaydediliyor\n            //                   -> 3.SignedInfo Üretilmesi bekleniyor\n            20: {\n                label: \"Sertifika sahibi iletilere yazılıyor. Lütfen bekleyiniz.\",\n                wait: true\n            },\n            // İmzala'ya basıldı -> 4.İmzalanıyor\n            30: {\n                label: \"İletiler imzalanıyor. Lütfen bekleyiniz\",\n            },\n            // İmzalanamadı ise;\n            40: {\n                label: \"İletiler imzalanamadı. Lütfen bilgileri kontrol ediniz.\",\n                danger: true\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.axios = Axios.create({\n            baseURL: \"http://127.0.0.1:9999\"\n        });\n\n        if (!this.props || !this.props.location || !this.props.location.bordroSession)\n            this.props.history.push({pathname: `/${this.props.peykName}/bordrosessionlist`});\n        else {\n            let self = this;\n            let params = {\n                url: `/signer/readKepActiveAll`,\n                method: \"post\"\n            };\n            requestK(params)\n            .then(function (response) {\n                let kepAccountList = response.data;\n                self.setState({kepAccountList});\n            }).catch(function (error) {\n                showAxiosError(error);\n                self.setState({loading: false, createUpdateLoading: false});\n            });\n            self.setState({selectedBordroIdList: self.props.location.selectedBordroIdList});\n            let monthNames = [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"];\n            let yearInput = moment(self.props.location.bordroSession.term, 'YYYY/MM/DD').format('YYYY');\n            let monthInput = moment(self.props.location.bordroSession.term, 'YYYY/MM/DD').format('M');\n            self.setState({mimeTitle: `${monthNames[monthInput - 1]} ${yearInput} Ücret Pusulası Bildirimi`});\n            self.setState({\n                mimeBody: \"4857 Sayılı İş Kanunu 37. ve 109. maddeleri hükmünce işveren tarafından hazırlanan ücret pusulası KEP ekinde \" +\n                    \"tarafınıza tebliğ edilmiştir. \" + monthNames[monthInput - 1] + \" \" + yearInput + \" dönemine ilişkin \" +\n                    \"ücret pusulasına karşı itirazlarınızın KEP marifeti ile tarafımıza bildirilmesi, aksi \" +\n                    \"halde ücret pusulasının kesinleşeceğini ihtar ve ihbar ederiz.\"\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.timer === 1 && !this.state.timerStarted &&\n            this.state.completed && this.state.signedDocumentCount === this.state.progressLength) {\n            setInterval(() => {\n                this.setState(prevState => ({timer: prevState.timer - 1}))\n            }, 1000);\n            this.setState({timerStarted: true});\n        } else if (this.state.timer === 0) {\n            this.props.history.push({pathname: `/${this.props.peykName}/bordroimport/` + this.props.location.bordroSession.id});\n        }\n    }\n\n    updateMimeInfo() {\n        let self = this;\n        let selectedBordroIdList = self.state.selectedBordroIdList ? self.state.selectedBordroIdList : self.props.location.selectedBordroIdList;\n        let params = {\n            url: `/signer/writeMimeInfo`,\n            method: \"post\",\n            data: {\n                bordroSessionId: self.props.location.bordroSession.id,\n                kepAccountId: parseInt(self.state.kepAccountId),\n                title: self.state.mimeTitle,\n                body: self.state.mimeBody,\n                selectedBordros: selectedBordroIdList\n            }\n        };\n        self.setState({selectedBordroIdList, pageState: 10, alert: null});\n        requestK(params)\n            .then(function (response) {\n                self.updateMimeCertificates();\n            }).catch(function (error) {\n            showAxiosError(error);\n            self.setState({pageState: 40});\n        });\n    }\n\n    updateMimeCertificates() {\n        let self = this;\n        let bordroSessionId = self.props.location.bordroSession.id;\n        let hsmType = self.state.mimeCertificate.hsmType;\n        let certificate = self.state.mimeCertificate.value;\n        let certificateKeyId = self.state.mimeCertificate.keyId;\n        let params = {\n            url: `/signer/createMimeSignedInfoList`,\n            method: \"post\",\n            data: {\n                certificate,\n                bordroSessionId,\n                hsmType,\n                certificateKeyId,\n                bordroIdList: self.state.selectedBordroIdList\n            }\n        };\n        self.setState({pageState: 20});\n        requestK(params)\n            .then(function (response) {\n                self.setState({signedInfoList: response.data});\n                self.signMimes();\n            }).catch(function (error) {\n            showAxiosError(error);\n            self.setState({pageState: 40});\n        });\n    }\n\n\n    signMimes() {\n        let p = Promise.resolve([]);\n        let signedMime = [];\n\n        this.setState({\n            progressLength: this.state.signedInfoList.length,\n            loading: true,\n            pageState: 30\n        });\n\n        this.state.signedInfoList.forEach((element, index) => {\n            p = p.then((response) => {\n                this.setState({bordroName: element.bordroName});\n                return this.axios.post(\"/signature/signedinfo?hsmtype=\" + element.hsmType, {\n                    base64: true,\n                    pin: this.state.pin,\n                    signedInfo: element.signedInfo,\n                    certificate: {\n                        keyId: element.certificateKeyId\n                    }\n                }).then((response) => {\n                    signedMime.push({\n                        id: element.id,\n                        signature: response.data.signedDocument\n                    });\n                    this.writeSignedMime(signedMime);\n                    signedMime = [];\n                });\n            });\n        });\n\n        p.then((result) => {\n            this.setState({\n                loading: false,\n                completed: true\n            });\n        }).catch(error => {\n            this.setState({\n                loading: false,\n                completed: true,\n                alert: <HsmErrorAlert error={error} onConfirm={() => this.setState({alert: null})}/>\n            });\n        });\n    }\n\n    writeSignedMime(signedMime) {\n        let self = this;\n        let params = {\n            url: `/signer/writeMimeSignature`,\n            method: \"post\",\n            data: signedMime\n        };\n        requestK(params)\n            .then(function (response) {\n                self.setState((prevState, props) => {\n                    return {signedDocumentCount: prevState.signedDocumentCount + 1}\n                });\n            }).catch(function (error) {\n            showAxiosError(error);\n            self.setState({pageState: 40});\n        });\n    }\n\n    renderNavButtons() {\n        return (\n            <Nav className=\"topbar\" style={{paddingLeft: '14px', height: '53px'}}>\n                <StickButton position=\"leftSide\" className=\"zocial GeriDon\" style={{fontSize: 'small'}}\n                             label=\"Geri\" title=\"Önceki Sayfaya Git\"\n                             onClick={e => this.props.history.push({\n                                 pathname: `/${this.props.peykName}/bordroimport/` + this.props.location.bordroSession.id,\n                                 selectedBordroIdList: this.props.location.selectedBordroIdList\n                             })}/>\n                <StickButton position=\"leftSide\" className=\"zocial Imza\" style={{fontSize: 'small'}}\n                             label=\"İmzala\" title=\"İleti Oluştur ve İmzala\"\n                             onClick={e => {\n                                 if (this.state.mimeCertificate && this.state.mimeCertificate.hsmType &&\n                                     this.state.mimeCertificate.value && this.state.mimeCertificate.keyId) {\n                                     if (this.state.kepAccountId === undefined) {\n                                         this.setState({\n                                             alert: (\n                                                 <SweetAlert warning\n                                                             confirmBtnText=\"Tamam\"\n                                                             confirmBtnBsStyle=\"warning\"\n                                                             title=\"Uyarı\"\n                                                             onConfirm={() => {\n                                                                 this.setState({alert: null});\n                                                             }\n                                                             }>\n                                                     Kep hesabı seçimi yapınız.\n                                                 </SweetAlert>\n                                             )\n                                         });\n                                     } else {\n                                         this.setState({\n                                             alert: (\n                                                 <SweetAlert showCancel warning\n                                                             confirmBtnText=\"Evet\"\n                                                             cancelBtnText=\"Hayır\"\n                                                             confirmBtnBsStyle=\"danger\"\n                                                             cancelBtnBsStyle=\"default\"\n                                                             title=\"Emin misiniz?\"\n                                                             onConfirm={this.updateMimeInfo}\n                                                             onCancel={() => this.setState({alert: null})}\n                                                 >\n                                                     İletiler imzalanacak.\n                                                 </SweetAlert>\n                                             )\n                                         });\n                                     }\n                                 } else {\n                                     this.setState({\n                                         alert: <HsmErrorAlert error={this.state.certError}\n                                                               onConfirm={() => this.setState({alert: null})}/>\n                                     });\n                                 }\n                             }}/>\n            </Nav>\n        );\n    }\n\n    renderState() {\n        let stateMap = this.stateMap[this.state.pageState];\n\n        return <div className=\"row\" style={{marginBottom: \"15px\"}}>\n            <Col sm={12}>\n                <div style={{display: \"inline-block\", marginRight: \"8px\"}}>\n                    {stateMap.wait && <ReactLoading type=\"balls\" color=\"#2c2c2c\" height={24} width={24}/>}\n                </div>\n                <div style={{\n                    display: \"inline-block\", marginRight: \"8px\", position: \"relative\", top: \"-6px\",\n                    color: stateMap.danger === true ? \"trueColor\" : \"falseColor\"\n                }}>\n                    {stateMap.label}\n                </div>\n            </Col>\n        </div>;\n    }\n\n    renderMimeInputs() {\n\n        return <div className=\"FormRenk\">\n            <Row sm={6}>\n                <Col sm={2} style={{top: '7px'}}>\n                    Kep Hesabı\n                </Col>\n                <Col sm={6}>\n                    {this.state.kepAccountList &&\n                    <Input type=\"select\" value={this.state.kepAccountId} disabled={this.state.pageState !== 0}\n                           onChange={(e) => this.setState({kepAccountId: e.target.value})}>\n                        {[<option key=\"0\" value=\"\">Seçiniz</option>, ...this.state.kepAccountList.map(e => <option\n                            key={e.id} value={e.id}>{e.account}</option>)]}\n                    </Input>\n                    }\n                    {!this.state.kepAccountList &&\n                    <Input type=\"select\" value={this.state.kepAccountId}\n                           onChange={(e) => this.setState({kepAccountId: e.target.value})}>\n                        {[<option key=\"0\" value=\"\">Seçiniz</option>]}\n                    </Input>\n                    }\n                </Col>\n                </Row>\n            <Row sm={6}>\n                <Col sm={2} style={{top: '5px'}}>\n                    Kep Konu\n                </Col>\n                <Col sm={6}>\n                    <Input type=\"text\" style={{marginTop: '2px'}} disabled={this.state.pageState !== 0}\n                           value={this.state.mimeTitle}\n                           onChange={(e) => this.setState({mimeTitle: e.target.value})}/>\n                </Col>\n            </Row>\n            <Row sm={6}>\n                <Col sm={2} style={{top: '25px'}}>\n                    Kep İçerik\n                </Col>\n                <Col sm={6}>\n                    <Input type=\"textarea\" rows={5} disabled={this.state.pageState !== 0}\n                           style={{\n                               height: '200px',\n                               border: '1px solid #E3E3E3',\n                               marginTop: '2px',\n                               padding: '3px 3px'\n                           }}\n                           value={this.state.mimeBody}\n                           onChange={(e) => this.setState({mimeBody: e.target.value})}/>\n                </Col>\n            </Row>\n        </div>\n    }\n\n    renderBordroList() {\n        return <BordroTableIdSelected bordroSession={this.props.location.bordroSession}\n                                      selectedBordroIdList={this.props.location.selectedBordroIdList}\n                                      onComplete={e => this.setState({selectedBordroIdList: e})}\n                                      pageSize={10} history={this.props.history} peykName={this.props.peykName}\n                                      processCode={ProcessCode.SIGNMIME.code}/>\n    }\n\n    render() {\n\n        return (\n            <Row className=\"baseBackground\">\n                <Notify ref=\"notify\"/>\n                {this.state.alert}\n                {this.renderNavButtons()}\n                <div className=\"row satirBasi\">\n                    <Col md=\"12\">\n                        <Card className=\"card\">\n                            <CardHeader>\n                                <CardTitle tag=\"h4\">\n                                    İmzala & Gönder\n                                </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderState()}\n                            </CardBody>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderMimeInputs()}\n                            </CardBody>\n                            <CardBody>\n                                {this.props.location.bordroSession &&\n                                <HsmCertificateViewer sessionId={this.props.location.bordroSession.id}\n                                                      value={this.state.mimeCertificate}\n                                                      onChange={(val) => this.setState({mimeCertificate: val})}\n                                                      pinValueChange={(val) => this.setState({pin: val})}\n                                                      certificateError={(val) => this.setState({certError: val})}\n                                                      pdfName={this.state.bordroName ? this.state.bordroName : \"\"}\n                                                      progressLength={this.state.progressLength}\n                                                      signedDocumentCount={this.state.signedDocumentCount}\n                                                      displayCertificateMenu={this.state.pageState === 0 || this.state.pageState === 40}\n                                                      userId={this.props.currentUser && this.props.currentUser.id}/>}\n                            </CardBody>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderBordroList()}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </div>\n            </Row>\n\n        );\n    }\n\n}\n\nexport default SignMimePage;\n"],"sourceRoot":""}