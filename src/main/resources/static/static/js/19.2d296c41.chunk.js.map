{"version":3,"sources":["components/AutoCompleteList.js","accounting/kepik/approval/PdfComponent.js","accounting/kepik/formtemplate/FormTemplateImportPage.js"],"names":["AutoCompleteList","Component","constructor","props","super","formatCreateLabelCreator","value","this","allowNew","name","state","changeLabel","bind","createLabel","checkUpperCase","generateOptions","onChange","list","length","newValue","onlyLabel","label","push","updateList","i","valueCheck","text","useUpperCase","toString","replace","toUpperCase","options","map","e","render","React","createElement","Select","Creatable","clearable","multi","className","id","placeholder","promptTextCreator","noResultsText","onNewOptionClick","defaultProps","PDFRenderer","_ref","mainState","undefined","currentDocument","fileData","uri","fileType","PDFProvider","Container","data-testid","PDFControls","TransformWrapper","defaultScale","defaultPositionX","defaultPositionY","disabled","TransformComponent","PDFPages","fileTypes","weight","MSDocRenderer","_ref2","split","ContainerMSDOC","href","download","MSDocFTMaps","doc","docx","xls","xlsx","ppt","pptx","fileLoader","_ref3","fileLoaderComplete","styled","div","widgets","imageFileChooserWidget","ImageUpload","linkWidget","LinkWidget","fileChooserWidget","FileChooserWidget","PdfComponent","onFocus","setState","menuIsOpen","handleSelectedAttachmentChange","selectedAttachment","_ref4","action","toggleSetting","type","p","activateZoom","myRef","createRef","numPages","pageNumber","scale","showAnimationArrows","page","scrollTop","enableWheel","surveyFormModal","surveyFormButton","surveyForm","surveyFormResponse","surveyAttachments","viewer","onDocumentLoad","onClickAttachments","cancelShowSurveyForm","getSurveyFormResponse","getSurveyForm","showViewer","closeViewer","self","Swal","fire","title","html","icon","confirmButtonText","componentDidMount","documentId","params","url","method","data","requestK","then","response","jsObj","JSON","parse","formSurveyResponseParameters","Object","keys","filter","x","stringify","includes","param","catch","error","showAxiosError","surveyId","isSurveyFormTrue","flag","style","height","Row","Button","onClick","showBarcodeList","DocViewer","width","documents","pluginRenderers","BMPRenderer","HTMLRenderer","JPGRenderer","MSGRenderer","PNGRenderer","TIFFRenderer","TXTRenderer","config","header","disableHeader","disableFileName","Modal","isOpen","size","ModalHeader","toggle","jsonContent","ModalBody","overflow","margin","Form","schema","uiSchema","formData","children","Label","noOptionsMessage","DocumentViewer","attachment","FormTemplateImportPage","editTemplate","formTypeList","parameters","originalContent","selected","location","selectedForm","formType","category","template","formName","mimeBody","isAnswerable","isDecline","imported","formParams","formContent","encoded","TextEncoder","encode","chunkSize","binaryString","String","fromCharCode","apply","slice","btoa","responseType","blob","Blob","headers","base64Data","reader","FileReader","readAsDataURL","onloadend","result","preview","loading","internalList","internalParameters","includedParameters","externalList","finally","isValid","parseInt","formTemplate","assign","file","isValidFormTemplateImport","saveClicked","valid","formParameters","parameter","isInternal","FormData","append","Alert","success","position","effect","timeout","onClose","history","pathname","peykName","errorMessage","onDrop","acceptedFiles","rejectedFiles","window","URL","webkitURL","createObjectURL","downloadParameters","a","document","body","appendChild","click","alert","renderEditorComponent","CardBody","row","marginBottom","left","Col","sm","FormGroup","editClassName","onChangeOnFormType","Input","target","rows","border","marginTop","padding","checked","renderAllParameters","Dropzone","accept","activeClassName","multiple","onMdbDrop","renderIncludedParameters","renderDropzone","renderPreview","handleIncludeParameter","key","removed","prevState","backgroundColor","index","handleExcludeParameter","StickButton","fontSize","data-toggle","data-placement","rel","top","fileName","Nav","paddingLeft","ReactLoading","fill"],"mappings":"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","file":"static/js/19.2d296c41.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Select from \"../local_node_modules/react-select\"\n\nclass AutoCompleteList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.changeLabel = this.changeLabel.bind(this);\n        this.createLabel = this.createLabel.bind(this);\n        this.checkUpperCase = this.checkUpperCase.bind(this);\n        this.generateOptions = this.generateOptions.bind(this);\n    }\n\n    changeLabel(value) {\n        this.props.onChange(this.checkUpperCase(value));\n    }\n\n    createLabel(value) {\n        if (this.props.allowNew) {\n            let list = this.props.list;\n            if (list.length === 0) {\n                let newValue;\n                if (!this.props.onlyLabel) {\n                    newValue = {value: \"0\", label: this.checkUpperCase(value.label)};\n                } else {\n                    newValue = {value: this.checkUpperCase(value.label), label: this.checkUpperCase(value.label)};\n                }\n                list.push(newValue);\n                this.props.updateList(list);\n                this.changeLabel(newValue);\n            } else {\n                let i = list.length - 1;\n                let valueCheck = list[i];\n                if (!this.props.onlyLabel) {\n                    if (valueCheck.value === \"0\") {\n                        list[i].label = this.checkUpperCase(value.label);\n                        this.props.updateList(list);\n                        this.changeLabel(list[i]);\n                    } else {\n                        let newValue = {value: \"0\", label: this.checkUpperCase(value.label)};\n                        list.push(newValue);\n                        this.props.updateList(list);\n                        this.changeLabel(newValue);\n                    }\n                } else {\n                    if (valueCheck.value === this.checkUpperCase(value.label)) {\n                        list[i].label = this.checkUpperCase(value.label);\n                        this.props.updateList(list);\n                        this.changeLabel(list[i]);\n                    } else {\n                        let newValue = {\n                            value: this.checkUpperCase(value.label),\n                            label: this.checkUpperCase(value.label)\n                        };\n                        list.push(newValue);\n                        this.props.updateList(list);\n                        this.changeLabel(newValue);\n                    }\n                }\n            }\n        }\n    }\n\n    checkUpperCase(text) {\n        if (text && this.props.useUpperCase) {\n            if (text.value != null && text.label) {\n                text.label = text.label.toString().replace(\"i\", \"İ\").toUpperCase();\n            } else {\n                text = text.toString().replace(\"i\", \"İ\").toUpperCase();\n            }\n        }\n        return text;\n    }\n\n    generateOptions() {\n        let options = [];\n        this.props.list &&\n        this.props.list.length > 0 &&\n        this.props.list.map(e => {\n            options.push({value: e.value, label: this.checkUpperCase(e.label)})\n        });\n        return options;\n    }\n\n    formatCreateLabelCreator = (value) => {\n        if (this.props.allowNew)\n            return 'Ekle \"' + value + '\"';\n        else\n            return 'Lütfen, var olan bir ' + this.props.name + ' seçimi yapınız.'\n    };\n\n    render() {\n        let options = this.generateOptions();\n        return (\n            <Select.Creatable\n                clearable={false}\n                multi={false}\n                className=\"select-control\"\n                name=\"autoCompleteList\"\n                id=\"autoCompleteList\"\n                value={this.props.value}\n                placeholder={this.props.placeholder}\n                promptTextCreator={this.formatCreateLabelCreator}\n                noResultsText={\"Henüz kaydedilmiş veri yok\"}\n                onChange={(e) => this.changeLabel(e)}\n                onNewOptionClick={(e) => this.createLabel(e)}\n                options={options}\n            />\n        );\n    }\n}\n\nAutoCompleteList.defaultProps = {\n  allowNew: true,\n  useUpperCase: false,\n  onlyLabel: false,\n  updateList: (list) => {}\n};\nexport default AutoCompleteList;\n","import React, {Component} from 'react';\nimport {Button, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport Form from \"react-jsonschema-form\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport {showAxiosError} from \"../../../helper/helper\";\nimport Select from \"react-select\";\nimport DocumentViewer from \"./DocumentViewer\";\nimport Swal from \"sweetalert2\";\nimport ImageUpload from \"../formbuilder/ImageUpload\";\nimport LinkWidget from \"../formbuilder/LinkWidget\";\nimport FileChooserWidget from \"../formbuilder/FileChooserWidget\";\nimport PDFControls from \"react-doc-viewer/build/plugins/pdf/components/PDFControls\";\nimport PDFPages from \"react-doc-viewer/build/plugins/pdf/components/pages/PDFPages\";\nimport {PDFProvider} from \"react-doc-viewer/build/plugins/pdf/state\";\nimport {Container} from \"react-bootstrap\";\nimport \"../../kepik/isPersonalInfo/contextmenu.css\";\nimport {TransformComponent, TransformWrapper} from \"react-zoom-pan-pinch\";\nimport DocViewer, {\n    BMPRenderer,\n    DocRenderer,\n    HTMLRenderer,\n    JPGRenderer,\n    MSGRenderer,\n    PNGRenderer,\n    TIFFRenderer,\n    TXTRenderer\n} from \"react-doc-viewer\";\nimport styled from \"styled-components\";\nimport Row from \"react-bootstrap/Row\";\n\nconst PDFRenderer: DocRenderer = ({mainState}) => {\n    if (mainState.currentDocument.fileData === undefined)\n        mainState.currentDocument.fileData = mainState.currentDocument.uri;\n    if (mainState.currentDocument.fileType === undefined)\n        mainState.currentDocument.fileType = \"application/pdf\";\n    mainState.currentDocument.uri = \"Document\";\n    return (<PDFProvider mainState={mainState}>\n        <Container id=\"pdf-renderer\" data-testid=\"pdf-renderer\">\n            <PDFControls/>\n            <TransformWrapper\n                defaultScale={1}\n                defaultPositionX={200}\n                defaultPositionY={100}\n                options={{\n                    disabled: true\n                }}\n            >\n                <TransformComponent>\n                    <PDFPages/>\n                </TransformComponent>\n            </TransformWrapper>\n        </Container>\n    </PDFProvider>);\n};\nPDFRenderer.fileTypes = [\"pdf\", \"application/pdf\"];\nPDFRenderer.weight = 0;\n\nconst MSDocRenderer: DocRenderer = ({mainState: {currentDocument}}) => {\n    let arr = currentDocument.uri.split(',');\n    let name = arr[0].split(';')[1].replace(\"name=\", \"\");\n    return (<ContainerMSDOC id=\"msdoc-renderer\">\n        <p>Bu bir Microsoft Ofis dosyasıdır. Dosya içeriğini görüntülemek istiyorsanız dosyayı aşağıdaki linkten\n            indirip Microsoft Office uygulaması ile açınız.</p>\n        <p><a href={currentDocument.uri} download={name}>İndir</a></p>\n    </ContainerMSDOC>);\n\n};\n\n\nconst MSDocFTMaps = {\n    doc: [\"doc\", \"application/msword\"],\n    docx: [\"docx\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",],\n    xls: [\"xls\", \"application/vnd.ms-excel\"],\n    xlsx: [\"xlsx\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",],\n    ppt: [\"ppt\", \"application/vnd.ms-powerpoint\"],\n    pptx: [\"pptx\", \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",],\n};\n\nMSDocRenderer.fileTypes = [...MSDocFTMaps.doc, ...MSDocFTMaps.docx, ...MSDocFTMaps.xls, ...MSDocFTMaps.xlsx, ...MSDocFTMaps.ppt, ...MSDocFTMaps.pptx,];\nMSDocRenderer.weight = 0;\nMSDocRenderer.fileLoader = ({fileLoaderComplete}) => fileLoaderComplete();\nconst ContainerMSDOC = styled.div`\n  width: 100%;\n  height: 100%;\n`;\nconst imageFileChooserWidget = ImageUpload;\nconst linkWidget = LinkWidget;\nconst fileChooserWidget = FileChooserWidget;\nconst widgets = {imageFileChooserWidget, linkWidget, fileChooserWidget};\n\nclass PdfComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.state = {\n            numPages: null,\n            pageNumber: 1,\n            scale: 1.2,\n            activateZoom: false,\n            showAnimationArrows: false,\n            page: 1,\n            scrollTop: 0,\n            disabled: true,\n            enableWheel: false,\n            surveyFormModal: false,\n            surveyFormButton: false,\n            surveyForm: null,\n            surveyFormResponse: null,\n            surveyAttachments: [],\n            selectedAttachment: \"\",\n            viewer: false,\n            menuIsOpen: false,\n\n\n        };\n\n        this.onDocumentLoad = this.onDocumentLoad.bind(this);\n        this.onClickAttachments = this.onClickAttachments.bind(this);\n        this.cancelShowSurveyForm = this.cancelShowSurveyForm.bind(this);\n        this.getSurveyFormResponse = this.getSurveyFormResponse.bind(this);\n        this.getSurveyForm = this.getSurveyForm.bind(this);\n        this.handleSelectedAttachmentChange = this.handleSelectedAttachmentChange.bind(this);\n        this.showViewer = this.showViewer.bind(this);\n        this.closeViewer = this.closeViewer.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n    }\n\n    onFocus = e => {\n        this.setState({menuIsOpen: true});\n    };\n\n    showViewer() {\n        let self = this;\n        if (self.state.selectedAttachment !== \"\") {\n            self.setState({viewer: true});\n        } else {\n            Swal.fire({\n                    title: 'Uyarı ! ',\n                    html: 'Görüntülemek istediğiniz dokümanı seçiniz!',\n                    icon: 'warn',\n                    confirmButtonText: 'Tamam'\n                }\n            );\n        }\n    }\n\n    closeViewer() {\n        this.setState({viewer: false});\n    }\n\n    componentDidMount() {\n        this.getSurveyFormResponse();\n    }\n\n    handleSelectedAttachmentChange = (selectedAttachment, {action}) => {\n        let self = this;\n        self.setState({selectedAttachment: selectedAttachment, menuIsOpen: false});\n\n    };\n\n    getSurveyFormResponse() {\n        let self = this;\n        if (!!self.props.documentId) {\n            let params = {\n                url: `/survey/getSurveyFormResponseByFormId`,\n                method: \"post\",\n                data: self.props.documentId\n            };\n            requestK(params)\n                .then(function (response) {\n                    self.setState({surveyFormResponse: response.data});\n                    if (self.state.surveyFormResponse !== null && self.state.surveyFormResponse !== \"\") {\n                        let jsObj = JSON.parse(self.state.surveyFormResponse.response == \"\" ? \"{}\" : self.state.surveyFormResponse.response);\n                        let formSurveyResponseParameters = Object.keys(jsObj).filter(function (x) {\n                            return JSON.stringify(jsObj[x]).includes(\"data:image\") || JSON.stringify(jsObj[x]).includes(\"data:application\");\n                        });\n                        let options = [];\n                        formSurveyResponseParameters.map((param) => {\n                            options.push({value: param, label: param});\n                        });\n                        self.setState({surveyAttachments: options});\n                        self.getSurveyForm();\n                    }\n                }).catch(function (error) {\n                showAxiosError(error);\n            });\n        }\n    }\n\n    getSurveyForm() {\n        let self = this;\n        let params = {\n            url: `/survey/getSurveyForm`,\n            method: \"post\",\n            data: self.state.surveyFormResponse.surveyId\n        };\n        requestK(params)\n            .then(function (response) {\n                self.setState({surveyForm: response.data, surveyFormButton: true});\n                self.props.isSurveyFormTrue();\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    }\n\n    cancelShowSurveyForm() {\n        this.setState({\n            surveyFormModal: false\n        })\n    }\n\n    onDocumentLoad(e) {\n        let {numPages} = e;\n        this.setState({numPages, flag: true});\n    }\n\n    onClickAttachments() {\n        this.setState({surveyFormModal: true});\n    }\n\n    toggleSetting = type => {\n        this.setState(p => ({[type]: !p[type], activateZoom: !this.state.activateZoom}));\n    };\n\n    render() {\n        return (\n            <div style={{height: '700px'}}>\n                <div>\n                    <Row>\n                        {this.state.surveyFormButton && <Button\n                            className=\"pdfZoomButtons\"\n                            title=\"Formu Göster\"\n                            onClick={this.onClickAttachments}> {\"Formu Göster\"}</Button>}\n                        {this.state.surveyFormButton && <Button\n                            className=\"pdfZoomButtons\"\n                            title=\"Formu Göster\"\n                            onClick={this.props.showBarcodeList}\n                        > Barkodlar</Button>}\n                    </Row>\n                    <Row>\n                        {this.props.url && <DocViewer\n                            style={{width: \"100%\"}}\n                            documents={[{uri: this.props.url}]}\n                            pluginRenderers={[PDFRenderer, BMPRenderer, HTMLRenderer, JPGRenderer, MSDocRenderer, MSGRenderer, PNGRenderer, TIFFRenderer, TXTRenderer]}\n                            config={{\n                                header: {\n                                    disableHeader: true, disableFileName: true\n                                }\n                            }}\n                        />}\n                    </Row>\n                </div>\n                <div id='positionOfScroll'>\n                    <Modal isOpen={this.state.surveyFormModal} size=\"lg\" className=\"ust\">\n                        <ModalHeader\n                            toggle={this.cancelShowSurveyForm}>{(this.state.surveyForm != \"\" && this.state.surveyForm !== null) ? JSON.parse(this.state.surveyForm.jsonContent)['name'] : \"\"}\n                        </ModalHeader>\n                        <ModalBody style={{overflow: 'visible'}}>\n                            <div className=\"card\">\n                                <div className=\"card-body\" style={{margin: '0px 16px 16px 16px'}}>\n                                    <Form\n                                        schema={(this.state.surveyForm != \"\" && this.state.surveyForm !== null) ? JSON.parse(this.state.surveyForm.jsonContent)['schema'] : \"\"}\n                                        uiSchema={(this.state.surveyForm != \"\" && this.state.surveyForm !== null) ? JSON.parse(this.state.surveyForm.jsonContent)['uiSchema'] : \"\"}\n                                        formData={(this.state.surveyFormResponse != \"\" && this.state.surveyFormResponse != null) ? JSON.parse(this.state.surveyFormResponse.response) : \"\"}\n                                        disabled={true}\n                                        children={<br/>}\n                                        widgets={widgets}\n                                    />\n                                    <div className=\"container\">\n                                        <div className=\"row\">\n                                            <div className=\"col-sm-3 row align-items-center\">\n                                                <Label>Doküman Listesi</Label>\n                                            </div>\n                                            <div className=\"col-sm-5 row align-items-center\">\n                                                <Select\n                                                    className=\"col-sm-12\"\n                                                    clearable={false}\n                                                    value={this.state.selectedAttachment}\n                                                    placeholder=\"Seçiniz...\"\n                                                    onChange={this.handleSelectedAttachmentChange}\n                                                    onFocus={this.onFocus}\n                                                    menuIsOpen={this.state.menuIsOpen}\n                                                    options={this.state.surveyAttachments}\n                                                    noOptionsMessage={() => 'Eklenen Doküman Bulunamadı!'}\n                                                />\n                                            </div>\n                                            <div className=\"col-sm-2 row align-items-center\">\n                                                <Button type=\"button\" onClick={this.showViewer}>Görüntüle</Button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </ModalBody>\n                    </Modal>\n                    {this.state.viewer && <DocumentViewer closeViewer={this.closeViewer}\n                                                          attachment={JSON.parse(this.state.surveyFormResponse.response)[this.state.selectedAttachment['value']]}/>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PdfComponent;","import React, {Component} from 'react';\n\nimport {CardBody, Col, Form, Input, Label, Nav, Row} from \"reactstrap\";\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport StickButton from \"../../../components/StickButton\";\nimport {showAxiosError} from \"../../../helper/helper\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport Alert from \"react-s-alert\";\nimport AutoCompleteList from \"../../../components/AutoCompleteList\";\nimport {FormGroup} from \"react-bootstrap\";\nimport {isValidFormTemplateImport} from \"../../../common/componentValidation\";\nimport './FormTemplateImportPage.css';\nimport Dropzone from \"react-dropzone\";\nimport ReactLoading from \"react-loading\";\nimport PdfComponent from \"../approval/PdfComponent\";\n\nclass FormTemplateImportPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            valid: {},\n            formType: null,\n            template: {\n                id: null,\n                formName: \"\",\n                mimeBody: \"\",\n                isAnswerable: false,\n                isDecline: false,\n                imported: true\n            },\n            file: null,\n            fileName: null,\n            preview: null,\n            formTypeList: [],\n            parameters: [],\n            internalParameters: [],\n            includedParameters: []\n        };\n        this.onDrop = this.onDrop.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeOnFormType = this.onChangeOnFormType.bind(this);\n    }\n\n    componentDidMount() {\n        let self = this;\n        requestK({\n            url: `/formtemplate/getList`,\n            method: \"post\"\n        })\n            .then(function (response) {\n                let {formTypeList, formParameters} = response.data;\n                let parameters = Object.keys(formParameters).map((key) => ({label: key, value: key}));\n\n                if (self.props.location.selectedForm) {\n                    self.editTemplate(formTypeList, parameters);\n                } else {\n                    self.setState({\n                        formTypeList: formTypeList,\n                        parameters: parameters,\n                        internalParameters: parameters\n                    });\n                }\n            })\n            .catch(function (error) {\n                showAxiosError(error);\n            });\n    }\n\n    editTemplate = (formTypeList, parameters) => {\n        let selected = this.props.location.selectedForm;\n        let formType = {value: selected.formType.id, label: selected.formType.category};\n        let template = {\n            id: selected.id,\n            formName: selected.formName,\n            mimeBody: selected.mimeBody,\n            isAnswerable: selected.isAnswerable,\n            isDecline: selected.isDecline,\n            imported: selected.imported\n        };\n        let params = JSON.parse(selected.formParams);\n        let originalContent;\n        if (selected.formContent) {\n            originalContent = selected.formContent;\n            let encoded = new TextEncoder().encode(selected.formContent);\n            let chunkSize = 1024;\n            let binaryString = \"\";\n            for (let i = 0; i < encoded.length; i += chunkSize) {\n                binaryString += String.fromCharCode.apply(null, encoded.slice(i, i + chunkSize));\n            }\n            selected.formContent = btoa(binaryString);\n        }\n\n        requestK({\n            url: `/formtemplate/previewTemplateContent`,\n            responseType: 'arraybuffer',\n            method: \"post\",\n            data: selected.id\n        }).then(response => {\n            let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n            let base64Data = \"\";\n            if (blob !== undefined) {\n                let reader = new FileReader();\n                reader.readAsDataURL(blob);\n                reader.onloadend = function () {\n                    base64Data = reader.result;\n                }\n            }\n            this.setState({\n                formType,\n                template,\n                preview: base64Data,\n                loading: false,\n                parameters: parameters.filter(p => !params.internalList.includes(p.label)),\n                formTypeList: formTypeList,\n                internalParameters: parameters,\n                includedParameters: [...params.internalList, ...params.externalList],\n            });\n        }).catch(error => {\n            showAxiosError(error);\n        }).finally(function () {\n            if (originalContent !== undefined) {\n                selected.formContent = originalContent;\n            }\n        });\n    };\n\n    isValid = () => {\n        let formType = this.state.formType;\n        let template = this.state.template;\n        if (formType == null)\n            template.formType = null;\n        else\n            template.formType = {id: formType.value ? parseInt(formType.value) : null, category: formType.label};\n        let formTemplate = Object.assign({}, template);\n        formTemplate['file'] = this.state.file;\n        return isValidFormTemplateImport(formTemplate);\n    };\n\n    saveClicked = () => {\n        let self = this;\n        let result = this.isValid();\n        if (result.valid) {\n            let formType = this.state.formType;\n            let template = this.state.template;\n            template.formType = {id: formType.value ? parseInt(formType.value) : null, category: formType.label};\n            template.isAnswerable = template.isAnswerable ? 1 : 0;\n            template.isDecline = template.isDecline ? 1 : 0;\n\n            let formParameters = {\n                internalList: this.state.includedParameters.filter(parameter => this.isInternal(parameter)),\n                externalList: this.state.includedParameters.filter(parameter => !this.isInternal(parameter))\n            };\n            template.formParams = JSON.stringify(formParameters);\n            this.setState({loading: true});\n\n            let formData = new FormData();\n            formData.append(\"file\", this.state.file);\n            formData.append(\"template\", JSON.stringify(template));\n            requestK({\n                url: `/formtemplate/save`,\n                method: \"post\",\n                data: formData\n            }).then(() => {\n                Alert.success(\"Form Şablonu başarılı şekilde aktarıldı.\", {\n                    position: 'top-right',\n                    effect: 'stackslide',\n                    timeout: 3000,\n                    onClose: () => this.props.history.push({pathname: `/${this.props.peykName}/formtemplate/`})\n                });\n            }).catch(error => {\n                showAxiosError(error);\n                self.setState({loading: false});\n            });\n        } else {\n            Alert.error(result.errorMessage, {\n                position: 'top-right',\n                effect: 'stackslide',\n                timeout: 5000\n            });\n        }\n    };\n\n    onDrop = (acceptedFiles, rejectedFiles) => {\n        if (!!acceptedFiles) {\n            let file = acceptedFiles[0];\n            this.setState({file, loading: true});\n            let formData = new FormData();\n            formData.append(\"file\", file);\n            requestK({\n                url: `/formtemplate/preview`,\n                responseType: 'arraybuffer',\n                method: \"post\",\n                data: formData\n            }).then((response) => {\n                let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n                let urlCreator = window.URL || window.webkitURL;\n                let preview = urlCreator.createObjectURL(blob);\n                this.setState({preview, loading: false});\n            }).catch(error => {\n                showAxiosError(error);\n                this.setState({loading: false});\n            });\n        }\n    };\n\n    editClassName(name) {\n        let valid = this.state.valid[name];\n        if (typeof valid !== \"boolean\")\n            return undefined;\n        else if (!valid)\n            return \"has-danger\";\n        else\n            return \"has-success\";\n    }\n\n    onChange(name, value) {\n        let template = this.state.template;\n        if (value && name === \"isAnswerable\")\n            value = 1;\n        if (!value && name === \"isAnswerable\")\n            value = 0;\n        if (value && name === \"isDecline\")\n            value = 1;\n        if (!value && name === \"isDecline\")\n            value = 0;\n        template[name] = value;\n        this.setState({template});\n    }\n\n    onChangeOnFormType(formType) {\n        this.setState({formType});\n    }\n\n    downloadParameters = () => {\n        requestK({\n            url: \"/formtemplate/parameters\",\n            method: \"post\",\n            data: this.state.includedParameters,\n            responseType: 'arraybuffer'\n        }).then(response => {\n            let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n            let urlCreator = window.URL || window.webkitURL;\n            let url = urlCreator.createObjectURL(blob);\n            let a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.style = \"display: none\";\n            a.href = url;\n            a.download = \"form-parameters.mdb\";\n            a.click();\n            this.setState({alert: null});\n        }).catch(error => {\n            showAxiosError(error)\n        });\n    };\n\n    render() {\n\n        return (\n            <div className=\"row baseBackground\">\n                <Nav className=\"topbar\" style={{paddingLeft: '14px', height: '53px'}}>\n                    <StickButton position=\"leftSide\" className=\"zocial GeriDon\" style={{fontSize: 'x-small'}}\n                                 label=\"Geri\" title=\"Önceki Sayfaya Git\"\n                                 onClick={() => this.props.history.push({pathname: `/${this.props.peykName}/formtemplate/`})}/>\n                    <StickButton position=\"leftSide\" className=\"zocial Kaydet\"\n                                 disabled={this.state.loading || !this.isValid().valid}\n                                 style={{fontSize: 'x-small', backgroundColor: 'forestgreen'}}\n                                 label=\"Formu Kaydet\" title=\"Formu Kaydet\" onClick={this.saveClicked}/>\n                </Nav>\n                <div className=\"col-sm-12 satirBasi\">\n                    <div className=\"card-header \">\n                        <h4 className=\"card-title\">Form Şablonu Yükle</h4>\n                    </div>\n                    {!this.state.loading && this.renderEditorComponent()}\n                    {\n                        this.state.loading &&\n                        <ReactLoading type=\"spinningBubbles\" style={{\n                            width: \"70px\",\n                            height: \"70px\",\n                            margin: \"20px auto 0 auto\",\n                            fill: \"#888\"\n                        }}/>\n                    }\n                </div>\n            </div>);\n    }\n\n    renderEditorComponent = () => {\n        return <div>\n            <CardBody row={\"true\"}>\n                <div className=\"FormRenk\" style={{marginBottom: '0px', left: '50px'}}>\n                    <Form>\n                        <Row>\n                            <Col sm={8}>\n                                <FormGroup className={this.editClassName(\"formType\")}>\n                                    <Label sm={2}>Form Türü</Label>\n                                    <Col sm={10}>\n                                        <AutoCompleteList name={\"Form Türü\"}\n                                                          useUpperCase={true} onlyLabel={false}\n                                                          list={this.state.formTypeList}\n                                                          value={this.state.formType}\n                                                          onChange={e => this.onChangeOnFormType(e)}\n                                                          updateList={e => this.setState({formTypeList: e})}\n                                                          placeholder={\"Form Türü Seçiniz veya Form Türü Adı Yazınız...\"}\n                                        />\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup className={this.editClassName(\"formName\")}>\n                                    <Label sm={2}>Form Adı</Label>\n                                    <Col sm={10}>\n                                        <Input type=\"text\" name=\"formName\" value={this.state.template.formName}\n                                               onChange={(e) => this.onChange(\"formName\", e.target.value)}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup className={this.editClassName(\"mimeBody\")}>\n                                    <Label sm={2}>İleti İçeriği</Label>\n                                    <Col sm={10}>\n                                        <Input type=\"textarea\" name=\"mimeBody\" rows={5}\n                                               value={this.state.template.mimeBody}\n                                               style={{\n                                                   height: '200px',\n                                                   border: '1px solid #E3E3E3',\n                                                   marginTop: '2px',\n                                                   padding: '3px 3px'\n                                               }}\n                                               onChange={(e) => this.onChange(\"mimeBody\", e.target.value)}/>\n                                    </Col>\n                                </FormGroup>\n                            </Col>\n                            <Col sm={4}>\n                                <FormGroup className={this.editClassName(\"isAnswerable\")}>\n                                    <Label sm={4}>Cevap Verilebilir</Label>\n                                    <Col sm={8}>\n                                        <Input type=\"checkbox\" name=\"isAnswerable\" style={{marginTop: '6px'}}\n                                               checked={this.state.template.isAnswerable || ''}\n                                               onChange={(e) => this.onChange(\"isAnswerable\", e.target.checked)}/>\n                                    </Col>\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                    </Form>\n                </div>\n            </CardBody>\n            <CardBody row={\"true\"}>\n                <div className=\"FormRenk\" style={{marginBottom: '20px', left: '50px'}}>\n                    {this.renderAllParameters()}\n                    <br/>\n                    {\n                        this.state.includedParameters.length === 0 &&\n                        <Dropzone\n                            accept=\".mdb\"\n                            className=\"FormRenk col-sm-12\"\n                            activeClassName=\"dropzoneActiveClass\"\n                            multiple={false}\n                            onDrop={this.onMdbDrop}>\n                            <div className=\"dropzoneInnerArea\">\n                                Varolan parametre dosyanızı aktarmak için (.mdb ) yükleyiniz.\n                            </div>\n                        </Dropzone>\n                    }\n                    {\n                        this.state.includedParameters.length > 0 ?\n                            this.renderIncludedParameters() :\n                            <ul>\n                                <li>\n                                    Formunuzu gönderim öncesi güncelleyebileceğiniz parametreleri ister listeden seçin;\n                                    ister seçim kısmına yazarak ekleyin.\n                                </li>\n                                <li>\n                                    Listede otomatik olarak değiştirilebilenler yer almaktadır.\n                                </li>\n                                <li>\n                                    Sizin ekledikleriniz ise üretim sırasında sizin tarafınızdan doldurulacaktır.\n                                </li>\n                                <li>\n                                    Firma için kullanıdığınız parametreleri <a href={\"#\"}\n                                                                               onClick={() => this.props.history.push({pathname: `/${this.props.peykName}/formparameter`})}>\n                                    Firma Parametreleri</a> menüsünden güncelleyebilirsiniz.\n                                </li>\n                            </ul>\n                    }\n                </div>\n            </CardBody>\n            <CardBody row={\"true\"} style={{marginTop: '-10px'}}>\n                <Row>\n                    <Col sm={12}>\n                        {this.renderDropzone()}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={12}>\n                        {this.state.preview && this.renderPreview()}\n                    </Col>\n                </Row>\n            </CardBody>\n        </div>\n    };\n\n    onMdbDrop = (acceptedFiles) => {\n        this.setState({loading: true});\n        let formData = new FormData();\n        formData.append(\"file\", acceptedFiles[0]);\n        requestK({\n            url: `/formtemplate/importParameters`,\n            method: \"post\",\n            data: formData\n        }).then((response) => {\n            this.setState({includedParameters: response.data, loading: false});\n        }).catch(error => {\n            showAxiosError(error);\n        });\n\n    };\n\n    renderAllParameters = () => {\n        return (\n            <AutoCompleteList name={\"Form parametresi\"}\n                              useUpperCase={false}\n                              onlyLabel={false}\n                              list={this.state.parameters}\n                              value={null}\n                              onChange={e => this.handleIncludeParameter(e.label)}\n                              updateList={list => {\n                                  list.filter(key => !this.state.parameters.includes(key)).map(value => this.handleIncludeParameter(value));\n                              }}\n                              placeholder={\"Form parametresi Seçiniz veya Form parametresi Adı Yazınız...\"}\n            />\n        );\n    };\n\n    handleIncludeParameter = (e) => {\n        let removed = this.state.parameters.filter(p => p.label !== e);\n        this.setState(prevState => ({\n            parameters: removed,\n            includedParameters: [...prevState.includedParameters, e]\n        }))\n    };\n\n    renderIncludedParameters = () => {\n        return (\n            <div>\n                <div className={\"FormRenk\"}>\n                    <h4 className=\"card-title\">Form Parametreleri</h4>\n                    <div>\n                        <p><label style={{backgroundColor: 'orange'}}>İç Parametreler</label> PEYK tarafından bilinen\n                            otomatik olarak eklenecek olan\n                            parametrelerdir.(Firma parametreleri dahildir.)</p>\n                        <p><label style={{backgroundColor: 'grey'}}>Dis Parametreler</label> Form oluşturulması\n                            sırasında kullanıcı tarafından eklenecek\n                            parametreler.</p>\n                    </div>\n                    {\n                        this.state.includedParameters.map((parameter, index) => {\n                            return (\n                                <button key={index} className={'included-params'} type=\"button\"\n                                        style={{backgroundColor: this.isInternal(parameter) ? 'orange' : 'grey'}}\n                                        onClick={() => this.handleExcludeParameter(parameter)}>\n                                    <label>{parameter}</label>\n                                </button>\n                            );\n                        })\n                    }\n                </div>\n                <StickButton position=\"leftSide\" className=\"zocial Download\" disabled={this.state.loading}\n                             style={{fontSize: 'x-small'}}\n                             label=\"Parametreleri İndir\" title=\"Parametreler\" onClick={this.downloadParameters}\n                />\n            </div>\n        );\n    };\n\n    isInternal = (parameter) => {\n        return this.state.internalParameters.map(param => param.value).includes(parameter);\n    };\n\n    handleExcludeParameter = (e) => {\n        let removed = this.state.includedParameters.filter(p => p !== e);\n        this.setState(prevState => ({\n            parameters: [...prevState.parameters, {label: e, value: e}],\n            includedParameters: removed\n        }))\n    };\n\n    renderDropzone = () => {\n        if (this.state.file !== null) {\n            return (\n                <div className=\"FormRenk\" style={{marginBottom: '0px', left: '50px', padding: ' 15px 15px 30px 30px'}}>\n                    <div>\n                        <Label className=\"label\" style={{padding: ' 0 0 0 10px'}}>{this.state.file.name}</Label>\n                        <button type=\"button\"\n                                onClick={() => {\n                                    this.setState({file: null, preview: null});\n                                    if (this.state.template.id) {\n                                        let originalContent;\n                                        if (this.state.template.formContent) {\n                                            originalContent = this.state.template.formContent;\n                                            let encoded = new TextEncoder().encode(this.state.template.formContent);\n                                            let chunkSize = 1024;\n                                            let binaryString = \"\";\n                                            for (let i = 0; i < encoded.length; i += chunkSize) {\n                                                binaryString += String.fromCharCode.apply(null, encoded.slice(i, i + chunkSize));\n                                            }\n                                            this.state.template.formContent = btoa(binaryString);\n                                        }\n                                        requestK({\n                                            url: `/formtemplate/previewTemplateContent`,\n                                            responseType: 'arraybuffer',\n                                            method: \"post\",\n                                            data: this.state.template.id\n                                        }).then(response => {\n                                            let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n                                            let base64Data = \"\";\n                                            if (blob !== undefined) {\n                                                let reader = new FileReader();\n                                                reader.readAsDataURL(blob);\n                                                reader.onloadend = function () {\n                                                    base64Data = reader.result;\n                                                }\n                                            }\n                                            this.setState({\n                                                preview: base64Data,\n                                                loading: false,\n                                            });\n                                        }).catch(error => {\n                                            showAxiosError(error);\n                                        }).finally(function () {\n                                            if (originalContent !== undefined) {\n                                                this.state.template.formContent = originalContent;\n                                            }\n                                        });\n                                    }\n                                }}\n                                data-toggle=\"tooltip\"\n                                data-placement=\"bottom\"\n                                title=\"Sil\"\n                                rel=\"tooltip\"\n                                className=\"Btn btn-icon remove-btn\">\n                            <i className=\"BtnIcon fa fa-remove remove-btn\"/>\n                        </button>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <Dropzone\n                    accept=\".doc,.docx\"\n                    className=\"FormRenk col-sm-12\"\n                    activeClassName=\"dropzoneActiveClass\"\n                    style={{}}\n                    multiple={false}\n                    onDrop={this.onDrop}>\n                    <div className=\"dropzoneInnerArea\">\n                        {!this.state.template.id && \"Form Şablon dosyasını (.docx ) yükleyiniz.\"}\n                        {this.state.template.id && \"Form Şablon dosyasını değiştirmek (.docx ) yükleyiniz. Yoksa mevcut dosyanız duracaktır.\"}\n                    </div>\n                </Dropzone>\n            );\n        }\n    };\n\n    renderPreview = () => {\n        return (\n            <div className=\"col-sm-12\" style={{marginTop: \"10px\", marginBottom: \"10px\", top: 0, left: 0}}>\n                <PdfComponent url={this.state.preview}/>\n            </div>\n        );\n    };\n\n}\n\nexport default FormTemplateImportPage;"],"sourceRoot":""}