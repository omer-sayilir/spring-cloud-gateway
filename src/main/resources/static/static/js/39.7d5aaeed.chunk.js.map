{"version":3,"sources":["accounting/kepik/authorization/GrantSelectionTree.jsx","accounting/kepik/authorization/RoleDefinition.js"],"names":["GrantSelectionTree","Component","constructor","props","super","onExpand","expandedKeys","this","setState","onCheck","checkedKeys","info","selectedGrands","checkedNodes","map","grandForm","grant","push","children","form","selectedChecks","state","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","disabledTree","treeRef","React","createRef","setCheckedBoxes","list","checkedList","treeList","treeData","a","b","id","key","c","d","e","getAllKeys","g","undefined","expandTree","allKeys","collapseTree","render","createElement","style","margin","Tree","className","showLine","checkable","selectable","disabled","RoleDefinition","arrangeDataSet","role","dataSet","sheetName","roleName","uuid","create_UUID","type","content","loading","total","page","manual","size","searchQuery","searching","selectedRole","selectedRowNum","displayCreateRoleDialog","displayUpdateRoleDialog","displayGrantSelectionDialog","disabledRoleDeleteBtn","newRole","defaultPersonalRole","grants","grantsLoading","approveAlert","fetchData","bind","handleSearch","onClickRole","saveRoleClicked","updateRoleClicked","editClicked","editHandleInputChange","deleteRole","getGrants","saveRoleGrantsClicked","expand","collapse","deleteRoleControl","saveRoleGrantsControl","editHandleCheckBoxChange","handleDelete","onChangeDefaultPersonalStatus","isExistDefaultPersonalRole","getAssignedPersonalListForRole","child","componentDidMount","params","url","method","data","payload","requestK","then","Alert","success","position","effect","timeout","catch","error","showAxiosError","name","value","self","response","Swal","title","text","confirmButtonText","Object","assign","saveDefaultPersonalRole","item","disabledRoleSaveBtn","current","target","checked","SweetAlert","showCancel","warning","confirmBtnText","cancelBtnText","confirmBtnBsStyle","cancelBtnBsStyle","onConfirm","onCancel","event","definedBySystem","Set","accessor","direction","row","sortStr","totalElements","rowNum","renderCreate","Modal","isOpen","toggle","ModalHeader","ModalBody","Notify","ref","notify","Form","FormGroup","Label","sm","for","Col","Input","onChange","ModalFooter","Button","paddingLeft","width","color","onClick","renderUpdate","renderGrants","padding","textAlign","fontWeight","height","overflow","selectedData","ReactLoading","fill","columns","Header","Cell","sortable","i","MiniButton","faIcon","Nav","NavBarKS","offsetWidth","innerWidth","window","btnDisabled","checkGrantToDisplay","ROLE_DEFINITIONS","StickButton","fontSize","label","DetailedSearch","fields","operator","onSearch","Table","options"],"mappings":"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","file":"static/js/39.7d5aaeed.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Tree from \"rc-tree\";\n\nclass GrantSelectionTree extends Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultExpandedKeys: [],\n      defaultSelectedKeys: [],\n      defaultCheckedKeys: [],\n      selectedGrands: [],\n      selectedChecks: [],\n      expandedKeys: [],\n      disabledTree: true\n    };\n    this.treeRef = React.createRef();\n  }\n\n  setCheckedBoxes(list) {\n    let checkedList = [];\n    let treeList = this.props.treeData;\n    treeList.map((a) => {\n      list.map((b) => {\n        if (a.grant != null && a.grant.id === b.id) {\n          checkedList.push(a.key)\n        }\n      })\n    });\n    treeList.map((a) => {\n      a.children.map((b) => {\n        if (b.grant != null) {\n          list.map((c) => {\n            if (b.grant.id === c.id) {\n              checkedList.push(b.key)\n            }\n          })\n        }\n      })\n    });\n    treeList.map((a) => {\n      a.children.map((b) => {\n        b.children.map((c) => {\n          list.map((d) => {\n            if (c.grant.id === d.id) {\n              checkedList.push(c.key)\n            }\n          })\n        })\n      })\n    });\n    treeList.map((a) => {\n      a.children.map((b) => {\n        b.children.map((c) => {\n          c.children.map((d) => {\n            list.map((e) => {\n              if (d.grant.id === e.id) {\n                checkedList.push(d.key)\n              }\n            })\n\n          })\n        })\n      })\n    });\n    /* let i;\n     let j;\n     for (i = 0; i < treeList.length; i++) {\n       for (j = 0; j <list.length; j++) {\n         if(treeList[i].grant!==null){\n           if(treeList[i].grant.id===list[j].id){\n             checkedList.push(treeList[i].key);\n           }\n\n         }\n         if(treeList[i].children!=undefined){\n           this.setState({selectedChecks:checkedList});\n           this.setCheckedBoxes(treeList[i].children,list);\n         }\n       }\n     }*/\n\n    this.setState({selectedChecks: checkedList});\n  }\n\n  getAllKeys(treeData, expandedKeys) {\n    treeData.map((g) => {\n      expandedKeys.push(g.key);\n      if (g.children != undefined) {\n        this.getAllKeys(g.children, expandedKeys)\n      }\n    })\n    return expandedKeys;\n  }\n\n  expandTree() {\n    let allKeys = this.getAllKeys(this.props.treeData, []);\n    this.setState({expandedKeys: allKeys});\n  }\n\n  collapseTree() {\n    this.setState({expandedKeys: []});\n  }\n\n  onExpand = expandedKeys => {\n    this.setState({expandedKeys: expandedKeys})\n  };\n\n  onCheck = (checkedKeys, info) => {\n    let self = this\n    let selectedGrands = [];\n    info.checkedNodes.map((grandForm) => {\n      if (grandForm.props.grant != null) {\n        selectedGrands.push(grandForm.props.grant)\n      }\n      ;\n      grandForm.props.children.map((form) => {\n        if (form.props.grant != null) {\n          selectedGrands.push(form.props.grant)\n        }\n      })\n    });\n    self.setState({selectedChecks: checkedKeys, selectedGrands: selectedGrands});\n  };\n\n  render() {\n    return (\n      <div style={{margin: '0 20px'}}>\n        <Tree\n          className=\"myCls\"\n          showLine\n          checkable\n          selectable={false}\n          onExpand={this.onExpand}\n          expandedKeys={this.state.expandedKeys}\n          checkedKeys={this.state.selectedChecks}\n          defaultSelectedKeys={this.state.defaultSelectedKeys}\n          defaultCheckedKeys={this.state.defaultCheckedKeys}\n          onCheck={this.onCheck}\n          treeData={this.props.treeData}\n          disabled={this.state.disabledTree}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GrantSelectionTree;\n\n","import React, {Component} from \"react\";\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Nav} from 'reactstrap';\nimport Table from \"../../../components/Table/Table\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport DetailedSearch from \"../../../components/DetailedSearch/DetailedSearch\";\nimport Swal from \"sweetalert2\";\nimport GrantSelectionTree from \"./GrantSelectionTree\";\nimport ReactLoading from \"react-loading\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport {checkGrantToDisplay, create_UUID, showAxiosError} from \"../../../helper/helper\";\nimport MiniButton from \"../../../components/MiniButton\";\nimport Alert from \"react-s-alert\";\nimport NavBarKS from \"../../../components/NavBarKS\";\nimport {ROLE_DEFINITIONS} from \"../../../common/authorities/GrantDef\";\nimport StickButton from \"../../../components/StickButton\";\nimport Notify from \"react-notification-alert\";\n\n\nclass RoleDefinition extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: [],\n            loading: false,\n            total: 0,\n            page: 0,\n            manual: false,\n            size: 10,\n            searchQuery: undefined,\n            searching: false,\n            selectedRole: undefined,\n            selectedRowNum: -1,\n            displayCreateRoleDialog: false,\n            displayUpdateRoleDialog: false,\n            displayGrantSelectionDialog: false,\n            disabledRoleDeleteBtn: false,\n            newRole: {\n                id: null,\n                defaultPersonalRole: false,\n                roleName: \"\"\n            },\n            grants: [],\n            grantsLoading: false,\n            approveAlert: null\n        };\n        this.fetchData = this.fetchData.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.onClickRole = this.onClickRole.bind(this);\n        this.saveRoleClicked = this.saveRoleClicked.bind(this);\n        this.updateRoleClicked = this.updateRoleClicked.bind(this);\n        this.editClicked = this.editClicked.bind(this);\n        this.editHandleInputChange = this.editHandleInputChange.bind(this);\n        this.deleteRole = this.deleteRole.bind(this);\n        this.getGrants = this.getGrants.bind(this);\n        this.saveRoleGrantsClicked = this.saveRoleGrantsClicked.bind(this);\n        this.expand = this.expand.bind(this);\n        this.collapse = this.collapse.bind(this);\n        this.deleteRoleControl = this.deleteRoleControl.bind(this);\n        this.saveRoleGrantsControl = this.saveRoleGrantsControl.bind(this);\n        this.editHandleCheckBoxChange = this.editHandleCheckBoxChange.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.onChangeDefaultPersonalStatus = this.onChangeDefaultPersonalStatus.bind(this);\n        this.isExistDefaultPersonalRole = this.isExistDefaultPersonalRole.bind(this);\n        this.getAssignedPersonalListForRole = this.getAssignedPersonalListForRole.bind(this);\n        this.child = React.createRef();\n    }\n\n    componentDidMount() {\n        this.getGrants();\n    }\n\n    arrangeDataSet = (role) => {\n        let dataSet = {};\n        dataSet.sheetName = role.roleName + \"_Rolüne_Atananların_Listesi\"\n        dataSet.uuid = create_UUID();\n        dataSet.type = \"excel\";\n        return dataSet;\n    }\n\n    getAssignedPersonalListForRole(role) {\n        let self = this;\n        let payload = self.arrangeDataSet(role);\n        let params = {\n            url: `/role/assignedPersonalListForRole`,\n            method: \"post\",\n            data: {role: role, payload: payload}\n        };\n        requestK(params)\n            .then(function () {\n                Alert.success(\"İndirme talebiniz işleme alındı. 'Bekleyen İndirmeler'den' takip edebilirsiniz.\", {\n                    position: 'top-right',\n                    effect: 'stackslide',\n                    timeout: 8000\n                });\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    }\n\n    isExistDefaultPersonalRole(name, value) {\n        let self = this;\n        let params = {\n            url: `/role/isExistDefaultPersonalRole`,\n            method: \"post\"\n        };\n        requestK(params)\n            .then(function (response) {\n                if (response.data) {\n                    Swal({\n                        title: 'Uyarı ! ',\n                        text: (\"Başka bir role Varsayılan Personel Rolü tanımlanmıştır.\"),\n                        confirmButtonText: 'Tamam'\n                    }).then(() => {\n                        //self.fetchData();\n                    });\n                    let newRole = Object.assign({}, self.state.newRole);\n                    newRole[name] = !value;\n                    self.setState({newRole});\n                } else {\n                    let newRole = Object.assign({}, self.state.newRole);\n                    newRole[name] = value;\n                    self.setState({newRole});\n                }\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    }\n\n    saveDefaultPersonalRole(item) {\n        let self = this;\n        let params = {\n            url: `/role/createDefaultPersonelRole`,\n            method: \"post\",\n            data: item\n        };\n        self.setState({disabledRoleSaveBtn: true});\n        requestK(params)\n            .then(function (response) {\n                self.setState({disabledRoleSaveBtn: false, approveAlert: null});\n                if (response.data === false) {\n                    item.defaultPersonalRole = false;\n                    self.setState({disabledRoleSaveBtn: false, approveAlert: null, selectedRole: item});\n                    Swal({\n                        title: 'Uyarı ! ',\n                        text: (\"Başka bir role Varsayılan Personel Rolü tanımlanmıştır.\"),\n                        confirmButtonText: 'Tamam'\n                    }).then(() => {\n                        //self.fetchData();\n                    });\n                } else {\n                    Swal({\n                        title: 'Başarılı ! ',\n                        text: (\"Kaydetme işlemi başarıyla gerçekleştirildi.\"),\n                        type: 'success',\n                        confirmButtonText: 'Tamam'\n                    }).then(() => {\n                        //self.fetchData();\n                    });\n                }\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    }\n\n    expand() {\n        this.child.current.expandTree();\n    }\n\n    onChangeDefaultPersonalStatus(e, item) {\n        let self = this;\n        let value = e.target.checked;\n        item.defaultPersonalRole = value;\n        self.setState({\n            selectedRole: item,\n            approveAlert: (\n                <SweetAlert showCancel warning\n                            confirmBtnText=\"Evet\"\n                            cancelBtnText=\"Hayır\"\n                            confirmBtnBsStyle=\"danger\"\n                            cancelBtnBsStyle=\"default\"\n                            title=\"\"\n                            onConfirm={() => self.saveDefaultPersonalRole(item)}\n                            onCancel={() => {\n                                item.defaultPersonalRole = !value;\n                                self.setState({selectedRole: item, approveAlert: null});\n                            }}>\n                    {value ? \"Bu rolü Varsayılan Personel Rolü olarak kaydedilmesini  onaylıyor musunuz?\" : \"Bu rolden Varsayılan Personel Rolü yetkisi kaldırılacaktır.\"}\n                </SweetAlert>\n            )\n        });\n    }\n\n    collapse() {\n        this.child.current.collapseTree();\n    }\n\n    handleDelete(item) {\n        let self = this;\n        self.deleteRoleControl(item);\n    }\n\n    getGrants() {\n        let self = this;\n        let params = {\n            url: '/role/getGrants',\n            method: \"get\"\n        };\n        self.setState({grantsLoading: true});\n        requestK(params)\n            .then(function (response) {\n                if (response.data) {\n                    self.setState({grantsLoading: false, grants: response.data});\n                }\n            }).catch(function (error) {\n            self.setState({grantsLoading: false});\n            showAxiosError(error);\n        });\n    }\n\n    editHandleInputChange(event) {\n        let self = this;\n        const target = event.target;\n        let value = target.value;\n        let name = target.name;\n        let newRole = Object.assign({}, this.state.newRole);\n        newRole[name] = value;\n        self.setState({newRole});\n    }\n\n    editHandleCheckBoxChange(event) {\n        const target = event.target;\n        let value = target.checked;\n        let name = target.name;\n        this.isExistDefaultPersonalRole(name, value);\n    }\n\n    deleteRoleControl(item) {\n        if (!item) {\n            Swal({\n                title: 'Uyarı ! ',\n                text: (\"Silmek için bir rol seçiniz.\"),\n                type: 'warn',\n                confirmButtonText: 'Tamam'\n            }).then(() => {\n                //self.fetchData();\n            });\n            return;\n        }\n        if (item && item.definedBySystem) {\n            Swal({\n                title: 'Uyarı ! ',\n                text: (\"Sistem tarafından tanımlanan rolleri silemezsiniz!\"),\n                type: 'warn',\n                confirmButtonText: 'Tamam'\n            }).then(() => {\n                //self.fetchData();\n            });\n            return;\n        }\n        this.setState({\n            approveAlert: (\n                <SweetAlert showCancel warning\n                            confirmBtnText=\"Evet\"\n                            cancelBtnText=\"Hayır\"\n                            confirmBtnBsStyle=\"danger\"\n                            cancelBtnBsStyle=\"default\"\n                            title=\"\"\n                            onConfirm={() => this.deleteRole(item)}\n                            onCancel={() => this.setState({approveAlert: null})}>\n                    {item.roleName + \" isimli rolü silmek istiyor musunuz?\"}\n                </SweetAlert>\n            )\n        });\n    }\n\n    deleteRole(item) {\n        let self = this\n        let searchQuery = !self.state.searchQuery ? '' : '&' + self.state.searchQuery;\n        let params = {\n            url: '/role/deleteRole?page=' + this.state.page + '&size=' + this.state.size + searchQuery,\n            method: \"post\",\n            data: item\n        };\n        self.setState({approveAlert: null, loading: true, disabledRoleDeleteBtn: true});\n        requestK(params)\n            .then(function (response) {\n                if (response.data) {\n                    self.setState({\n                        selectedRole: undefined,\n                        selectedRowNum: -1,\n                        content: response.data.content,\n                        loading: false,\n                        disabledRoleDeleteBtn: false\n                    });\n                    Swal({\n                        title: 'Başarılı ! ',\n                        text: (\"Silme işlemi başarıyla gerçekleştirildi.\"),\n                        type: 'success',\n                        confirmButtonText: 'Tamam'\n                    }).then(() => {\n                        self.fetchData();\n                    });\n\n                }\n            }).catch(function (error) {\n            self.setState({loading: false, disabledRoleDeleteBtn: false});\n            showAxiosError(error);\n        });\n    }\n\n    saveRoleGrantsControl() {\n        this.setState({\n            approveAlert: (\n                <SweetAlert showCancel warning\n                            confirmBtnText=\"Evet\"\n                            cancelBtnText=\"Hayır\"\n                            confirmBtnBsStyle=\"danger\"\n                            cancelBtnBsStyle=\"default\"\n                            title=\"\"\n                            onConfirm={() => this.saveRoleGrantsClicked()}\n                            onCancel={() => this.setState({approveAlert: null})}>\n                    {this.state.selectedRole.roleName + \" rolüne ait yekileri kaydetmek istiyor musunuz?\"}\n                </SweetAlert>\n            )\n        });\n    }\n\n    saveRoleGrantsClicked() {\n        let self = this\n        let role = self.state.selectedRole;\n        // [...new Set(self.child.current.state.selectedGrands)];\n        role.grants = [...new Set(self.child.current.state.selectedGrands)];\n        self.setState({approveAlert: null, selectedRole: role, grantsLoading: true});\n        self.child.current.setState({disabledTree: true});\n        let params = {\n            url: `/role/saveRoleGrants`,\n            method: \"post\",\n            data: self.state.selectedRole\n        };\n        requestK(params)\n            .then(function (response) {\n                self.setState({grantsLoading: false});\n                self.child.current.setCheckedBoxes(response.data.grants);\n                self.child.current.setState({disabledTree: false});\n                Swal({\n                    title: 'Başarılı ! ',\n                    text: (\"Role ait yetkiler başarılı birşekilde kaydedildi!\"),\n                    type: 'success',\n                    confirmButtonText: 'Tamam'\n                }).then(() => {\n                    self.setState({displayGrantSelectionDialog: false});\n                    self.fetchData(self.state.accessor, self.state.direction, 0, self.state.size);\n                });\n            }).catch(function (error) {\n            self.setState({grantsLoading: false});\n            self.child.current.setState({disabledTree: false});\n            showAxiosError(error);\n        });\n    }\n\n    editClicked(row) {\n        let newRole = Object.assign({}, row);\n        this.setState({newRole, displayUpdateRoleDialog: true});\n    }\n\n    saveRoleClicked() {\n        let self = this\n        if (self.state.newRole.roleName === undefined || self.state.newRole.roleName === \"\") {\n            Swal({\n                title: 'Uyarı ! ',\n                text: (\"Lütfen bir rol adı giriniz!\"),\n                type: 'warn',\n                confirmButtonText: 'Tamam'\n            }).then(() => {\n                //self.fetchData();\n            });\n            return;\n        }\n        let newRole = this.state.newRole;\n        newRole.defaultPersonalRole = self.state.newRole.defaultPersonalRole !== undefined ? self.state.newRole.defaultPersonalRole : false;\n        let params = {\n            url: `/role/createRole`,\n            method: \"post\",\n            data: self.state.newRole\n        };\n\n        self.setState({disabledRoleSaveBtn: true});\n        requestK(params)\n            .then(function () {\n                let newRole = {defaultPersonalRole: false, roleName: \"\"}\n                self.setState({disabledRoleSaveBtn: false, newRole, displayCreateRoleDialog: false});\n                Swal({\n                    title: 'Başarılı ! ',\n                    text: (\"Kaydetme işlemi başarıyla gerçekleştirildi.\"),\n                    type: 'success',\n                    confirmButtonText: 'Tamam'\n                }).then(() => {\n                    self.fetchData();\n                });\n            }).catch(function (error) {\n            self.setState({disabledRoleSaveBtn: false});\n            showAxiosError(error);\n        });\n    }\n\n    updateRoleClicked() {\n        let self = this\n        if (self.state.newRole.roleName === undefined || self.state.newRole.roleName === \"\") {\n            Swal({\n                title: 'Uyarı ! ',\n                text: (\"Lütfen bir rol adı giriniz!\"),\n                type: 'warn',\n                confirmButtonText: 'Tamam'\n            }).then(() => {\n                //self.fetchData();\n            });\n            return;\n        }\n        let newRole = this.state.newRole;\n        newRole.defaultPersonalRole = self.state.newRole.defaultPersonalRole !== undefined ? self.state.newRole.defaultPersonalRole : false;\n        let params = {\n            url: `/role/createRole`,\n            method: \"post\",\n            data: self.state.newRole\n        };\n\n        self.setState({disabledRoleSaveBtn: true});\n        requestK(params)\n            .then(function () {\n                let newRole = {defaultPersonalRole: false, roleName: \"\"}\n                self.setState({disabledRoleSaveBtn: false, newRole, displayUpdateRoleDialog: false});\n                Swal({\n                    title: 'Başarılı ! ',\n                    text: (\"Güncelleme işlemi başarıyla gerçekleştirildi.\"),\n                    type: 'success',\n                    confirmButtonText: 'Tamam'\n                }).then(() => {\n                    self.fetchData();\n                });\n            }).catch(function (error) {\n            self.setState({disabledRoleSaveBtn: false});\n            showAxiosError(error);\n        });\n    }\n\n    fetchData(accessor, direction, page, size) {\n        let self = this;\n        let sortStr = accessor !== undefined ? ('&sort=' + accessor + ',' + direction) : '&sort=id,desc';\n        let searchQuery = !self.state.searchQuery ? '' : '&' + self.state.searchQuery;\n        let params = {\n            url: '/role/getRoller?page=' + page + '&size=' + size + searchQuery + sortStr,\n            method: \"get\",\n        };\n        self.setState({loading: true, searching: true});\n        requestK(params)\n            .then(function (response) {\n                //checkGrantForFetchResponse(self, response.data);\n                if (response.data.content.size > 0) {\n                    self.setState({selectedRole: response.data.content[0], selectedRowNum: 1});\n                    this.child.current.setCheckedBoxes(response.data.content[0].grants);\n                }\n                self.setState({\n                    loading: false,\n                    content: response.data.content,\n                    page: page,\n                    size: size,\n                    total: response.data.totalElements,\n                    searching: false\n                });\n            }).catch(function (error) {\n\n            self.setState({loading: false, searching: false});\n            showAxiosError(error);\n        });\n    }\n\n    handleSearch(searchQuery) {\n        this.setState({\n            searchQuery,\n            searching: true\n        }, () => this.fetchData(this.state.accessor, this.state.direction, 0, this.state.size))\n    }\n\n    onClickRole(e, row, rowNum) {\n        this.setState({selectedRole: row, selectedRowNum: rowNum});\n        this.child.current.setState({\n            selectedChecks: [],\n            selectedGrands: row.grants,\n            disabledTree: row.definedBySystem\n        });\n        this.child.current.setCheckedBoxes(row.grants);\n    }\n\n    renderCreate() {\n        return <Modal isOpen={this.state.displayCreateRoleDialog} size=\"md\"\n                      toggle={() => this.setState({displayCreateRoleDialog: false})}>\n            <ModalHeader className=\"justify-content-center\"\n                         toggle={() => this.setState({displayCreateRoleDialog: false})}> Rol Tanımlama\n            </ModalHeader>\n            <ModalBody>\n                {this.state.displayCreateRoleDialog && <Notify ref={this.notify}/>}\n                <div>\n                    <Form>\n                        <FormGroup row>\n                            <Label sm={4} for=\"roleName\">Rol Adı: *</Label>\n                            <Col sm={8}>\n                                <Input type=\"text\" name=\"roleName\"\n                                       value={this.state.newRole !== null ? this.state.newRole.roleName : \"\"}\n                                       onChange={this.editHandleInputChange}/>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                </div>\n            </ModalBody>\n            <ModalFooter>\n                <Button title=\"İptal\" style={{paddingLeft: '16px', width: '100px'}} color=\"secondary\"\n                        onClick={() => this.setState({displayCreateRoleDialog: false})}>\n                    İptal\n                </Button>\n                <Button title=\"Kaydet\" style={{paddingLeft: '16px', width: '100px'}} color=\"primary\"\n                        disabled={this.state.disabledRoleSaveBtn}\n                        onClick={this.saveRoleClicked}>\n                    Kaydet\n                </Button>\n            </ModalFooter>\n        </Modal>\n    }\n\n    renderUpdate() {\n        return <Modal isOpen={this.state.displayUpdateRoleDialog} size=\"md\"\n                      toggle={() => this.setState({displayUpdateRoleDialog: false})}>\n            <ModalHeader className=\"justify-content-center\"\n                         toggle={() => this.setState({displayUpdateRoleDialog: false})}> Rol Düzenleme\n            </ModalHeader>\n            <ModalBody>\n                {this.state.displayUpdateRoleDialog && <Notify ref={this.notify}/>}\n                <div>\n                    <Form>\n                        <FormGroup row>\n                            <Label sm={4} for=\"roleName\">Rol Adı: *</Label>\n                            <Col sm={8}>\n                                <Input type=\"text\" name=\"roleName\"\n                                       value={this.state.newRole !== null ? this.state.newRole.roleName : \"\"}\n                                       onChange={this.editHandleInputChange}/>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                </div>\n            </ModalBody>\n            <ModalFooter>\n                <Button title=\"İptal\" style={{paddingLeft: '16px', width: '100px'}} color=\"secondary\"\n                        onClick={() => this.setState({displayUpdateRoleDialog: false})}>\n                    İptal\n                </Button>\n                <Button title=\"Kaydet\" style={{paddingLeft: '16px', width: '100px'}} color=\"primary\"\n                        disabled={this.state.disabledRoleSaveBtn}\n                        onClick={this.updateRoleClicked}>\n                    Kaydet\n                </Button>\n            </ModalFooter>\n        </Modal>\n    }\n\n    renderGrants() {\n        return <Modal isOpen={this.state.displayGrantSelectionDialog} size=\"lg\"\n                      toggle={() => this.setState({displayGrantSelectionDialog: false})}>\n            <ModalHeader className=\"justify-content-center\"\n                         toggle={() => this.setState({displayGrantSelectionDialog: false})}> Yetki Tanımlama\n            </ModalHeader>\n            <ModalBody>\n                {this.state.displayGrantSelectionDialog && <Notify ref={this.notify}/>}\n                <div>\n                    <Col sm='12' style={{padding: 0}}>\n                        <label style={{textAlign: 'center', fontWeight: 'bold'}}>Seçilen Rol\n                            :{this.state.selectedRole !== undefined ? \" \" + this.state.selectedRole.roleName : \" \"}</label>\n                    </Col>\n                    <Col sm='12' style={{height: '60vh', overflow: 'auto'}}>\n\n                        <GrantSelectionTree treeData={this.state.grants} ref={this.child}\n                                            selectedData={this.state.selectedData}\n                                            selectedRole={this.state.selectedRole}/>\n                        {this.state.grantsLoading && <ReactLoading type=\"spinningBubbles\" style={{\n                            width: \"70px\",\n                            height: \"70px\",\n                            margin: \"20px auto 0 auto\",\n                            fill: \"#888\"\n                        }}/>}\n                    </Col>\n                </div>\n            </ModalBody>\n            <ModalFooter>\n                <Button title=\"İptal\" style={{paddingLeft: '16px', width: '100px'}} color=\"secondary\"\n                        onClick={() => this.setState({displayGrantSelectionDialog: false})}>\n                    İptal\n                </Button>\n                <Button title=\"Kaydet\" style={{paddingLeft: '16px', width: '100px'}} color=\"primary\"\n                        disabled={this.state.selectedRole !== undefined ? this.state.selectedRole.definedBySystem : false}\n                        onClick={this.saveRoleGrantsControl}>\n                    Kaydet\n                </Button>\n            </ModalFooter>\n        </Modal>\n    }\n\n    render() {\n        const columns = [\n            {\n                Header: \"Rol Adı\",\n                accessor: \"roleName\",\n                width: \"65%\"\n            },\n            {\n                Header: \"Sistem Tanımlı\",\n                accessor: \"isDefinedBySystem\",\n                Cell: (item) => (\n                    <div>\n                        <input type=\"checkbox\" checked={item.definedBySystem !== null ? item.definedBySystem : false}\n                               disabled=\"disabled\"/>\n                    </div>\n                ),\n                width: \"20%\"\n            },\n            {\n                Header: \"İşlemler\",\n                accessor: \"\",\n                sortable: false,\n                width: \"15%\",\n                Cell: (item, i) => (\n                    <div>\n                        <MiniButton title=\"Düzenle\" faIcon=\"fa-edit\"\n                                    disabled={item.definedBySystem}\n                                    onClick={() => {\n                                        this.editClicked(item)\n                                    }}\n                                    color=\"info\"/>\n                        <MiniButton title=\"Yetki ekle\" faIcon=\"fa-plus\"\n                                    onClick={(e) => {\n                                        this.setState({displayGrantSelectionDialog: true}, () => this.onClickRole(e, item, i));\n                                    }}\n                                    color=\"warning\"/>\n                        <MiniButton title=\"Sil\" faIcon=\"fa-trash\" color=\"danger\"\n                                    onClick={() => this.handleDelete(item, i)}\n                                    disabled={item.definedBySystem}/>\n                        <MiniButton title=\"Role Atananların Listesi\" faIcon=\"fa-file-excel-o\"\n                                    onClick={() => {\n                                        this.getAssignedPersonalListForRole(item);\n                                    }}\n                                    color=\"success\"/>\n                    </div>\n                )\n            }\n        ];\n\n        const fields = [\n            {\n                label: \"Role Adı\",\n                accessor: \"roleName\",\n                type: \"text\",\n                operator: \"=\",\n            }\n        ];\n\n        return (\n            <div className=\"row baseBackground\">\n                <Nav className=\"topbar\" style={{paddingLeft: '14px', height: '53px'}}>\n                    <NavBarKS offsetWidth={this.props.offsetWidth} innerWidth={window.innerWidth}\n                              btnDisabled={this.state.btnDisabled} name='roleDefinition'>\n                        {checkGrantToDisplay(this, ROLE_DEFINITIONS) &&\n                            <StickButton position=\"leftSide\" className=\"zocial Yeni\" style={{fontSize: 'x-small'}}\n                                         label=\"Rol Oluştur\" title=\"Yeni Rol Oluştur\"\n                                         onClick={() => this.setState({displayCreateRoleDialog: true})}/>}\n                    </NavBarKS>\n                </Nav>\n                <div className=\"col-sm-12 satirBasi\">\n                    <div className=\"card-header\">\n                        <h4 className=\"card-title\">Rol Listesi</h4>\n                    </div>\n                    <div className=\"card-body\">\n                        <DetailedSearch fields={fields}\n                                        loading={this.state.searching}\n                                        onSearch={this.handleSearch}/>\n                    </div>\n                    <div className=\"card-body\">\n                        <Table columns={columns}\n                               content={this.state.content}\n                               loading={this.state.loading}\n                               total={this.state.total}\n                               page={this.state.page}\n                               manual={this.state.manual}\n                               size={this.state.size}\n                               options={[\"5\", \"10\", \"20\", \"50\", \"100\"]}\n                               fetchData={this.fetchData}\n                        />\n                    </div>\n                </div>\n                {this.state.approveAlert}\n                {this.renderCreate()}\n                {this.renderUpdate()}\n                {this.renderGrants()}\n                {!this.state.displayCreateRoleDialog && <Notify ref={this.notify}/>}\n            </div>\n        );\n    }\n}\n\nexport default RoleDefinition;\n"],"sourceRoot":""}