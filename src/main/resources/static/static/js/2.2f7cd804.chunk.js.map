{"version":3,"sources":["../node_modules/decimal.js/decimal.js"],"names":["globalScope","Decimal","inexact","quadrant","EXP_LIMIT","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","invalidArgument","decimalError","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LN10_PRECISION","length","PI_PRECISION","P","toStringTag","digitsToString","d","i","k","ws","indexOfLastWord","str","w","getZeroString","checkInt32","min","max","Error","checkRoundingDigits","rm","repeating","di","r","rd","ceil","convertBase","baseIn","baseOut","j","arrL","arr","strL","indexOf","charAt","reverse","absoluteValue","abs","x","this","constructor","s","finalise","e","clampedTo","clamp","Ctor","NaN","gt","cmp","comparedTo","y","xdL","ydL","xd","yd","xs","ys","cosine","cos","pr","sd","len","isZero","tinyPow","toString","taylorSeries","times","cos2x","minus","plus","toLessThanHalfPi","neg","cubeRoot","cbrt","m","n","rep","t","t3","t3plusx","isFinite","toExponential","slice","divide","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","isNeg","getPi","atan","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","asin","halfPi","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","naturalLogarithm","getLn10","sub","xe","xLTy","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","getPrecision","round","sine","sin","sin2_x","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","guard","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","hypot","arguments","isDecimalInstance","log2","log10","random","Uint32Array","copy","clone","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hasOwnProperty"],"mappings":"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","file":"static/js/2.2f7cd804.chunk.js","sourcesContent":[";\n(function (globalScope) {\n  'use strict';\n\n  /*!\r\n   *  decimal.js v10.5.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\n\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n  // The maximum exponent magnitude.\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n  var EXP_LIMIT = 9e15,\n    // 0 to 9e15\n\n    // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n    MAX_DIGITS = 1e9,\n    // 0 to 1e9\n\n    // Base conversion alphabet.\n    NUMERALS = '0123456789abcdef',\n    // The natural logarithm of 10 (1025 digits).\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n    // Pi (1025 digits).\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n    // The initial configuration properties of the Decimal constructor.\n    DEFAULTS = {\n      // These values must be integers within the stated ranges (inclusive).\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\n\n      // The maximum number of significant digits of the result of a calculation or base conversion.\n      // E.g. `Decimal.config({ precision: 20 });`\n      precision: 20,\n      // 1 to MAX_DIGITS\n\n      // The rounding mode used when rounding to `precision`.\n      //\n      // ROUND_UP         0 Away from zero.\n      // ROUND_DOWN       1 Towards zero.\n      // ROUND_CEIL       2 Towards +Infinity.\n      // ROUND_FLOOR      3 Towards -Infinity.\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      //\n      // E.g.\n      // `Decimal.rounding = 4;`\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n      rounding: 4,\n      // 0 to 8\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN  6 The IEEE 754 remainder function.\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n      //\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\n      // be used, but they may not give useful results.\n      modulo: 1,\n      // 0 to 9\n\n      // The exponent value at and beneath which `toString` returns exponential notation.\n      // JavaScript numbers: -7\n      toExpNeg: -7,\n      // 0 to -EXP_LIMIT\n\n      // The exponent value at and above which `toString` returns exponential notation.\n      // JavaScript numbers: 21\n      toExpPos: 21,\n      // 0 to EXP_LIMIT\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // JavaScript numbers: -324  (5e-324)\n      minE: -EXP_LIMIT,\n      // -1 to -EXP_LIMIT\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\n      maxE: EXP_LIMIT,\n      // 1 to EXP_LIMIT\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      crypto: false // true/false\n    },\n    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n    Decimal,\n    inexact,\n    noConflict,\n    quadrant,\n    external = true,\n    decimalError = '[DecimalError] ',\n    invalidArgument = decimalError + 'Invalid argument: ',\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n    cryptoUnavailable = decimalError + 'crypto unavailable',\n    tag = '[object Decimal]',\n    mathfloor = Math.floor,\n    mathpow = Math.pow,\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    LN10_PRECISION = LN10.length - 1,\n    PI_PRECISION = PI.length - 1,\n    // Decimal.prototype object\n    P = {\n      toStringTag: tag\n    };\n\n  // Decimal prototype methods\n\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\n  P.ceil = function () {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|bigint|Decimal}\r\n   * max {number|string|bigint|Decimal}\r\n   *\r\n   */\n  P.clampedTo = P.clamp = function (min, max) {\n    var k,\n      x = this,\n      Ctor = x.constructor;\n    min = new Ctor(min);\n    max = new Ctor(max);\n    if (!min.s || !max.s) return new Ctor(NaN);\n    if (min.gt(max)) throw Error(invalidArgument + max);\n    k = x.cmp(min);\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n  };\n\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\n  P.comparedTo = P.cmp = function (y) {\n    var i,\n      j,\n      xdL,\n      ydL,\n      x = this,\n      xd = x.d,\n      yd = (y = new x.constructor(y)).d,\n      xs = x.s,\n      ys = y.s;\n\n    // Either NaN or ±Infinity?\n    if (!xd || !yd) {\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n\n    // Either zero?\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n\n    // Signs differ?\n    if (xs !== ys) return xs;\n\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Compare digit by digit.\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\n  P.cosine = P.cos = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN);\n\n    // cos(0) = cos(-0) = 1\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n  };\n\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\n  P.cubeRoot = P.cbrt = function () {\n    var e,\n      m,\n      n,\n      r,\n      rep,\n      s,\n      sd,\n      t,\n      t3,\n      t3plusx,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n\n    // Initial estimate.\n    s = x.s * mathpow(x.s * x, 1 / 3);\n\n    // Math.cbrt underflow/overflow?\n    // Pass x to Math.pow as integer, then adjust the exponent of the result.\n    if (!s || Math.abs(s) == 1 / 0) {\n      n = digitsToString(x.d);\n      e = x.e;\n\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\n      if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';\n      s = mathpow(n, 1 / 3);\n\n      // Rarely, e may be one less than the result exponent value.\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n      r = new Ctor(n);\n      r.s = x.s;\n    } else {\n      r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n\n    // Halley's method.\n    // TODO? Compare Newton's method.\n    for (;;) {\n      t = r;\n      t3 = t.times(t).times(t);\n      t3plusx = t3.plus(x);\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n        // , i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n            if (t.times(t).times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).times(r).eq(x);\n          }\n          break;\n        }\n      }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\n  P.decimalPlaces = P.dp = function () {\n    var w,\n      d = this.d,\n      n = NaN;\n    if (d) {\n      w = d.length - 1;\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last word.\n      w = d[w];\n      if (w) for (; w % 10 == 0; w /= 10) n--;\n      if (n < 0) n = 0;\n    }\n    return n;\n  };\n\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.dividedToIntegerBy = P.divToInt = function (y) {\n    var x = this,\n      Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\n  P.equals = P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\n  P.floor = function () {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\n  P.hyperbolicCosine = P.cosh = function () {\n    var k,\n      n,\n      pr,\n      rm,\n      len,\n      x = this,\n      Ctor = x.constructor,\n      one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      n = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      n = '2.3283064365386962890625e-10';\n    }\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n\n    // Reverse argument reduction\n    var cosh2_x,\n      i = k,\n      d8 = new Ctor(8);\n    for (; i--;) {\n      cosh2_x = x.times(x);\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\n  P.hyperbolicSine = P.sinh = function () {\n    var k,\n      pr,\n      rm,\n      len,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    if (len < 3) {\n      x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n      // 3 multiplications and 1 addition\n\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n      // 4 multiplications and 2 additions\n\n      // Estimate the optimum number of times to use the argument reduction.\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n      x = x.times(1 / tinyPow(5, k));\n      x = taylorSeries(Ctor, 2, x, x, true);\n\n      // Reverse argument reduction\n      var sinh2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n      for (; k--;) {\n        sinh2_x = x.times(x);\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n      }\n    }\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\n  P.hyperbolicTangent = P.tanh = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\n  P.inverseCosine = P.acos = function () {\n    var x = this,\n      Ctor = x.constructor,\n      k = x.abs().cmp(1),\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n    if (k !== -1) {\n      return k === 0\n      // |x| is 1\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\n      // |x| > 1 or x is NaN\n      : new Ctor(NaN);\n    }\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n\n    // See https://github.com/MikeMcl/decimal.js/pull/217\n    x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\n  P.inverseHyperbolicCosine = P.acosh = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\n  P.inverseHyperbolicSine = P.asinh = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\n  P.inverseHyperbolicTangent = P.atanh = function () {\n    var pr,\n      rm,\n      wpr,\n      xsd,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\n  P.inverseSine = P.asin = function () {\n    var halfPi,\n      k,\n      pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (k !== -1) {\n      // |x| is 1\n      if (k === 0) {\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        halfPi.s = x.s;\n        return halfPi;\n      }\n\n      // |x| > 1 or x is NaN\n      return new Ctor(NaN);\n    }\n\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\n  P.inverseTangent = P.atan = function () {\n    var i,\n      j,\n      k,\n      n,\n      px,\n      t,\n      r,\n      wpr,\n      x2,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n    if (!x.isFinite()) {\n      if (!x.s) return new Ctor(NaN);\n      if (pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\n        r.s = x.s;\n        return r;\n      }\n    } else if (x.isZero()) {\n      return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\n      r.s = x.s;\n      return r;\n    }\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n    for (; i !== -1;) {\n      px = px.times(x2);\n      t = r.minus(px.div(n += 2));\n      px = px.times(x2);\n      r = t.plus(px.div(n += 2));\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n    }\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\n  P.isFinite = function () {\n    return !!this.d;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\n  P.isInteger = P.isInt = function () {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\n  P.isNaN = function () {\n    return !this.s;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\n  P.isNegative = P.isNeg = function () {\n    return this.s < 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\n  P.isPositive = P.isPos = function () {\n    return this.s > 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\n  P.isZero = function () {\n    return !!this.d && this.d[0] === 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|bigint|Decimal} The base of the logarithm.\r\n   *\r\n   */\n  P.logarithm = P.log = function (base) {\n    var isBase10,\n      d,\n      denominator,\n      k,\n      inf,\n      num,\n      sd,\n      r,\n      arg = this,\n      Ctor = arg.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding,\n      guard = 5;\n\n    // Default base is 10.\n    if (base == null) {\n      base = new Ctor(10);\n      isBase10 = true;\n    } else {\n      base = new Ctor(base);\n      d = base.d;\n\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n      isBase10 = base.eq(10);\n    }\n    d = arg.d;\n\n    // Is arg negative, non-finite, 0 or 1?\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n    if (isBase10) {\n      if (d.length > 1) {\n        inf = true;\n      } else {\n        for (k = d[0]; k % 10 === 0;) k /= 10;\n        inf = k !== 1;\n      }\n    }\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n\n    // The result will have 5 rounding digits.\n    r = divide(num, denominator, sd, 1);\n\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n      do {\n        sd += 10;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        r = divide(num, denominator, sd, 1);\n        if (!inf) {\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n          break;\n        }\n      } while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n    external = true;\n    return finalise(r, pr, rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, -1);\r\n  };\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 1);\r\n  };\r\n   */\n\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.minus = P.sub = function (y) {\n    var d,\n      e,\n      i,\n      j,\n      k,\n      len,\n      pr,\n      rm,\n      xd,\n      xe,\n      xLTy,\n      yd,\n      x = this,\n      Ctor = x.constructor;\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return y negated if x is finite and y is ±Infinity.\n      else if (x.d) y.s = -y.s;\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with different signs.\n      // Return NaN if both are ±Infinity with the same sign.\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n      return y;\n    }\n\n    // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.plus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n      // Return y negated if x is zero and y is non-zero.\n      if (yd[0]) y.s = -y.s;\n\n      // Return x if y is zero and x is non-zero.\n      else if (xd[0]) y = new Ctor(x);\n\n      // Return zero if both are zero.\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n      else return new Ctor(rm === 3 ? -0 : 0);\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e;\n\n    // If base 1e7 exponents differ...\n    if (k) {\n      xLTy = k < 0;\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      }\n\n      // Numbers with massively different exponents would result in a very high number of\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents.\n      d.reverse();\n      for (i = k; i--;) d.push(0);\n      d.reverse();\n\n      // Base 1e7 exponents equal.\n    } else {\n      // Check digits to determine which is the bigger number.\n\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n      k = 0;\n    }\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n    len = xd.length;\n\n    // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n    // Subtract yd from xd.\n    for (i = yd.length; i > k;) {\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n        --xd[j];\n        xd[i] += BASE;\n      }\n      xd[i] -= yd[i];\n    }\n\n    // Remove trailing zeros.\n    for (; xd[--len] === 0;) xd.pop();\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xd[0] === 0; xd.shift()) --e;\n\n    // Zero?\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\n  P.modulo = P.mod = function (y) {\n    var q,\n      x = this,\n      Ctor = x.constructor;\n    y = new Ctor(y);\n\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n\n    // Return x if y is ±Infinity or x is ±0.\n    if (!y.d || x.d && !x.d[0]) {\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n\n    // Prevent rounding of intermediate calculations.\n    external = false;\n    if (Ctor.modulo == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // result = x - q * y    where  0 <= result < abs(y)\n      q = divide(x, y.abs(), 0, 3, 1);\n      q.s *= y.s;\n    } else {\n      q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.naturalExponential = P.exp = function () {\n    return naturalExponential(this);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.naturalLogarithm = P.ln = function () {\n    return naturalLogarithm(this);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n  };\n\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.plus = P.add = function (y) {\n    var carry,\n      d,\n      e,\n      i,\n      k,\n      len,\n      pr,\n      rm,\n      xd,\n      yd,\n      x = this,\n      Ctor = x.constructor;\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with the same sign.\n      // Return NaN if both are ±Infinity with different signs.\n      // Return y if x is finite and y is ±Infinity.\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n      return y;\n    }\n\n    // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!yd[0]) y = new Ctor(x);\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e;\n\n    // If base 1e7 exponents differ...\n    if (i) {\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      }\n\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n      d.reverse();\n      for (; i--;) d.push(0);\n      d.reverse();\n    }\n    len = xd.length;\n    i = yd.length;\n\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    }\n\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    }\n\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\n  P.precision = P.sd = function (z) {\n    var k,\n      x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n    if (x.d) {\n      k = getPrecision(x.d);\n      if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n      k = NaN;\n    }\n    return k;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\n  P.round = function () {\n    var x = this,\n      Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\n  P.sine = P.sin = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\n  P.squareRoot = P.sqrt = function () {\n    var m,\n      n,\n      sd,\n      r,\n      rep,\n      t,\n      x = this,\n      d = x.d,\n      e = x.e,\n      s = x.s,\n      Ctor = x.constructor;\n\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !d || !d[0]) {\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n    external = false;\n\n    // Initial estimate.\n    s = Math.sqrt(+x);\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(d);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n\n    // Newton-Raphson iteration.\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n            if (t.times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).eq(x);\n          }\n          break;\n        }\n      }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\n  P.tangent = P.tan = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n  };\n\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.times = P.mul = function (y) {\n    var carry,\n      e,\n      i,\n      k,\n      r,\n      rL,\n      t,\n      xdL,\n      ydL,\n      x = this,\n      Ctor = x.constructor,\n      xd = x.d,\n      yd = (y = new Ctor(y)).d;\n    y.s *= x.s;\n\n    // If either is NaN, ±Infinity or ±0...\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\n\n      // Return NaN if either is NaN.\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n      ? NaN\n\n      // Return ±Infinity if either is ±Infinity.\n      // Return ±0 if either is ±0.\n      : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    }\n\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for (i = rL; i--;) r.push(0);\n\n    // Multiply!\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n      r[k] = (r[k] + carry) % BASE | 0;\n    }\n\n    // Remove trailing zeros.\n    for (; !r[--rL];) r.pop();\n    if (carry) ++e;else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toBinary = function (sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toExponential = function (dp, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n    if (dp === void 0) {\n      str = finiteToString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), dp + 1, rm);\n      str = finiteToString(x, true, dp + 1);\n    }\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\n  P.toFixed = function (dp, rm) {\n    var str,\n      y,\n      x = this,\n      Ctor = x.constructor;\n    if (dp === void 0) {\n      str = finiteToString(x);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\n      str = finiteToString(y, false, dp + y.e + 1);\n    }\n\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|bigint|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\n  P.toFraction = function (maxD) {\n    var d,\n      d0,\n      d1,\n      d2,\n      e,\n      k,\n      n,\n      n0,\n      n1,\n      pr,\n      q,\n      r,\n      x = this,\n      xd = x.d,\n      Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n    if (maxD == null) {\n      // d is 10**e, the minimum max-denominator needed.\n      maxD = e > 0 ? d : n1;\n    } else {\n      n = new Ctor(maxD);\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n      maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n    for (;;) {\n      q = divide(n, d, 0, 1, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.cmp(maxD) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      d2 = n1;\n      n1 = n0.plus(q.times(d2));\n      n0 = d2;\n      d2 = d;\n      d = n.minus(q.times(d2));\n      n = d2;\n    }\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toHexadecimal = P.toHex = function (sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n  };\n\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|bigint|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\n  P.toNearest = function (y, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    x = new Ctor(x);\n    if (y == null) {\n      // If x is not finite, return x.\n      if (!x.d) return x;\n      y = new Ctor(1);\n      rm = Ctor.rounding;\n    } else {\n      y = new Ctor(y);\n      if (rm === void 0) {\n        rm = Ctor.rounding;\n      } else {\n        checkInt32(rm, 0, 8);\n      }\n\n      // If x is not finite, return x if y is not NaN, else NaN.\n      if (!x.d) return y.s ? x : y;\n\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n      if (!y.d) {\n        if (y.s) y.s = x.s;\n        return y;\n      }\n    }\n\n    // If y is not zero, calculate the nearest multiple of y to x.\n    if (y.d[0]) {\n      external = false;\n      x = divide(x, y, 0, rm, 1).times(y);\n      external = true;\n      finalise(x);\n\n      // If y is zero, return zero with the sign of x.\n    } else {\n      y.s = x.s;\n      x = y;\n    }\n    return x;\n  };\n\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\n  P.toNumber = function () {\n    return +this;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toOctal = function (sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n     *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|bigint|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\n  P.toPower = P.pow = function (y) {\n    var e,\n      k,\n      pr,\n      r,\n      rm,\n      s,\n      x = this,\n      Ctor = x.constructor,\n      yn = +(y = new Ctor(y));\n\n    // Either ±Infinity, NaN or ±0?\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm);\n\n    // y exponent\n    e = mathfloor(y.e / LOG_BASE);\n\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = intPow(Ctor, x, k, pr);\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n    s = x.s;\n\n    // if x is negative\n    if (s < 0) {\n      // if y is not an integer\n      if (e < y.d.length - 1) return new Ctor(NaN);\n\n      // Result is positive if x is negative and the last digit of integer y is even.\n      if ((y.d[e] & 1) == 0) s = 1;\n\n      // if x.eq(-1)\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n        x.s = s;\n        return x;\n      }\n    }\n\n    // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;\n\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n\n    // Overflow/underflow?\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1;\n\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n    k = Math.min(12, (e + '').length);\n\n    // r = x^y = exp(y*ln(x))\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n    if (r.d) {\n      // Truncate to the required precision plus five rounding digits.\n      r = finalise(r, pr + 5, 1);\n\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n      // the result.\n      if (checkRoundingDigits(r.d, pr, rm)) {\n        e = pr + 10;\n\n        // Truncate to the increased precision plus five rounding digits.\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n      }\n    }\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toPrecision = function (sd, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n    if (sd === void 0) {\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), sd, rm);\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    }\n    return finalise(new Ctor(x), sd, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\n  P.toString = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\n  P.truncated = P.trunc = function () {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\n  P.valueOf = P.toJSON = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? '-' + str : str;\n  };\n\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\n\n  function digitsToString(d) {\n    var i,\n      k,\n      ws,\n      indexOfLastWord = d.length - 1,\n      str = '',\n      w = d[0];\n    if (indexOfLastWord > 0) {\n      str += w;\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    }\n\n    // Remove trailing zeros of last w.\n    for (; w % 10 === 0;) w /= 10;\n    return str + w;\n  }\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\n  function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n\n    // Get the length of the first word of the array d.\n    for (k = d[0]; k >= 10; k /= 10) --i;\n\n    // Is the rounding digit in the first word of d?\n    if (--i < 0) {\n      i += LOG_BASE;\n      di = 0;\n    } else {\n      di = Math.ceil((i + 1) / LOG_BASE);\n      i %= LOG_BASE;\n    }\n\n    // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n    if (repeating == null) {\n      if (i < 3) {\n        if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n      } else {\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n      }\n    } else {\n      if (i < 4) {\n        if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n      } else {\n        r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n      }\n    }\n    return r;\n  }\n\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n  function convertBase(str, baseIn, baseOut) {\n    var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      strL = str.length;\n    for (; i < strL;) {\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\n      for (j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n    return arr.reverse();\n  }\n\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n  function cosine(Ctor, x) {\n    var k, len, y;\n    if (x.isZero()) return x;\n\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n\n    // Estimate the optimum number of times to use the argument reduction.\n    len = x.d.length;\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      y = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      y = '2.3283064365386962890625e-10';\n    }\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n\n    // Reverse argument reduction\n    for (var i = k; i--;) {\n      var cos2x = x.times(x);\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n    Ctor.precision -= k;\n    return x;\n  }\n\n  /*\r\n   * Perform division in the specified base.\r\n   */\n  var divide = function () {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n      var temp,\n        carry = 0,\n        i = x.length;\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % base | 0;\n        carry = temp / base | 0;\n      }\n      if (carry) x.unshift(carry);\n      return x;\n    }\n    function compare(a, b, aL, bL) {\n      var i, r;\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n      return r;\n    }\n    function subtract(a, b, aL, base) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1;) a.shift();\n    }\n    return function (x, y, pr, rm, dp, base) {\n      var cmp,\n        e,\n        i,\n        k,\n        logBase,\n        more,\n        prod,\n        prodL,\n        q,\n        qd,\n        rem,\n        remL,\n        rem0,\n        sd,\n        t,\n        xi,\n        xL,\n        yd0,\n        yL,\n        yz,\n        Ctor = x.constructor,\n        sign = x.s == y.s ? 1 : -1,\n        xd = x.d,\n        yd = y.d;\n\n      // Either NaN, Infinity or 0?\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor(\n        // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n      }\n      if (base) {\n        logBase = 1;\n        e = x.e - y.e;\n      } else {\n        base = BASE;\n        logBase = LOG_BASE;\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n      }\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = [];\n\n      // Result exponent may be one less than e.\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\n      if (yd[i] > (xd[i] || 0)) e--;\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n        rm = Ctor.rounding;\n      } else if (dp) {\n        sd = pr + (x.e - y.e) + 1;\n      } else {\n        sd = pr;\n      }\n      if (sd < 0) {\n        qd.push(1);\n        more = true;\n      } else {\n        // Convert precision in number of base 10 digits to base 1e7 digits.\n        sd = sd / logBase + 2 | 0;\n        i = 0;\n\n        // divisor < 1e7\n        if (yL == 1) {\n          k = 0;\n          yd = yd[0];\n          sd++;\n\n          // k is the carry.\n          for (; (i < xL || k) && sd--; i++) {\n            t = k * base + (xd[i] || 0);\n            qd[i] = t / yd | 0;\n            k = t % yd | 0;\n          }\n          more = k || i < xL;\n\n          // divisor >= 1e7\n        } else {\n          // Normalise xd and yd so highest order digit of yd is >= base/2\n          k = base / (yd[0] + 1) | 0;\n          if (k > 1) {\n            yd = multiplyInteger(yd, k, base);\n            xd = multiplyInteger(xd, k, base);\n            yL = yd.length;\n            xL = xd.length;\n          }\n          xi = yL;\n          rem = xd.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL;) rem[remL++] = 0;\n          yz = yd.slice();\n          yz.unshift(0);\n          yd0 = yd[0];\n          if (yd[1] >= base / 2) ++yd0;\n          do {\n            k = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yd, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n              // Calculate trial digit, k.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // k will be how many times the divisor goes into the current remainder.\n              k = rem0 / yd0 | 0;\n\n              //  Algorithm:\n              //  1. product = divisor * trial digit (k)\n              //  2. if product > remainder: product -= divisor, k--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, k++\n\n              if (k > 1) {\n                if (k >= base) k = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiplyInteger(yd, k, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                cmp = compare(prod, rem, prodL, remL);\n\n                // product > remainder.\n                if (cmp == 1) {\n                  k--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                }\n              } else {\n                // cmp is -1.\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                if (k == 0) cmp = k = 1;\n                prod = yd.slice();\n              }\n              prodL = prod.length;\n              if (prodL < remL) prod.unshift(0);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n\n              // If product was < previous remainder.\n              if (cmp == -1) {\n                remL = rem.length;\n\n                // Compare divisor and new remainder.\n                cmp = compare(yd, rem, yL, remL);\n\n                // If divisor < new remainder, subtract divisor from remainder.\n                if (cmp < 1) {\n                  k++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\n                }\n              }\n              remL = rem.length;\n            } else if (cmp === 0) {\n              k++;\n              rem = [0];\n            } // if cmp === 1, k will be 0\n\n            // Add the next digit, k, to the result array.\n            qd[i++] = k;\n\n            // Update the remainder.\n            if (cmp && rem[0]) {\n              rem[remL++] = xd[xi] || 0;\n            } else {\n              rem = [xd[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n          more = rem[0] !== void 0;\n        }\n\n        // Leading zero?\n        if (!qd[0]) qd.shift();\n      }\n\n      // logBase is 1 when divide is being used for base conversion.\n      if (logBase == 1) {\n        q.e = e;\n        inexact = more;\n      } else {\n        // To calculate q.e, first get the number of digits of qd[0].\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n        q.e = i + e * logBase - 1;\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n      }\n      return q;\n    };\n  }();\n\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\n  function finalise(x, sd, rm, isTruncated) {\n    var digits,\n      i,\n      j,\n      k,\n      rd,\n      roundUp,\n      w,\n      xd,\n      xdi,\n      Ctor = x.constructor;\n\n    // Don't round if sd is null or undefined.\n    out: if (sd != null) {\n      xd = x.d;\n\n      // Infinity/NaN.\n      if (!xd) return x;\n\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // w: the word of xd containing rd, a base 1e7 number.\n      // xdi: the index of w within xd.\n      // digits: the number of digits of w.\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n      // they had leading zeros)\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n      // Get the length of the first word of the digits array xd.\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n      i = sd - digits;\n\n      // Is the rounding digit in the first word of xd?\n      if (i < 0) {\n        i += LOG_BASE;\n        j = sd;\n        w = xd[xdi = 0];\n\n        // Get the rounding digit at index j of w.\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n      } else {\n        xdi = Math.ceil((i + 1) / LOG_BASE);\n        k = xd.length;\n        if (xdi >= k) {\n          if (isTruncated) {\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n            for (; k++ <= xdi;) xd.push(0);\n            w = rd = 0;\n            digits = 1;\n            i %= LOG_BASE;\n            j = i - LOG_BASE + 1;\n          } else {\n            break out;\n          }\n        } else {\n          w = k = xd[xdi];\n\n          // Get the number of digits of w.\n          for (digits = 1; k >= 10; k /= 10) digits++;\n\n          // Get the index of rd within w.\n          i %= LOG_BASE;\n\n          // Get the index of rd within w, adjusted for leading zeros.\n          // The number of leading zeros of w is given by LOG_BASE - digits.\n          j = i - LOG_BASE + digits;\n\n          // Get the rounding digit at index j of w.\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n        }\n      }\n\n      // Are there any non-zero digits after the rounding digit?\n      isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n      // will give 714.\n\n      roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\n      // Check whether the digit to the left of the rounding digit is odd.\n      (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n      if (sd < 1 || !xd[0]) {\n        xd.length = 0;\n        if (roundUp) {\n          // Convert sd to decimal places.\n          sd -= x.e + 1;\n\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n          x.e = -sd || 0;\n        } else {\n          // Zero.\n          xd[0] = x.e = 0;\n        }\n        return x;\n      }\n\n      // Remove excess digits.\n      if (i == 0) {\n        xd.length = xdi;\n        k = 1;\n        xdi--;\n      } else {\n        xd.length = xdi + 1;\n        k = mathpow(10, LOG_BASE - i);\n\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n        // j > 0 means i > number of leading zeros of w.\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n      }\n      if (roundUp) {\n        for (;;) {\n          // Is the digit to be rounded up in the first word of xd?\n          if (xdi == 0) {\n            // i will be the length of xd[0] before k is added.\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n            j = xd[0] += k;\n            for (k = 1; j >= 10; j /= 10) k++;\n\n            // if i != k the length has increased.\n            if (i != k) {\n              x.e++;\n              if (xd[0] == BASE) xd[0] = 1;\n            }\n            break;\n          } else {\n            xd[xdi] += k;\n            if (xd[xdi] != BASE) break;\n            xd[xdi--] = 0;\n            k = 1;\n          }\n        }\n      }\n\n      // Remove trailing zeros.\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\n    }\n    if (external) {\n      // Overflow?\n      if (x.e > Ctor.maxE) {\n        // Infinity.\n        x.d = null;\n        x.e = NaN;\n\n        // Underflow?\n      } else if (x.e < Ctor.minE) {\n        // Zero.\n        x.e = 0;\n        x.d = [0];\n        // Ctor.underflow = true;\n      } // else Ctor.underflow = false;\n    }\n    return x;\n  }\n  function finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k,\n      e = x.e,\n      str = digitsToString(x.d),\n      len = str.length;\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n    return str;\n  }\n\n  // Calculate the base 10 exponent from the base 1e7 exponent.\n  function getBase10Exponent(digits, e) {\n    var w = digits[0];\n\n    // Add the number of digits of the first word of the digits array.\n    for (e *= LOG_BASE; w >= 10; w /= 10) e++;\n    return e;\n  }\n  function getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n  }\n  function getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n  }\n  function getPrecision(digits) {\n    var w = digits.length - 1,\n      len = w * LOG_BASE + 1;\n    w = digits[w];\n\n    // If non-zero...\n    if (w) {\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) len--;\n\n      // Add the number of digits of the first word.\n      for (w = digits[0]; w >= 10; w /= 10) len++;\n    }\n    return len;\n  }\n  function getZeroString(k) {\n    var zs = '';\n    for (; k--;) zs += '0';\n    return zs;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\n  function intPow(Ctor, x, n, pr) {\n    var isTruncated,\n      r = new Ctor(1),\n      // Max n of 9007199254740991 takes 53 loop iterations.\n      // Maximum digits array length; leaves [28, 34] guard digits.\n      k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n    for (;;) {\n      if (n % 2) {\n        r = r.times(x);\n        if (truncate(r.d, k)) isTruncated = true;\n      }\n      n = mathfloor(n / 2);\n      if (n === 0) {\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n        n = r.d.length - 1;\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\n        break;\n      }\n      x = x.times(x);\n      truncate(x.d, k);\n    }\n    external = true;\n    return r;\n  }\n  function isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n  }\n\n  /*\r\n   * Handle `max` (`n` is -1) and `min` (`n` is 1).\r\n   */\n  function maxOrMin(Ctor, args, n) {\n    var k,\n      y,\n      x = new Ctor(args[0]),\n      i = 0;\n    for (; ++i < args.length;) {\n      y = new Ctor(args[i]);\n\n      // NaN?\n      if (!y.s) {\n        x = y;\n        break;\n      }\n      k = x.cmp(y);\n      if (k === n || k === 0 && x.s === n) {\n        x = y;\n      }\n    }\n    return x;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\n  function naturalExponential(x, sd) {\n    var denominator,\n      guard,\n      j,\n      pow,\n      sum,\n      t,\n      wpr,\n      rep = 0,\n      i = 0,\n      k = 0,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // 0/NaN/Infinity?\n    if (!x.d || !x.d[0] || x.e > 17) {\n      return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n    t = new Ctor(0.03125);\n\n    // while abs(x) >= 0.1\n    while (x.e > -2) {\n      // x = x / 2^5\n      x = x.times(t);\n      k += 5;\n    }\n\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n    for (;;) {\n      pow = finalise(pow.times(x), wpr, 1);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr, 1));\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        j = k;\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\n\n        // Check to see if the first 4 rounding digits are [49]999.\n        // If so, repeat the summation with a higher precision, otherwise\n        // e.g. with precision: 18, rounding: 1\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += 10;\n            denominator = pow = t = new Ctor(1);\n            i = 0;\n            rep++;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n      sum = t;\n    }\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\n  function naturalLogarithm(y, sd) {\n    var c,\n      c0,\n      denominator,\n      e,\n      numerator,\n      rep,\n      sum,\n      t,\n      wpr,\n      x1,\n      x2,\n      n = 1,\n      guard = 10,\n      x = y,\n      xd = x.d,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // Is x negative or Infinity, NaN, 0 or 1?\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n    if (Math.abs(e = x.e) < 1.5e15) {\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n      e = x.e;\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n\n    // x1 is x reduced to a value near 1.\n    x1 = x;\n\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n    for (;;) {\n      numerator = finalise(numerator.times(x2), wpr, 1);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2);\n\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr, 1);\n\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n        // been repeated previously) and the first 4 rounding digits 9999?\n        // If so, restart the summation with a higher precision, otherwise\n        // e.g. with precision: 12, rounding: 1\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += guard;\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n            x2 = finalise(x.times(x), wpr, 1);\n            denominator = rep = 1;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n      sum = t;\n      denominator += 2;\n    }\n  }\n\n  // ±Infinity, NaN.\n  function nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n  }\n\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\n  function parseDecimal(x, str) {\n    var e, i, len;\n\n    // TODO BigInt str: no need to check for decimal point, exponential form or leading zeros.\n\n    // Decimal point?\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48; i++);\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n    if (str) {\n      len -= i;\n      x.e = e = e - i - 1;\n      x.d = [];\n\n      // Transform base\n\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n      for (; i--;) str += '0';\n      x.d.push(+str);\n      if (external) {\n        // Overflow?\n        if (x.e > x.constructor.maxE) {\n          // Infinity.\n          x.d = null;\n          x.e = NaN;\n\n          // Underflow?\n        } else if (x.e < x.constructor.minE) {\n          // Zero.\n          x.e = 0;\n          x.d = [0];\n          // x.constructor.underflow = true;\n        } // else x.constructor.underflow = false;\n      }\n    } else {\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n    }\n    return x;\n  }\n\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\n  function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n    if (str.indexOf('_') > -1) {\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n      if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === 'Infinity' || str === 'NaN') {\n      if (!+str) x.s = NaN;\n      x.e = NaN;\n      x.d = null;\n      return x;\n    }\n    if (isHex.test(str)) {\n      base = 16;\n      str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n      base = 2;\n    } else if (isOctal.test(str)) {\n      base = 8;\n    } else {\n      throw Error(invalidArgument + str);\n    }\n\n    // Is there a binary exponent part?\n    i = str.search(/p/i);\n    if (i > 0) {\n      p = +str.slice(i + 1);\n      str = str.substring(2, i);\n    } else {\n      str = str.slice(2);\n    }\n\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n    i = str.indexOf('.');\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n    if (isFloat) {\n      str = str.replace('.', '');\n      len = str.length;\n      i = len - i;\n\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n\n    // Remove trailing zeros.\n    for (i = xe; xd[i] === 0; --i) xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n\n    // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n    if (isFloat) x = divide(x, divisor, len * 4);\n\n    // Multiply by the binary exponent part if present.\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n  }\n\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n  function sine(Ctor, x) {\n    var k,\n      len = x.d.length;\n    if (len < 3) {\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    }\n\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x);\n\n    // Reverse argument reduction\n    var sin2_x,\n      d5 = new Ctor(5),\n      d16 = new Ctor(16),\n      d20 = new Ctor(20);\n    for (; k--;) {\n      sin2_x = x.times(x);\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n    return x;\n  }\n\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j,\n      t,\n      u,\n      x2,\n      i = 1,\n      pr = Ctor.precision,\n      k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n    for (;;) {\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n      t = u.plus(y);\n      if (t.d[k] !== void 0) {\n        for (j = k; t.d[j] === u.d[j] && j--;);\n        if (j == -1) break;\n      }\n      j = u;\n      u = y;\n      y = t;\n      t = j;\n      i++;\n    }\n    external = true;\n    t.d.length = k + 1;\n    return t;\n  }\n\n  // Exponent e must be positive and non-zero.\n  function tinyPow(b, e) {\n    var n = b;\n    while (--e) n *= b;\n    return n;\n  }\n\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\n  function toLessThanHalfPi(Ctor, x) {\n    var t,\n      isNeg = x.s < 0,\n      pi = getPi(Ctor, Ctor.precision, 1),\n      halfPi = pi.times(0.5);\n    x = x.abs();\n    if (x.lte(halfPi)) {\n      quadrant = isNeg ? 4 : 1;\n      return x;\n    }\n    t = x.divToInt(pi);\n    if (t.isZero()) {\n      quadrant = isNeg ? 3 : 2;\n    } else {\n      x = x.minus(t.times(pi));\n\n      // 0 <= x < pi\n      if (x.lte(halfPi)) {\n        quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n        return x;\n      }\n      quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n    return x.minus(pi).abs();\n  }\n\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\n  function toStringBinary(x, baseOut, sd, rm) {\n    var base,\n      e,\n      i,\n      k,\n      len,\n      roundUp,\n      str,\n      xd,\n      y,\n      Ctor = x.constructor,\n      isExp = sd !== void 0;\n    if (isExp) {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    } else {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    }\n    if (!x.isFinite()) {\n      str = nonFiniteToString(x);\n    } else {\n      str = finiteToString(x);\n      i = str.indexOf('.');\n\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\n      // log[2](10) = 3.321928094887362347870319429489390175864\n\n      if (isExp) {\n        base = 2;\n        if (baseOut == 16) {\n          sd = sd * 4 - 3;\n        } else if (baseOut == 8) {\n          sd = sd * 3 - 2;\n        }\n      } else {\n        base = baseOut;\n      }\n\n      // Convert the number as an integer then divide the result by its base raised to a power such\n      // that the fraction part will be restored.\n\n      // Non-integer.\n      if (i >= 0) {\n        str = str.replace('.', '');\n        y = new Ctor(1);\n        y.e = str.length - i;\n        y.d = convertBase(finiteToString(y), 10, base);\n        y.e = y.d.length;\n      }\n      xd = convertBase(str, 10, base);\n      e = len = xd.length;\n\n      // Remove trailing zeros.\n      for (; xd[--len] == 0;) xd.pop();\n      if (!xd[0]) {\n        str = isExp ? '0p+0' : '0';\n      } else {\n        if (i < 0) {\n          e--;\n        } else {\n          x = new Ctor(x);\n          x.d = xd;\n          x.e = e;\n          x = divide(x, y, sd, rm, 0, base);\n          xd = x.d;\n          e = x.e;\n          roundUp = inexact;\n        }\n\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\n        i = xd[sd];\n        k = base / 2;\n        roundUp = roundUp || xd[sd + 1] !== void 0;\n        roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n        xd.length = sd;\n        if (roundUp) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (; ++xd[--sd] > base - 1;) {\n            xd[sd] = 0;\n            if (!sd) {\n              ++e;\n              xd.unshift(1);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (len = xd.length; !xd[len - 1]; --len);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\n\n        // Add binary exponent suffix?\n        if (isExp) {\n          if (len > 1) {\n            if (baseOut == 16 || baseOut == 8) {\n              i = baseOut == 16 ? 4 : 3;\n              for (--len; len % i; len++) str += '0';\n              xd = convertBase(str, base, baseOut);\n              for (len = xd.length; !xd[len - 1]; --len);\n\n              // xd[0] will always be be 1\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n            } else {\n              str = str.charAt(0) + '.' + str.slice(1);\n            }\n          }\n          str = str + (e < 0 ? 'p' : 'p+') + e;\n        } else if (e < 0) {\n          for (; ++e;) str = '0' + str;\n          str = '0.' + str;\n        } else {\n          if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n    }\n    return x.s < 0 ? '-' + str : str;\n  }\n\n  // Does not strip trailing zeros.\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  }\n\n  // Decimal methods\n\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function abs(x) {\n    return new this(x).abs();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function acos(x) {\n    return new this(x).acos();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function acosh(x) {\n    return new this(x).acosh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function add(x, y) {\n    return new this(x).plus(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function asin(x) {\n    return new this(x).asin();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function asinh(x) {\n    return new this(x).asinh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function atan(x) {\n    return new this(x).atan();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function atanh(x) {\n    return new this(x).atanh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|bigint|Decimal} The y-coordinate.\r\n   * x {number|string|bigint|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\n  function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r,\n      pr = this.precision,\n      rm = this.rounding,\n      wpr = pr + 4;\n\n    // Either NaN\n    if (!y.s || !x.s) {\n      r = new this(NaN);\n\n      // Both ±Infinity\n    } else if (!y.d && !x.d) {\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n      r.s = y.s;\n\n      // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n      r.s = y.s;\n\n      // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n      r = getPi(this, wpr, 1).times(0.5);\n      r.s = y.s;\n\n      // Both non-zero and finite\n    } else if (x.s < 0) {\n      this.precision = wpr;\n      this.rounding = 1;\n      r = this.atan(divide(y, x, wpr, 1));\n      x = getPi(this, wpr, 1);\n      this.precision = pr;\n      this.rounding = rm;\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n      r = this.atan(divide(y, x, wpr, 1));\n    }\n    return r;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function cbrt(x) {\n    return new this(x).cbrt();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * min {number|string|bigint|Decimal}\r\n   * max {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function clamp(x, min, max) {\n    return new this(x).clamp(min, max);\n  }\n\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n    var i,\n      p,\n      v,\n      useDefaults = obj.defaults === true,\n      ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];\n    for (i = 0; i < ps.length; i += 3) {\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n      if ((v = obj[p]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n      if (v === true || v === false || v === 0 || v === 1) {\n        if (v) {\n          if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n            this[p] = true;\n          } else {\n            throw Error(cryptoUnavailable);\n          }\n        } else {\n          this[p] = false;\n        }\n      } else {\n        throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n    return this;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function cos(x) {\n    return new this(x).cos();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function cosh(x) {\n    return new this(x).cosh();\n  }\n\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\n  function clone(obj) {\n    var i, p, ps;\n\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|bigint|Decimal} A numeric value.\r\n     *\r\n     */\n    function Decimal(v) {\n      var e,\n        i,\n        t,\n        x = this;\n\n      // Decimal called without new.\n      if (!(x instanceof Decimal)) return new Decimal(v);\n\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n      x.constructor = Decimal;\n      if (isDecimalInstance(v)) {\n        x.s = v.s;\n        if (external) {\n          if (!v.d || v.e > Decimal.maxE) {\n            // Infinity.\n            x.e = NaN;\n            x.d = null;\n          } else if (v.e < Decimal.minE) {\n            // Zero.\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = v.e;\n            x.d = v.d.slice();\n          }\n        } else {\n          x.e = v.e;\n          x.d = v.d ? v.d.slice() : v.d;\n        }\n        return;\n      }\n      t = typeof v;\n      if (t === 'number') {\n        if (v === 0) {\n          x.s = 1 / v < 0 ? -1 : 1;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        }\n\n        // Fast path for small integers.\n        if (v === ~~v && v < 1e7) {\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\n          if (external) {\n            if (e > Decimal.maxE) {\n              x.e = NaN;\n              x.d = null;\n            } else if (e < Decimal.minE) {\n              x.e = 0;\n              x.d = [0];\n            } else {\n              x.e = e;\n              x.d = [v];\n            }\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n          return;\n        }\n\n        // Infinity or NaN?\n        if (v * 0 !== 0) {\n          if (!v) x.s = NaN;\n          x.e = NaN;\n          x.d = null;\n          return;\n        }\n        return parseDecimal(x, v.toString());\n      }\n      if (t === 'string') {\n        if ((i = v.charCodeAt(0)) === 45) {\n          // minus sign\n          v = v.slice(1);\n          x.s = -1;\n        } else {\n          if (i === 43) v = v.slice(1); // plus sign\n          x.s = 1;\n        }\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n      }\n      if (t === 'bigint') {\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        }\n        return parseDecimal(x, v.toString());\n      }\n      throw Error(invalidArgument + v);\n    }\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh; // ES6\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh; // ES6\n    Decimal.atan = atan;\n    Decimal.atanh = atanh; // ES6\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt; // ES6\n    Decimal.ceil = ceil;\n    Decimal.clamp = clamp;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh; // ES6\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot; // ES6\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10; // ES6\n    Decimal.log2 = log2; // ES6\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign; // ES6\n    Decimal.sin = sin;\n    Decimal.sinh = sinh; // ES6\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.sum = sum;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh; // ES6\n    Decimal.trunc = trunc; // ES6\n\n    if (obj === void 0) obj = {};\n    if (obj) {\n      if (obj.defaults !== true) {\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n      }\n    }\n    Decimal.config(obj);\n    return Decimal;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function div(x, y) {\n    return new this(x).div(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\n  function exp(x) {\n    return new this(x).exp();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function hypot() {\n    var i,\n      n,\n      t = new this(0);\n    external = false;\n    for (i = 0; i < arguments.length;) {\n      n = new this(arguments[i++]);\n      if (!n.d) {\n        if (n.s) {\n          external = true;\n          return new this(1 / 0);\n        }\n        t = n;\n      } else if (t.d) {\n        t = t.plus(n.times(n));\n      }\n    }\n    external = true;\n    return t.sqrt();\n  }\n\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\n  function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function ln(x) {\n    return new this(x).ln();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|bigint|Decimal} The argument of the logarithm.\r\n   * y {number|string|bigint|Decimal} The base of the logarithm.\r\n   *\r\n   */\n  function log(x, y) {\n    return new this(x).log(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function log2(x) {\n    return new this(x).log(2);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function log10(x) {\n    return new this(x).log(10);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function max() {\n    return maxOrMin(this, arguments, -1);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function min() {\n    return maxOrMin(this, arguments, 1);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function mod(x, y) {\n    return new this(x).mod(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function mul(x, y) {\n    return new this(x).mul(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} The base.\r\n   * y {number|string|bigint|Decimal} The exponent.\r\n   *\r\n   */\n  function pow(x, y) {\n    return new this(x).pow(y);\n  }\n\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\n  function random(sd) {\n    var d,\n      e,\n      k,\n      n,\n      i = 0,\n      r = new this(1),\n      rd = [];\n    if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n    if (!this.crypto) {\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\n\n      // Browsers supporting crypto.getRandomValues.\n    } else if (crypto.getRandomValues) {\n      d = crypto.getRandomValues(new Uint32Array(k));\n      for (; i < k;) {\n        n = d[i];\n\n        // 0 <= n < 4294967296\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n        if (n >= 4.29e9) {\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n        } else {\n          // 0 <= n <= 4289999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd[i++] = n % 1e7;\n        }\n      }\n\n      // Node.js supporting crypto.randomBytes.\n    } else if (crypto.randomBytes) {\n      // buffer\n      d = crypto.randomBytes(k *= 4);\n      for (; i < k;) {\n        // 0 <= n < 2147483648\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n        if (n >= 2.14e9) {\n          crypto.randomBytes(4).copy(d, i);\n        } else {\n          // 0 <= n <= 2139999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd.push(n % 1e7);\n          i += 4;\n        }\n      }\n      i = k / 4;\n    } else {\n      throw Error(cryptoUnavailable);\n    }\n    k = rd[--i];\n    sd %= LOG_BASE;\n\n    // Convert trailing digits to zeros according to sd.\n    if (k && sd) {\n      n = mathpow(10, LOG_BASE - sd);\n      rd[i] = (k / n | 0) * n;\n    }\n\n    // Remove trailing words which are zero.\n    for (; rd[i] === 0; i--) rd.pop();\n\n    // Zero?\n    if (i < 0) {\n      e = 0;\n      rd = [0];\n    } else {\n      e = -1;\n\n      // Remove leading words which are zero and adjust exponent accordingly.\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\n\n      // Count the digits of the first word of rd to determine leading zeros.\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\n\n      // Adjust the exponent for leading zeros of the first word of rd.\n      if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n    r.e = e;\n    r.d = rd;\n    return r;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n  }\n\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function sin(x) {\n    return new this(x).sin();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function sinh(x) {\n    return new this(x).sinh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function sqrt(x) {\n    return new this(x).sqrt();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function sub(x, y) {\n    return new this(x).sub(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function sum() {\n    var i = 0,\n      args = arguments,\n      x = new this(args[i]);\n    external = false;\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\n    external = true;\n    return finalise(x, this.precision, this.rounding);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function tan(x) {\n    return new this(x).tan();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\n  function tanh(x) {\n    return new this(x).tanh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\n  function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n  }\n\n  // Create and configure initial Decimal constructor.\n  Decimal = clone(DEFAULTS);\n  Decimal.prototype.constructor = Decimal;\n  Decimal['default'] = Decimal.Decimal = Decimal;\n\n  // Create the internal constants from their string values.\n  LN10 = new Decimal(LN10);\n  PI = new Decimal(PI);\n\n  // Export.\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return Decimal;\n    });\n\n    // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\n      P[Symbol.toStringTag] = 'Decimal';\n    }\n    module.exports = Decimal;\n\n    // Browser.\n  } else {\n    if (!globalScope) {\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\n    }\n    noConflict = globalScope.Decimal;\n    Decimal.noConflict = function () {\n      globalScope.Decimal = noConflict;\n      return Decimal;\n    };\n    globalScope.Decimal = Decimal;\n  }\n})(this);"],"sourceRoot":""}