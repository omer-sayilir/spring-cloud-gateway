{"version":3,"sources":["accounting/kepik/bordrosession/helper/ProcessCode.js","accounting/kepik/bordro/component/BordroTableIdSelected.js","accounting/kepik/bordrosession/SignBordroPage.js"],"names":["ProcessCode","SIGNBORDRO","code","SIGNMIME","RESENDMIME","BordroTableIdSelected","Component","constructor","props","super","getEmployeeId","async","self","this","params","url","state","content","employee","id","method","response","requestK","setState","employeeUserId","data","error","showAxiosError","loading","getApprovalUserId","approvalUserId","alert","selection","manual","total","page","size","fetchData","bind","previewBordro","setMediaViewer","accessor","direction","sortStr","undefined","processCode","selectedBordroIdList","searching","then","bordroSession","totalElements","React","createElement","SweetAlert","confirmBtnText","confirmBtnBsStyle","title","onConfirm","history","push","pathname","peykName","toggleModal","length","message","Alert","warning","position","effect","timeout","updateFlowTimeout","onComplete","selectedIdList","readFlowTimeoutTemplate","readTimeoutTemplate","catch","mediaModal","row","responseType","blob","Blob","type","headers","base64Data","reader","FileReader","readAsDataURL","onloadend","result","render","columnList","Header","Cell","term","moment","format","name","className","parsedTckn","surname","kepAddress","style","margin","warningCount","DocumentState","messageType","sortable","textAlign","onClick","e","columns","renewListForKepOwnership","isKepOwner","ApproveDocumentViewer","modal","listener","closeModal","Table","options","SignBordroPage","completed","signedDocumentCount","progressLength","pageState","timer","timerStarted","certError","disableButton","signBordros","writeSignedBordro","updatePdfCertificates","stateMap","0","label","20","wait","30","40","danger","componentDidMount","axios","Axios","create","baseURL","location","componentDidUpdate","setInterval","prevState","from","signed","unsigned","timerStatus","status","onTimerStatus","bordroSessionId","hsmType","pdfCertificate","certificate","value","certificateKeyId","keyId","JSON","stringify","bordroIdList","signedInfoList","p","Promise","resolve","signedBordro","forEach","element","index","bordroName","post","base64","pin","signedInfo","signature","signedDocument","HsmErrorAlert","renderNavButtons","Nav","paddingLeft","height","StickButton","fontSize","disabled","showCancel","cancelBtnText","cancelBtnBsStyle","onCancel","renderState","marginBottom","Col","sm","display","marginRight","ReactLoading","color","width","top","renderBordroList","pageSize","Row","Notify","ref","md","Card","CardHeader","CardTitle","tag","CardBody","HsmCertificateViewer","sessionId","onChange","val","pinValueChange","certificateError","pdfName","displayCertificateMenu","userId","currentUser"],"mappings":"sHAYeA,IAZG,CACdC,WAAY,CACRC,KAAM,GAEVC,SAAU,CACND,KAAM,GAEVE,WAAY,CACRF,KAAM,K,kCCRd,8IAcA,MAAMG,UAA8BC,YAElCC,YAAYC,GACVC,MAAMD,GAAO,KAgBfE,cAAgBC,UACd,IAAIC,EAAOC,KAEPC,EAAS,CACXC,IAAK,2BAFUF,KAAKG,MAAMC,QAAQ,GAAGC,SAASC,GAG9CC,OAAQ,QAGV,IACE,IAAIC,QAAiBC,YAASR,GAC9BF,EAAKW,SAAS,CACZC,eAAgBH,EAASI,OAE3B,MAAOC,GACPC,YAAeD,GACfd,EAAKW,SAAS,CAAEK,SAAS,MAE3B,KAEFC,kBAAoBlB,UAClB,IAAIC,EAAOC,KAEPC,EAAS,CACXC,IAAK,+BAFUF,KAAKG,MAAMC,QAAQ,GAAGE,GAGrCC,OAAQ,QAGV,IACE,IAAIC,QAAiBC,YAASR,GAC9BF,EAAKW,SAAS,CACZO,eAAgBT,EAASI,OAE3B,MAAOC,GACPC,YAAeD,GACfd,EAAKW,SAAS,CAAEK,SAAS,MAjD3Bf,KAAKG,MAAQ,CACXY,SAAS,EACTG,MAAO,KACPC,UAAW,GACXC,QAAQ,EACRhB,QAAS,GACTiB,MAAO,EACPC,KAAM,EACNC,KAAM,IAERvB,KAAKwB,UAAYxB,KAAKwB,UAAUC,KAAKzB,MACrCA,KAAK0B,cAAgB1B,KAAK0B,cAAcD,KAAKzB,MAC7CA,KAAK2B,eAAiB3B,KAAK2B,eAAeF,KAAKzB,MAyCjDwB,UAAUI,EAAUC,EAAWP,EAAMC,GACnC,IAAIxB,EAAOC,KACP8B,OAAuBC,IAAbH,EAA0B,SAAWA,EAAW,IAAMC,EAAa,GAC7E5B,EAAS,CACXC,IAAK,0CAA4CH,EAAKJ,MAAMqC,YAAc,SAAWV,EAAO,SAAWC,EAAOO,EAC9GvB,OAAQ,OACRK,KAAMb,EAAKJ,MAAMsC,sBAEnBlC,EAAKW,SAAS,CAACK,SAAS,EAAMmB,WAAW,EAAMd,QAAwB,IAAhBrB,EAAKqB,QAA0BrB,EAAKqB,SAC3FX,YAASR,GACJkC,MAAKrC,eAAgBU,GACtB,IAAIF,EAAKP,EAAKJ,MAAMyC,eAAiBrC,EAAKJ,MAAMyC,cAAc9B,GAC9D,GAAIE,EAASI,KAAKU,MAA6C,IAArCd,EAASI,KAAKU,KAAKe,cAC3CtC,EAAKW,SAAS,CACZQ,MAAQoB,IAAAC,cAACC,IAAU,CAAC3B,OAAK,EACL4B,eAAe,QACfC,kBAAkB,SAClBC,MAAM,OACNC,UAAWA,KACTtC,EACEP,EAAKJ,MAAMkD,QAAQC,KAAK,CAACC,SAAU,IAAIhD,EAAKJ,MAAMqD,yBAA2B1C,IAC7EP,EAAKW,SAAS,CAACQ,MAAO,OACtBnB,EAAKJ,MAAMsD,aAAelD,EAAKJ,MAAMsD,aAAY,KAEtElD,EAAKJ,MAAMqC,cAAgB7C,IAAYI,WAAWF,MAAQ,4FAC1DU,EAAKJ,MAAMqC,cAAgB7C,IAAYC,WAAWC,MAAQ,4MAC1DU,EAAKJ,MAAMqC,cAAgB7C,IAAYG,SAASD,MAAQ,6MAE3D0B,SAAS,QAhBb,CAmBO,GAAIP,EAASI,KAAKU,MAAQd,EAASI,KAAKU,KAAKe,cAAgBtC,EAAKJ,MAAMsC,qBAAqBiB,OAAQ,CAC1GnD,EAAKJ,MAAMsD,aAAY,GACvB,IAAIE,EAAUpD,EAAKJ,MAAMqC,cAAgB7C,IAAYI,WAAWF,KAAO,iEACpEU,EAAKJ,MAAMqC,YAAgB7C,IAAYC,WAAWC,KAAO,sJAE5D+D,IAAMC,QAAQF,EAAS,CACrBG,SAAU,YACVC,OAAQ,aACRC,QAAS,MAIbzD,EAAKW,SAAS,CACZY,KAAMA,EACNC,KAAMA,EACNF,MAAOb,EAASI,KAAKU,MAAQd,EAASI,KAAKU,KAAKe,cAChDjC,QAASI,EAASI,KAAKU,MAAQd,EAASI,KAAKU,KAAKlB,QAClDW,SAAS,GACR,KAC2C,iBAAxCP,EAASI,KAAKU,KAAKlB,QAAQ,GAAGD,OAChCJ,EAAKJ,MAAM8D,mBAAkB,GAEjC1D,EAAKJ,MAAM+D,WAAWlD,EAASI,KAAK+C,kBAES,iBAAxCnD,EAASI,KAAKU,KAAKlB,QAAQ,GAAGD,cACzBJ,EAAKF,sBACLE,EAAKiB,oBACPjB,EAAKI,MAAMc,iBAAmBlB,EAAKI,MAAMQ,eAC3CZ,EAAKJ,MAAMiE,0BAEX7D,EAAKJ,MAAMkE,2BAGhBC,OAAM,SAAUjD,GACnBd,EAAKW,SAAS,CAACK,SAAS,IACxBD,YAAeD,MAInBc,iBACE3B,KAAKU,SAAS,CAACR,IAAK,KAAM6D,YAAY,IAGxCrC,cAAcsC,GACZ,IAAIjE,EAAOC,KACPC,EAAS,CACXC,IAAK,+BACL+D,aAAc,cACd1D,OAAQ,OACRK,KAAMoD,EAAI1D,IAEZP,EAAKW,SAAS,CAACqD,YAAY,IAC3BtD,YAASR,GACNkC,MAAK,SAAU3B,GACd,IAAI0D,EAAO,IAAIC,KAAK,CAAC3D,EAASI,MAAO,CAACwD,KAAM5D,EAAS6D,QAAQ,kBACzDC,EAAW,GACf,QAAYvC,GAARmC,EAAmB,CACrB,IAAIK,EAAS,IAAIC,WACjBD,EAAOE,cAAcP,GACrBK,EAAOG,UAAY,WACjBJ,EAAaC,EAAOI,OACpB5E,EAAKW,SAAS,CAACR,IAAKoE,SAGvBR,OAAM,SAAUjD,GACnBC,YAAeD,GACfd,EAAKW,SAAS,CAACqD,YAAY,OAI/Ba,SAEE,IAAIC,EAAa,CACf,CACEC,OAAQ,WACRlD,SAAU,OACVmD,KAAMf,GACJ1B,IAAAC,cAAA,aACKyB,EAAIgB,MAAQC,IAAOjB,EAAIgB,KAAM,cAAcE,OAAO,aAI3D,CACEJ,OAAQ,OACRlD,SAAU,aACVmD,KAAMf,GACJ1B,IAAAC,cAAA,WACIyB,EAAI3D,UAAY2D,EAAI3D,SAAS8E,MAAS7C,IAAAC,cAAA,QAAM6C,UAAU,gBAAgBpB,EAAIqB,cACzErB,EAAI3D,UAAY2D,EAAI3D,SAAS8E,OAAS7C,IAAAC,cAAA,QAAM6C,UAAU,eAAepB,EAAIqB,cAIlF,CACEP,OAAQ,WACRlD,SAAU,gBACVmD,KAAMf,GAAQ1B,IAAAC,cAAA,WAAMyB,EAAI3D,UAAY2D,EAAI3D,SAAS8E,OAGnD,CACEL,OAAQ,cACRlD,SAAU,mBACVmD,KAAMf,GAAQ1B,IAAAC,cAAA,WAAMyB,EAAI3D,UAAY2D,EAAI3D,SAASiF,UAGnD,CACER,OAAQ,aACRlD,SAAU,sBACVmD,KAAMf,GACJ1B,IAAAC,cAAA,WACGyB,EAAI3D,UAAY2D,EAAI3D,SAASkF,aAIpC,CACET,OAAQ,8BACRlD,SAAU,eACVmD,KAAMf,GACF1B,IAAAC,cAAA,OAAKiD,MAAO,CAACC,OAAQ,IAClBzB,EAAI0B,eAIb,CACEZ,OAAQ,SACRlD,SAAU,QACVmD,KAAMf,GACJ1B,IAAAC,cAAA,WACGyB,EAAInD,OAASyB,IAAAC,cAAA,QAAM6C,UAAU,eAAepB,EAAInD,QAC/CmD,EAAInD,OACNyB,IAAAC,cAAA,QACE6C,UAAW,QAAUO,IAAc3B,EAAI7D,OAAOyF,aAAcD,IAAc3B,EAAI7D,OAAOgD,WAI7F,CACE2B,OAAQ,qBACRe,UAAU,EACVjE,SAAU,GACVmD,KAAMf,GACJ1B,IAAAC,cAAA,OAAKiD,MAAO,CAACM,UAAW,SACtBxD,IAAAC,cAAA,UAAQI,MAAM,uCAA2ByC,UAAU,+BAC3CI,MAAO,CAACC,OAAQ,WAChBM,QAASC,GAAKhG,KAAK0B,cAAcsC,IACvC1B,IAAAC,cAAA,KAAG6C,UAAU,oCAMnBa,EAAUC,YAAyBrB,EAAY,WAAY7E,KAAKL,MAAMwG,YAC1E,OAAO7D,IAAAC,cAAA,WACJvC,KAAKG,MAAM4D,YACZzB,IAAAC,cAAC6D,IAAqB,CAACC,MAAOrG,KAAKG,MAAM4D,WAClB7D,IAAKF,KAAKG,MAAMD,IAChByC,MAAM,oBACN2D,SAAUtG,KAAK2B,eACf4E,WAAYvG,KAAK2B,iBAExCW,IAAAC,cAACiE,IAAK,CAACP,QAASA,EACT7F,QAASJ,KAAKG,MAAMC,QACpBW,QAASf,KAAKL,MAAMoB,QAAUf,KAAKL,MAAMoB,QAAUf,KAAKG,MAAMY,QAC9DM,MAAOrB,KAAKG,MAAMkB,MAClBC,KAAMtB,KAAKG,MAAMmB,KACjBF,OAAQpB,KAAKG,MAAMiB,OACnBG,KAAMvB,KAAKG,MAAMoB,KACjBkF,QAAS,CAAC,IAAK,KAAM,KAAM,KAAM,OACjCjF,UAAWxB,KAAKwB,YAEtBxB,KAAKG,MAAMe,QAKH1B,O,kCCnRf,wLAiBA,MAAMkH,UAAuBjH,YAEzBC,YAAYC,GACRC,MAAMD,GACNK,KAAKG,MAAQ,CACTY,SAAS,EACT4F,WAAW,EACXC,oBAAqB,EACrBC,eAAgB,EAChBC,UAAW,EACX7E,qBAAsB,GACtB8E,MAAO,EACPC,cAAc,EACdC,WAAW,EACXC,eAAe,GAGnBlH,KAAKmH,YAAcnH,KAAKmH,YAAY1F,KAAKzB,MACzCA,KAAKoH,kBAAoBpH,KAAKoH,kBAAkB3F,KAAKzB,MACrDA,KAAKqH,sBAAwBrH,KAAKqH,sBAAsB5F,KAAKzB,MAE7DA,KAAKsH,SAAW,CACZC,EAAG,CACCC,MAAO,iFAIXC,GAAI,CACAD,MAAO,2FACPE,MAAM,GAGVC,GAAI,CACAH,MAAO,kFAGXI,GAAI,CACAJ,MAAO,yDACPK,QAAQ,IAKpBC,oBACI9H,KAAK+H,MAAQC,IAAMC,OAAO,CACtBC,QAAS,0BAGRlI,KAAKL,OAAUK,KAAKL,MAAMwI,UAAanI,KAAKL,MAAMwI,SAAS/F,cAG5DpC,KAAKU,SAAS,CAACuB,qBAAsBjC,KAAKL,MAAMwI,SAASlG,uBAFzDjC,KAAKL,MAAMkD,QAAQC,KAAK,CAACC,SAAU,IAAI/C,KAAKL,MAAMqD,+BAK1DoF,qBAC6B,IAArBpI,KAAKG,MAAM4G,QAAgB/G,KAAKG,MAAM6G,cACtChH,KAAKG,MAAMwG,WAAa3G,KAAKG,MAAMyG,sBAAwB5G,KAAKG,MAAM0G,gBACtEwB,YAAY,KACRrI,KAAKU,SAAS4H,IAAS,CAAMvB,MAAOuB,EAAUvB,MAAQ,MACvD,KACH/G,KAAKU,SAAS,CAACsG,cAAc,KACD,IAArBhH,KAAKG,MAAM4G,OAClB/G,KAAKL,MAAMkD,QAAQC,KAAK,CACpBC,SAAU,IAAI/C,KAAKL,MAAMqD,yBAA2BhD,KAAKL,MAAMwI,SAAS/F,cAAc9B,GACtFiI,KAAM,OACNC,OAAQxI,KAAKG,MAAMyG,oBACnB6B,SAAWzI,KAAKG,MAAM8B,qBAAqBiB,OAASlD,KAAKG,MAAMyG,sBAK3E8B,YAAYC,GACR3I,KAAKL,MAAMiJ,cAAcD,GAE7BtB,wBACI,IAAItH,EAAOC,KACP6I,EAAkB9I,EAAKJ,MAAMwI,SAAS/F,cAAc9B,GACpDwI,EAAU/I,EAAKI,MAAM4I,eAAeD,QACpCE,EAAcjJ,EAAKI,MAAM4I,eAAeE,MACxCC,EAAmBnJ,EAAKI,MAAM4I,eAAeI,MAC7CJ,EAAiBK,KAAKC,UAAUtJ,EAAKI,MAAM4I,gBAC3C9I,EAAS,CACTC,IAAK,kCACLK,OAAQ,OACRK,KAAM,CACFiI,gBAAiBA,EACjBC,QAASA,EACTE,YAAaA,EACbE,iBAAkBA,EAClBI,aAAcvJ,EAAKI,MAAM8B,qBACzB8G,eAAgBA,IAGxBhJ,EAAKW,SAAS,CAACoG,UAAW,GAAI5F,MAAO,KAAMgG,eAAe,IAC1DlH,KAAK0I,aAAY,GACjBjI,YAASR,GACJkC,MAAK,SAAU3B,GACZT,EAAKW,SAAS,CAAC6I,eAAgB/I,EAASI,OACxCb,EAAKoH,iBACNrD,OAAM,SAAUjD,GACnBC,YAAeD,GACfd,EAAKW,SAAS,CAACoG,UAAW,GAAII,eAAe,IAC7ClH,KAAK0I,aAAY,MAIzBvB,cACI,IAAIpH,EAAOC,KACPwJ,EAAIC,QAAQC,QAAQ,IACpBC,EAAe,GAEnB5J,EAAKW,SAAS,CACVmG,eAAgB9G,EAAKI,MAAMoJ,eAAerG,OAC1CnC,SAAS,EACT+F,UAAW,KAEf/G,EAAKI,MAAMoJ,eAAeK,QAAQ,CAACC,EAASC,KACxCN,EAAIA,EAAErH,KAAM3B,IACRT,EAAKW,SAAS,CAACqJ,WAAYF,EAAQE,aAC5BhK,EAAKgI,MAAMiC,KAAK,iCAAmCH,EAAQf,QAAS,CACvEmB,QAAQ,EACRC,IAAKlK,KAAKG,MAAM+J,IAChBC,WAAYN,EAAQM,WACpBnB,YAAa,CACTG,MAAOU,EAAQX,oBAEpB/G,KAAM3B,IACLmJ,EAAa7G,KAAK,CACdxC,GAAIuJ,EAAQvJ,GACZ8J,UAAW5J,EAASI,KAAKyJ,iBAE7BrK,KAAKoH,kBAAkBuC,GACvBA,EAAe,SAK3BH,EAAErH,KAAK,KACHpC,EAAKW,SAAS,CACVK,SAAS,EACT4F,WAAW,IAEf3G,KAAK0I,aAAY,KAClB5E,MAAMjD,IACLd,EAAKW,SAAS,CACVK,SAAS,EACT4F,WAAW,EACXG,UAAW,EACXI,eAAe,EACfhG,MAAOoB,IAAAC,cAAC+H,IAAa,CAACzJ,MAAOA,EAAO+B,UAAWA,IAAM7C,EAAKW,SAAS,CAACQ,MAAO,WAE/ElB,KAAK0I,aAAY,KAIzBtB,kBAAkBuC,GACd,IAAI5J,EAAOC,KACPC,EAAS,CACTC,IAAK,4BACLK,OAAQ,OACRK,KAAM+I,GAEVlJ,YAASR,GACJkC,MAAK,SAAU3B,GACZT,EAAKW,SAAS,CAAC4H,EAAW3I,KACf,CAACiH,oBAAqB0B,EAAU1B,oBAAsB,QAElE9C,OAAM,SAAUjD,GACnBC,YAAeD,GACfd,EAAKW,SAAS,CAACoG,UAAW,GAAII,eAAe,IAC7ClH,KAAK0I,aAAY,MAIzB6B,mBACI,OACIjI,IAAAC,cAACiI,MAAG,CAACpF,UAAU,SAASI,MAAO,CAACiF,YAAa,OAAQC,OAAQ,SACzDpI,IAAAC,cAACoI,IAAW,CAACrH,SAAS,WAAW8B,UAAU,iBAAiBI,MAAO,CAACoF,SAAU,SACjEpD,MAAM,OAAO7E,MAAM,wBACnBoD,QAASC,GAAKhG,KAAKL,MAAMkD,QAAQC,KAAK,CAClCC,SAAU,IAAI/C,KAAKL,MAAMqD,yBAA2BhD,KAAKL,MAAMwI,SAAS/F,cAAc9B,GACtF2B,qBAAsBjC,KAAKL,MAAMwI,SAASlG,yBAE3DK,IAAAC,cAACoI,IAAW,CAACrH,SAAS,WAAW8B,UAAU,cAAcI,MAAO,CAACoF,SAAU,SAC9DpD,MAAM,cAAS7E,MAAM,8CACrBkI,SAAU7K,KAAKG,MAAM+G,cACrBnB,QAASC,IACDhG,KAAKG,MAAM4I,gBAAkB/I,KAAKG,MAAM4I,eAAeD,SACvD9I,KAAKG,MAAM4I,eAAeE,OAASjJ,KAAKG,MAAM4I,eAAeI,MAC7DnJ,KAAKU,SAAS,CACVQ,MACIoB,IAAAC,cAACC,IAAU,CAACsI,YAAU,EAACzH,SAAO,EAClBZ,eAAe,OACfsI,cAAc,aACdrI,kBAAkB,UAClBsI,iBAAiB,UACjBrI,MAAM,gBACNC,UAAWA,KAAO5C,KAAKqH,yBACvB4D,SAAUA,IAAMjL,KAAKU,SAAS,CAACQ,MAAO,QACjD,2CAMTlB,KAAKU,SAAS,CACVQ,MAAOoB,IAAAC,cAAC+H,IAAa,CAACzJ,MAAOb,KAAKG,MAAM8G,UAClBrE,UAAWA,IAAM5C,KAAKU,SAAS,CAACQ,MAAO,eAOlGgK,cACI,IAAI5D,EAAWtH,KAAKsH,SAAStH,KAAKG,MAAM2G,WAExC,OAAOxE,IAAAC,cAAA,OAAK6C,UAAU,MAAMI,MAAO,CAAC2F,aAAc,SAC9C7I,IAAAC,cAAC6I,MAAG,CAACC,GAAI,IACL/I,IAAAC,cAAA,OAAKiD,MAAO,CAAC8F,QAAS,eAAgBC,YAAa,QAC9CjE,EAASI,MAAQpF,IAAAC,cAACiJ,IAAY,CAACpH,KAAK,QAAQqH,MAAM,UAAUf,OAAQ,GAAIgB,MAAO,MAEpFpJ,IAAAC,cAAA,OAAKiD,MAAO,CACR8F,QAAS,eAAgBC,YAAa,MAAOjI,SAAU,WAAYqI,IAAK,OACxEF,OAA2B,IAApBnE,EAASO,OAAkB,YAAc,eAE/CP,EAASE,SAM1BoE,mBACI,OAAOtJ,IAAAC,cAAC/C,IAAqB,CAAC4C,cAAepC,KAAKL,MAAMwI,SAAS/F,cACnCH,qBAAsBjC,KAAKL,MAAMwI,SAASlG,qBAC1CyB,WAAYsC,GAAKhG,KAAKU,SAAS,CAACuB,qBAAsB+D,IACtD6F,SAAU,GAAIhJ,QAAS7C,KAAKL,MAAMkD,QAASG,SAAUhD,KAAKL,MAAMqD,SAChEhB,YAAa7C,IAAYC,WAAWC,OAGtEuF,SAEI,OACItC,IAAAC,cAACuJ,MAAG,CAAC1G,UAAU,kBACX9C,IAAAC,cAACwJ,IAAM,CAACC,IAAI,WACXhM,KAAKG,MAAMe,MACXlB,KAAKuK,mBACNjI,IAAAC,cAAA,OAAK6C,UAAU,iBACX9C,IAAAC,cAAC6I,MAAG,CAACa,GAAG,MACJ3J,IAAAC,cAAC2J,OAAI,CAAC9G,UAAU,QACZ9C,IAAAC,cAAC4J,aAAU,KACP7J,IAAAC,cAAC6J,YAAS,CAACC,IAAI,MAAK,kCAIxB/J,IAAAC,cAAC+J,WAAQ,KACJtM,KAAKL,MAAMwI,SAAS/F,eAAiBpC,KAAKkL,eAE/C5I,IAAAC,cAAC+J,WAAQ,KACJtM,KAAKL,MAAMwI,SAAS/F,eACrBE,IAAAC,cAACgK,IAAoB,CAACC,UAAWxM,KAAKL,MAAMwI,SAAS/F,cAAc9B,GAC7C2I,MAAOjJ,KAAKG,MAAM4I,eAClB0D,SAAWC,GAAQ1M,KAAKU,SAAS,CAACqI,eAAgB2D,IAClDC,eAAiBD,GAAQ1M,KAAKU,SAAS,CAACwJ,IAAKwC,IAC7CE,iBAAmBF,GAAQ1M,KAAKU,SAAS,CAACuG,UAAWyF,IACrDG,QAAS7M,KAAKG,MAAM4J,WAAa/J,KAAKG,MAAM4J,WAAa,GACzDlD,eAAgB7G,KAAKG,MAAM0G,eAC3BD,oBAAqB5G,KAAKG,MAAMyG,oBAChCkG,uBAAiD,IAAzB9M,KAAKG,MAAM2G,WAA4C,KAAzB9G,KAAKG,MAAM2G,UACjEiG,OAAQ/M,KAAKL,MAAMqN,aAAehN,KAAKL,MAAMqN,YAAY1M,MAEnFgC,IAAAC,cAAC+J,WAAQ,KACJtM,KAAKL,MAAMwI,SAAS/F,eAAiBpC,KAAK4L,yBAY5DlF","file":"static/js/26.6b7009ec.chunk.js","sourcesContent":["let ProcessCode = {\n    SIGNBORDRO: {\n        code: 0\n    },\n    SIGNMIME: {\n        code: 1\n    },\n    RESENDMIME: {\n        code: 2\n    }\n};\n\nexport default ProcessCode;","import React, {Component} from 'react';\nimport Table from \"../../../../components/Table/Table\";\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport 'react-datetime/css/react-datetime.css'\nimport moment from 'moment';\nimport 'moment/locale/tr'\nimport Alert from \"react-s-alert\";\nimport ProcessCode from \"../../bordrosession/helper/ProcessCode\";\nimport {showAxiosError} from \"../../../../helper/helper\";\nimport {requestK} from \"../../../../helper/APIUtils\";\nimport {renewListForKepOwnership} from \"../../common/PeykHelper\";\nimport DocumentState from \"../../common/DocumentState\";\nimport ApproveDocumentViewer from \"../../approval/helper/ApproveDocumentViewer\";\n\nclass BordroTableIdSelected extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      alert: null,\n      selection: [],\n      manual: false,\n      content: [],\n      total: 0,\n      page: 0,\n      size: 10\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.previewBordro = this.previewBordro.bind(this);\n    this.setMediaViewer = this.setMediaViewer.bind(this);\n  }\n\n  getEmployeeId = async () => {\n    let self = this;\n    let employeeId = this.state.content[0].employee.id;\n    let params = {\n      url: `/employee/getEmployeeId/${employeeId}`,\n      method: \"post\"\n    };\n\n    try {\n      let response = await requestK(params);\n      self.setState({\n        employeeUserId: response.data\n      });\n    } catch (error) {\n      showAxiosError(error);\n      self.setState({ loading: false });\n    }\n  };\n\n  getApprovalUserId = async () => {\n    let self = this;\n    let approvalId = this.state.content[0].id;\n    let params = {\n      url: `/approval/getApprovalUserId/${approvalId}`,\n      method: \"post\"\n    };\n\n    try {\n      let response = await requestK(params);\n      self.setState({\n        approvalUserId: response.data\n      });\n    } catch (error) {\n      showAxiosError(error);\n      self.setState({ loading: false });\n    }\n  };\n\n  fetchData(accessor, direction, page, size) {\n    let self = this;\n    let sortStr = accessor !== undefined ? ('&sort=' + accessor + ',' + direction) : '';\n    let params = {\n      url: '/bordro/readBordroAllByIds?processCode=' + self.props.processCode + '&page=' + page + '&size=' + size + sortStr,\n      method: \"post\",\n      data: self.props.selectedBordroIdList\n    };\n    self.setState({loading: true, searching: true, manual: self.manual === true ? false : self.manual});\n    requestK(params)\n        .then(async function (response) {\n        let id = self.props.bordroSession && self.props.bordroSession.id;\n        if (response.data.page && response.data.page.totalElements === 0) {\n          self.setState({\n            alert: (<SweetAlert error\n                                confirmBtnText=\"Tamam\"\n                                confirmBtnBsStyle=\"danger\"\n                                title=\"Hata\"\n                                onConfirm={() => {\n                                  id ?\n                                    self.props.history.push({pathname: `/${self.props.peykName}/bordroimport/` + id}) :\n                                    self.setState({alert: null});\n                                    self.props.toggleModal && self.props.toggleModal(true);\n                                }}>\n              {self.props.processCode === ProcessCode.RESENDMIME.code && \"Seçilen alıcıların onayda bekleyen gönderileri bulunmamaktadır.\"}\n              {self.props.processCode === ProcessCode.SIGNBORDRO.code && \"Seçilen ücret bordrolarının imzalı iletiler bulunduğu veya çalışan eşleşmesi yapılmamış olduğu için bu işlem yapılamaz.\"}\n              {self.props.processCode === ProcessCode.SIGNMIME.code && \"Seçilen ücret bordrolarının imzalı iletiler bulunduğu veya çalışan eşleşmesi yapılmamış olduğu için bu işlem yapılamaz.\"}\n            </SweetAlert>),\n            loading: false\n          });\n          return;\n        } else if (response.data.page && response.data.page.totalElements < self.props.selectedBordroIdList.length) {\n          self.props.toggleModal(false);\n          let message = self.props.processCode === ProcessCode.RESENDMIME.code ? 'Tekrar gönderime hazır bordrolar seçilmiştir.' :\n            (self.props.processCode === ProcessCode.SIGNBORDRO.code ? 'Çalışan eşleşmesi olmayanlar ve daha önce gönderilmiş bordro listeden çıkarılmıştır.' :\n              'Çalışan eşleşmesi olmayanlar ve daha önce gönderilmiş bordro listeden çıkarılmıştır.');\n          Alert.warning(message, {\n            position: 'top-right',\n            effect: 'stackslide',\n            timeout: 8000\n          });\n        }\n\n        self.setState({\n          page: page,\n          size: size,\n          total: response.data.page && response.data.page.totalElements,\n          content: response.data.page && response.data.page.content,\n          loading: false\n        }, () => {\n          if (response.data.page.content[0].state === \"FLOW_TIMEOUT\") {\n            self.props.updateFlowTimeout(true);\n          }\n        self.props.onComplete(response.data.selectedIdList);\n        });\n          if(response.data.page.content[0].state === 'FLOW_TIMEOUT'){\n            await self.getEmployeeId();\n            await self.getApprovalUserId();\n            if (self.state.approvalUserId === self.state.employeeUserId) {\n              self.props.readFlowTimeoutTemplate();\n            } else {\n              self.props.readTimeoutTemplate();\n            }\n          }\n      }).catch(function (error) {\n      self.setState({loading: false});\n      showAxiosError(error);\n    });\n  }\n\n  setMediaViewer() {\n    this.setState({url: null, mediaModal: false});\n  }\n\n  previewBordro(row) {\n    let self = this;\n    let params = {\n      url: `/bordro/previewBordroContent`,\n      responseType: 'arraybuffer',\n      method: \"post\",\n      data: row.id\n    };\n    self.setState({mediaModal: true});\n    requestK(params)\n      .then(function (response) {\n        let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n        let base64Data=\"\";\n        if (blob != undefined) {\n          let reader = new FileReader();\n          reader.readAsDataURL(blob);\n          reader.onloadend = function() {\n            base64Data = reader.result;\n            self.setState({url: base64Data});\n          }\n        }\n      }).catch(function (error) {\n      showAxiosError(error);\n      self.setState({mediaModal: false});\n    });\n  }\n\n  render() {\n\n    let columnList = [\n      {\n        Header: \"Dönem\",\n        accessor: \"term\",\n        Cell: row => (\n          <div>\n            {!!row.term && moment(row.term, 'YYYY/MM/DD').format('YYYY/MM')}\n          </div>\n        )\n      },\n      {\n        Header: \"TCKN\",\n        accessor: \"parsedTckn\",\n        Cell: row => (\n          <div>\n            {(row.employee && row.employee.name) && <span className=\"text-success\">{row.parsedTckn}</span>}\n            {!(row.employee && row.employee.name) && <span className=\"text-danger\">{row.parsedTckn}</span>}\n          </div>\n        )\n      },\n      {\n        Header: \"Adı\",\n        accessor: \"employee_name\",\n        Cell: row => (<div>{row.employee && row.employee.name}</div>\n        )\n      },\n      {\n        Header: \"Soyadı\",\n        accessor: \"employee_surname\",\n        Cell: row => (<div>{row.employee && row.employee.surname}</div>\n        )\n      },\n      {\n        Header: \"Kep Adresi\",\n        accessor: \"employee_kepAddress\",\n        Cell: row => (\n          <div>\n            {row.employee && row.employee.kepAddress}\n          </div>\n        )\n      },\n      {\n        Header: \"Uyarı Sayısı\",\n        accessor: \"warningCount\",\n        Cell: row => (\n            <div style={{margin: 0}}>\n              {row.warningCount}\n            </div>\n        )\n      },\n      {\n        Header: \"Durumu\",\n        accessor: \"state\",\n        Cell: row => (\n          <div>\n            {row.error && <span className=\"text-danger\">{row.error}</span>}\n            {!row.error &&\n            <span\n              className={\"text-\" + DocumentState[row.state].messageType}>{DocumentState[row.state].message}</span>}\n          </div>\n        )\n      },\n      {\n        Header: \"İşlemler\",\n        sortable: false,\n        accessor: \"\",\n        Cell: row => (\n          <div style={{textAlign: 'left'}}>\n            <button title=\"Ücret Bordrosu Görüntüle\" className=\"btn-icon btn btn-info btn-sm\"\n                    style={{margin: '0px 3px'}}\n                    onClick={e => this.previewBordro(row)}>\n              <i className=\"now-ui-icons ui-1_zoom-bold\"/>\n            </button>\n          </div>\n        )\n      }\n    ];\n    let columns = renewListForKepOwnership(columnList, \"accessor\", this.props.isKepOwner);\n    return <div>\n      {this.state.mediaModal &&\n      <ApproveDocumentViewer modal={this.state.mediaModal}\n                             url={this.state.url}\n                             title=\"Ücret Bordrosu\"\n                             listener={this.setMediaViewer}\n                             closeModal={this.setMediaViewer}/>\n      }\n      <Table columns={columns}\n             content={this.state.content}\n             loading={this.props.loading ? this.props.loading : this.state.loading}\n             total={this.state.total}\n             page={this.state.page}\n             manual={this.state.manual}\n             size={this.state.size}\n             options={[\"5\", \"10\", \"20\", \"50\", \"100\"]}\n             fetchData={this.fetchData}\n      />\n      {this.state.alert}\n    </div>;\n  }\n}\n\nexport default BordroTableIdSelected;\n","import React, {Component} from 'react';\nimport {Card, CardBody, CardHeader, CardTitle, Col, Nav, Row} from 'reactstrap';\nimport 'react-table/react-table.css'\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport Notify from 'react-notification-alert';\nimport 'react-datetime/css/react-datetime.css'\nimport 'moment/locale/tr'\nimport Axios from 'axios'\nimport HsmErrorAlert from '../../../common/hsm/HsmErrorAlert'\nimport HsmCertificateViewer from '../common/HsmCertificateViewer';\nimport BordroTableIdSelected from \"../bordro/component/BordroTableIdSelected\";\nimport ReactLoading from 'react-loading';\nimport StickButton from \"../../../components/StickButton\";\nimport ProcessCode from \"./helper/ProcessCode\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport {showAxiosError} from \"../../../helper/helper\";\n\nclass SignBordroPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            completed: false,\n            signedDocumentCount: 0,\n            progressLength: 1,\n            pageState: 0,\n            selectedBordroIdList: [],\n            timer: 1,\n            timerStarted: false,\n            certError: true,\n            disableButton: false\n        };\n\n        this.signBordros = this.signBordros.bind(this);\n        this.writeSignedBordro = this.writeSignedBordro.bind(this);\n        this.updatePdfCertificates = this.updatePdfCertificates.bind(this);\n\n        this.stateMap = {\n            0: {\n                label: \"Bordro dosyaları imzalama için hazır. İmzalayınız\",\n            },\n            // İmzala'ya basıldı -> 1.Sertifika session'a kaydediliyor\n            //                   -> 2.SignedInfo Üretilmesi bekleniyor\n            20: {\n                label: \"Sertifika sahibi bordrolara yazılıyor. Lütfen, sayfayı terk etmeyiniz.\",\n                wait: true\n            },\n            // İmzala'ya basıldı -> 3.İmzalanıyor\n            30: {\n                label: \"Bordro dosyaları imzalanıyor. Lütfen, sayfayı terk etmeyiniz\",\n            },\n            // İmzalanamadı ise;\n            40: {\n                label: \"Bordrolar imzalanamadı. Bilgileri kontrol ediniz.\",\n                danger: true\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.axios = Axios.create({\n            baseURL: \"http://127.0.0.1:9999\"\n        });\n\n        if (!this.props || !this.props.location || !this.props.location.bordroSession)\n            this.props.history.push({pathname: `/${this.props.peykName}/bordrosessionlist`});\n        else\n            this.setState({selectedBordroIdList: this.props.location.selectedBordroIdList});\n    }\n\n    componentDidUpdate() {\n        if (this.state.timer === 1 && !this.state.timerStarted &&\n            this.state.completed && this.state.signedDocumentCount === this.state.progressLength) {\n            setInterval(() => {\n                this.setState(prevState => ({timer: prevState.timer - 1}))\n            }, 1000);\n            this.setState({timerStarted: true});\n        } else if (this.state.timer === 0) {\n            this.props.history.push({\n                pathname: `/${this.props.peykName}/bordroimport/` + this.props.location.bordroSession.id,\n                from: \"sign\",\n                signed: this.state.signedDocumentCount,\n                unsigned: (this.state.selectedBordroIdList.length - this.state.signedDocumentCount)\n            });\n        }\n    }\n\n    timerStatus(status){\n        this.props.onTimerStatus(status);\n    };\n    updatePdfCertificates() {\n        let self = this;\n        let bordroSessionId = self.props.location.bordroSession.id;\n        let hsmType = self.state.pdfCertificate.hsmType;\n        let certificate = self.state.pdfCertificate.value;\n        let certificateKeyId = self.state.pdfCertificate.keyId;\n        let pdfCertificate = JSON.stringify(self.state.pdfCertificate);\n        let params = {\n            url: `/signer/createPdfSignedInfoList`,\n            method: \"post\",\n            data: {\n                bordroSessionId: bordroSessionId,\n                hsmType: hsmType,\n                certificate: certificate,\n                certificateKeyId: certificateKeyId,\n                bordroIdList: self.state.selectedBordroIdList,\n                pdfCertificate: pdfCertificate,\n            }\n        };\n        self.setState({pageState: 20, alert: null, disableButton: true});\n        this.timerStatus(true);\n        requestK(params)\n            .then(function (response) {\n                self.setState({signedInfoList: response.data});\n                self.signBordros();\n            }).catch(function (error) {\n            showAxiosError(error);\n            self.setState({pageState: 40, disableButton: false});\n            this.timerStatus(false);\n        });\n    }\n\n    signBordros() {\n        let self = this;\n        let p = Promise.resolve([]);\n        let signedBordro = [];\n\n        self.setState({\n            progressLength: self.state.signedInfoList.length,\n            loading: true,\n            pageState: 30\n        });\n        self.state.signedInfoList.forEach((element, index) => {\n            p = p.then((response) => {\n                self.setState({bordroName: element.bordroName});\n                return self.axios.post(\"/signature/signedinfo?hsmtype=\" + element.hsmType, {\n                    base64: true,\n                    pin: this.state.pin,\n                    signedInfo: element.signedInfo,\n                    certificate: {\n                        keyId: element.certificateKeyId\n                    }\n                }).then((response) => {\n                    signedBordro.push({\n                        id: element.id,\n                        signature: response.data.signedDocument\n                    });\n                    this.writeSignedBordro(signedBordro);\n                    signedBordro = [];\n                });\n            });\n        });\n\n        p.then(() => {\n            self.setState({\n                loading: false,\n                completed: true\n            });\n            this.timerStatus(false);\n        }).catch(error => {\n            self.setState({\n                loading: false,\n                completed: false,\n                pageState: 0,\n                disableButton: false,\n                alert: <HsmErrorAlert error={error} onConfirm={() => self.setState({alert: null})}/>\n            });\n            this.timerStatus(false);\n        });\n    }\n\n    writeSignedBordro(signedBordro) {\n        let self = this;\n        let params = {\n            url: `/signer/writePdfSignature`,\n            method: \"post\",\n            data: signedBordro\n        };\n        requestK(params)\n            .then(function (response) {\n                self.setState((prevState, props) => {\n                    return {signedDocumentCount: prevState.signedDocumentCount + 1}\n                });\n            }).catch(function (error) {\n            showAxiosError(error);\n            self.setState({pageState: 40, disableButton: true});\n            this.timerStatus(false);\n        });\n    }\n\n    renderNavButtons() {\n        return (\n            <Nav className=\"topbar\" style={{paddingLeft: '14px', height: '53px'}}>\n                <StickButton position=\"leftSide\" className=\"zocial GeriDon\" style={{fontSize: 'small'}}\n                             label=\"Geri\" title=\"Önceki Sayfaya Git\"\n                             onClick={e => this.props.history.push({\n                                 pathname: `/${this.props.peykName}/bordroimport/` + this.props.location.bordroSession.id,\n                                 selectedBordroIdList: this.props.location.selectedBordroIdList\n                             })}/>\n                <StickButton position=\"leftSide\" className=\"zocial Imza\" style={{fontSize: 'small'}}\n                             label=\"İmzala\" title=\"Ücret Bordrolarını İmzala\"\n                             disabled={this.state.disableButton}\n                             onClick={e => {\n                                 if (this.state.pdfCertificate && this.state.pdfCertificate.hsmType &&\n                                     this.state.pdfCertificate.value && this.state.pdfCertificate.keyId)\n                                     this.setState({\n                                         alert: (\n                                             <SweetAlert showCancel warning\n                                                         confirmBtnText=\"Evet\"\n                                                         cancelBtnText=\"Hayır\"\n                                                         confirmBtnBsStyle=\"success\"\n                                                         cancelBtnBsStyle=\"default\"\n                                                         title=\"Emin misiniz?\"\n                                                         onConfirm={() => {this.updatePdfCertificates()}}\n                                                         onCancel={() => this.setState({alert: null})}\n                                             >\n                                                 Ücret Bordroları imzalanacak.\n                                             </SweetAlert>\n                                         )\n                                     });\n                                 else\n                                     this.setState({\n                                         alert: <HsmErrorAlert error={this.state.certError}\n                                                               onConfirm={() => this.setState({alert: null})}/>\n                                     });\n                             }}/>\n            </Nav>\n        );\n    }\n\n    renderState() {\n        let stateMap = this.stateMap[this.state.pageState];\n\n        return <div className=\"row\" style={{marginBottom: \"15px\"}}>\n            <Col sm={12}>\n                <div style={{display: \"inline-block\", marginRight: \"8px\"}}>\n                    {stateMap.wait && <ReactLoading type=\"balls\" color=\"#2c2c2c\" height={24} width={24}/>}\n                </div>\n                <div style={{\n                    display: \"inline-block\", marginRight: \"8px\", position: \"relative\", top: \"-6px\",\n                    color: stateMap.danger === true ? \"trueColor\" : \"falseColor\"\n                }}>\n                    {stateMap.label}\n                </div>\n            </Col>\n        </div>\n    }\n\n    renderBordroList() {\n        return <BordroTableIdSelected bordroSession={this.props.location.bordroSession}\n                                      selectedBordroIdList={this.props.location.selectedBordroIdList}\n                                      onComplete={e => this.setState({selectedBordroIdList: e})}\n                                      pageSize={10} history={this.props.history} peykName={this.props.peykName}\n                                      processCode={ProcessCode.SIGNBORDRO.code}/>\n    }\n\n    render() {\n\n        return (\n            <Row className=\"baseBackground\">\n                <Notify ref=\"notify\"/>\n                {this.state.alert}\n                {this.renderNavButtons()}\n                <div className=\"row satirBasi\">\n                    <Col md=\"12\">\n                        <Card className=\"card\">\n                            <CardHeader>\n                                <CardTitle tag=\"h4\">\n                                    Ücret Bordrosu İmzala\n                                </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderState()}\n                            </CardBody>\n                            <CardBody>\n                                {this.props.location.bordroSession &&\n                                <HsmCertificateViewer sessionId={this.props.location.bordroSession.id}\n                                                      value={this.state.pdfCertificate}\n                                                      onChange={(val) => this.setState({pdfCertificate: val})}\n                                                      pinValueChange={(val) => this.setState({pin: val})}\n                                                      certificateError={(val) => this.setState({certError: val})}\n                                                      pdfName={this.state.bordroName ? this.state.bordroName : \"\"}\n                                                      progressLength={this.state.progressLength}\n                                                      signedDocumentCount={this.state.signedDocumentCount}\n                                                      displayCertificateMenu={this.state.pageState === 0 || this.state.pageState === 40}\n                                                      userId={this.props.currentUser && this.props.currentUser.id}/>}\n                            </CardBody>\n                            <CardBody>\n                                {this.props.location.bordroSession && this.renderBordroList()}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </div>\n            </Row>\n\n        );\n    }\n\n}\n\nexport default SignBordroPage;\n"],"sourceRoot":""}