{"version":3,"sources":["accounting/kepik/formsession/MultiFormSessionEditPage.js"],"names":["MultiFormSessionEditPage","Component","constructor","props","super","videos","title","id","switchVideo","video","this","setState","showEczaciHelpModal","readAntets","self","requestK","url","method","then","response","letterList","value","label","concat","data","length","letterHeadList","catch","error","showAxiosError","handleDeleteTemplate","updatedTemplates","state","formTemplates","filter","template","isDecline","find","setTotalExtInputLenght","templates","size","map","formParams","JSON","parse","externalList","totalExtInputLenght","renderFormInputInfo","React","createElement","className","style","paddingLeft","fontWeight","display","textAlign","margin","renderInputList","extInputLabelList","index","Form","input","renderListInputs","Fragment","FormGroup","row","key","Label","sm","includes","replace","Col","Input","type","rows","name","formParamList","height","border","marginTop","padding","onChange","e","editHandleInputChange","backgroundColor","event","value1","target","toString","letter","match","renderPreview","preview","PdfViewer","scale","ReactLoading","width","fill","downloadPreview","originalContent","formTemplate","Object","assign","selectedAntet","item","antetId","undefined","formContent","encoded","TextEncoder","encode","chunkSize","binaryString","i","String","fromCharCode","apply","slice","btoa","selectedTemplateId","responseType","blob","Blob","headers","window","URL","webkitURL","createObjectURL","finally","renderMimeInputs","Container","Row","top","mimeTitle","mimeBody","renderFormTemplateInfo","isValid","totalParamList","keys","formEmployeeList","isValidEmployee","acceptAndPreviewFirstly","acceptAndPreview","Alert","info","position","effect","timeout","shouldExecute","forEach","values","Swal","text","cancelButtonText","confirmButtonText","showCancelButton","result","dismiss","history","push","pathname","peykName","formType","category","checkParametersAndSendForEmployees","alert","idList","params","disabledBtn","SweetAlert","warning","confirmBtnText","cancelBtnText","confirmBtnBsStyle","cancelBtnBsStyle","showCancel","onConfirm","acceptMultiTemplates","onCancel","disable","acceptOperation","formData","createUpdateFormData","append","timerStatus","waitCompletion","completionLoading","sessionId","sessionIds","selectedFormSessions","FormData","stringify","formParamListArray","removeAttachment","attachment","mergeToEmployee","conditionalList","declineList","fetchData","accessor","direction","page","tableLoading","searching","manual","total","totalElements","content","removeEmployeeList","newList","employeeId","splice","indexOf","clearAllEmployees","templateIds","joyrideActive","enteredParamsLenght","flag","shouldRun","showModal","isAnswerable","innerWidth","renderAccordionItem","bind","getTemplateIds","renderEmployeeListInfo","componentDidMount","location","getFormTemplates","AccordionItem","onClick","AccordionItemTitle","justifyContent","alignItems","formName","moment","updatedAt","split","format","color","marginLeft","stopPropagation","AccordionItemBody","status","onTimerStatus","columnList","Header","Cell","department","TextOverFlowTooltip","jobTitle","formSession","areFormsSent","sortable","disabled","columns","renewListForDepartment","data-toggle","bottom","right","Table","loading","options","marginRight","lineHeight","borderRadius","render","Nav","NavBarKS","offsetWidth","btnDisabled","selection","StickButton","fontSize","previousPage","formSessionId","CardHeader","CardTitle","tag","CardBody","Accordion","open","toggle","AddEmployeeModal","isOpen","selectedList","sidebarMenus","reload","close","completed","removeEmployee","decline"],"mappings":"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","file":"static/js/46.6940cfba.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Accordion, AccordionItem, AccordionItemBody, AccordionItemTitle} from \"react-accessible-accordion\";\nimport {CardBody, CardHeader, CardTitle, Col, Container, Form, FormGroup, Input, Label, Nav, Row} from \"reactstrap\";\nimport 'react-datetime/css/react-datetime.css';\nimport 'moment/locale/tr';\nimport NavBarKS from \"../../../components/NavBarKS\";\nimport StickButton from \"../../../components/StickButton\";\nimport {requestK} from \"../../../helper/APIUtils\";\nimport {showAxiosError} from \"../../../helper/helper\";\nimport TextOverFlowTooltip from \"../../../components/TextOverFlowTooltip\";\nimport {renewListForDepartment} from \"../common/PeykHelper\";\nimport Table from \"../../../components/Table/Table\";\nimport AddEmployeeModal from \"./component/AddEmployeeModal\";\nimport moment from \"moment\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport PdfViewer from \"../approval/PdfViewer/PdfViewer\";\nimport Alert from \"react-s-alert\";\nimport ReactLoading from \"react-loading\";\nimport Swal from \"sweetalert2\";\n\nclass MultiFormSessionEditPage extends Component {\n    videos = [\n        {title: \"form islemi duzenler\", id: \"lTjRaQZI4_Y\"},\n    ];\n    switchVideo = (video) => {\n        this.setState({video: video, showEczaciHelpModal: true})\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            alert: null,\n            templateIds: [],\n            preview: \"\",\n            selectedTemplateId: undefined,\n            formEmployeeList: [],\n            extInputLabelList: [],\n            conditionalList: [],\n            declineList: [],\n            letterHeadList: [],\n            sessionIds: [],\n            formParamList: {},\n            joyrideActive: false,\n            totalExtInputLenght: 0,\n            enteredParamsLenght: 0,\n            flag: 0,\n            page: 0,\n            size: 10,\n            total: 0,\n            content: [],\n            tableLoading: false,\n            manual: false,\n            shouldRun: true,\n            showModal: false,\n            formTemplates: [],\n            selectedAntet: {value: \"-1\", label: \"Antetsiz\"},\n            isAnswerable: {value: 0, label: \"SADECE ONAY\"},\n            width: window.innerWidth,\n            isDecline: false,\n        }\n\n        this.renderAccordionItem = this.renderAccordionItem.bind(this);\n        this.getTemplateIds = this.getTemplateIds.bind(this);\n        this.renderEmployeeListInfo = this.renderEmployeeListInfo.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.location.templateIds) {\n            this.getTemplateIds();\n            this.readAntets();\n        }\n    }\n\n    getTemplateIds() {\n        if (!!this.state.templateIds) {\n            this.setState({\n                templateIds: this.props.location.templateIds\n            }, () => this.getFormTemplates(this.state.templateIds))\n        }\n    }\n\n    readAntets = () => {\n        let self = this;\n        let paramsLetterHead = {\n            url: '/companyinfo/readCompanyLetterHead',\n            method: \"get\"\n        };\n        requestK(paramsLetterHead)\n            .then(function (response) {\n                let letterList = [{value: \"-1\", label: \"Antetsiz\"}];\n                letterList = letterList.concat(response.data);\n                if (!(letterList && letterList.length > 0))\n                    return;\n                self.setState({letterHeadList: letterList});\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    };\n\n    getFormTemplates(templateIds) {\n        requestK({url: `/formtemplate/readFormTemplates`, method: \"post\", data: templateIds})\n            .then(response => {\n                this.setState({formTemplates: response.data});\n                const data =  response.data.find(data => data.isDecline === 1) || 0;\n                this.setState({isDecline: data.isDecline})\n                this.setTotalExtInputLenght(response.data);\n            })\n            .catch(error => showAxiosError(error));\n    }\n\n    handleDeleteTemplate = (id) => {\n        const updatedTemplates = this.state.formTemplates.filter(template => template.id !== id);\n        const isDecline = updatedTemplates.find(template => template.isDecline === 1) ? 1 : 0;\n        this.setState({\n            formTemplates: updatedTemplates,\n            isDecline,\n        });\n    };\n\n    renderAccordionItem(template) {\n        return (\n            <AccordionItem key={template.id} onClick={() => this.downloadPreview(template)}\n                           id={'accordion-item-' + template.id}>\n                <AccordionItemTitle id={'accordion-item-title-' + template.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <div>\n                        <p>\n                            <strong>{\"Form Türü: \"}</strong>{template.formType.category}\n                            <br />\n                            <strong>{\"Form Adı: \"}</strong>{template.formName}\n                            <br />\n                            <strong>{\"Formun Son Güncellenme Tarihi: \"}</strong>\n                            {moment(template.updatedAt.replace(\"T\", \" \").split('.')[0]).format(\"DD-MM-YYYY HH:mm:ss\")}\n                            <br />\n                            <strong>{\"İşlem Yapısı: \"}</strong>\n                            {template.isAnswerable === 1\n                                ? (template.isDecline ? \"Cevap Zorunlu ve Reddedilebilir\" : \"Cevap Zorunlu\")\n                                : (template.isDecline ? \"Reddedilebilir\" : \"Sadece Onay\")}\n\n                            <br />\n                            {template.formParams && JSON.parse(template.formParams).externalList.length > 0 &&\n                                <font color=\"red\"><strong>{\"*Parametreli Form*\"}</strong></font>}\n                        </p>\n                    </div>\n                    <button\n                        className=\"btn btn-danger\"\n                        style={{ marginLeft: '20px' }}\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            this.handleDeleteTemplate(template.id);\n                        }}>\n                        Sil\n                    </button>\n                </AccordionItemTitle>\n                <AccordionItemBody id={'accordion-body-' + template.id}>\n                    <div className=\"col-sm-12\">\n                        {template.formParams && JSON.parse(template.formParams).externalList.length > 0 && this.renderFormInputInfo(template)}\n                        {this.renderPreview()}\n                    </div>\n                </AccordionItemBody>\n            </AccordionItem>\n        );\n    }\n\n    setTotalExtInputLenght = (templates) => {\n        let size = 0;\n        templates.map((template) => {\n            if (template.formParams && JSON.parse(template.formParams).externalList.length > 0) {\n                size += JSON.parse(template.formParams).externalList.length;\n            }\n        });\n        this.setState({totalExtInputLenght: size});\n    }\n\n    renderFormInputInfo = (template) => {\n        return (\n            <div className=\"row\" style={{paddingLeft: '20px'}}>\n                <div className=\"col-sm-12\">\n                    <label style={{fontWeight: 'bold', display: 'block', textAlign: 'center', margin: '0 20px 20px 0'}}>\n                        Giriş Yapılacak Veriler\n                    </label>\n                </div>\n                {this.renderInputList(template)}\n            </div>\n        );\n    };\n\n    renderInputList = (template) => {\n        let extInputLabelList = JSON.parse(template.formParams).externalList;\n        let index = 0;\n        return <Form className=\"col-sm-10\">\n            {extInputLabelList && extInputLabelList.map(input =>\n                this.renderListInputs(input, index++, template)\n            )}\n        </Form>\n    };\n\n    renderListInputs = (input, index, template) => {\n        return (\n            <>\n            <FormGroup row key={input}>\n                <Label\n                    sm={5}>{input.includes('span') ? input.replace(/span|<|>|b|[/]/g, \"\") + \":\" : input + \" :\"}</Label>\n                <Col sm={7}>\n                    {!(input.includes('Tarih_') || input.includes('Tarih')) &&\n                        <Input type=\"textarea\"\n                               rows={5}\n                               name={input}\n                               value={template.formParamList ? template.formParamList[input] : \"\"}\n                               style={{height: 'auto', border: '1px solid #E3E3E3', marginTop: '2px', padding: '3px 3px'}}\n                               onChange={(e) => this.editHandleInputChange(e, template)}/>\n                    }\n                    {(input.includes('Tarih_') || input.includes('Tarih')) &&\n                        <Input type=\"date\"\n                               name={input}\n                               value={template.formParamList ? template.formParamList[input] : \"\"}\n                               onChange={(e) => this.editHandleInputChange(e, template)}/>\n                    }\n                </Col>\n            </FormGroup>\n                <hr style={{ height: '3px', backgroundColor: '#E3E3E3', margin: '20px 0' }} />\n            </>\n        );\n    }\n\n    editHandleInputChange = (event, template) => {\n        let {formTemplates} = this.state\n        let find = formTemplates.find(value1 => value1.id === template.id);\n        const {name, value} = event.target;\n        if (name.toString().includes(\"AdSoyad\")) {\n            let letter = /^[a-zA-Z\\süÜğİşŞçÇöÖ]+$/;\n            if (value.match(letter) || value.length === 0) {\n                let formParamList = find.formParamList ? find.formParamList : {};\n                formParamList[name] = value;\n                find.formParamList = formParamList;\n            }\n        } else {\n            let formParamList = find.formParamList ? find.formParamList : {};\n            formParamList[name] = value;\n            find.formParamList = formParamList;\n        }\n        this.setState({formTemplates});\n    };\n\n    renderPreview = () => {\n        if (this.state.preview) {\n            return (\n                <PdfViewer\n                    url={this.state.preview}\n                    scale={0.7}\n                />\n            );\n        } else {\n            return (<ReactLoading type=\"spinningBubbles\"\n                                  style={{width: \"70px\", height: \"70px\", margin: \"20px auto 0 auto\", fill: \"#888\"}}/>)\n        }\n    };\n\n    downloadPreview = (template) => {\n        let self = this;\n        let formTemplate = Object.assign({}, template);\n        let selectedAntet = self.state.letterHeadList.find(item => item.value === template.antetId);\n        if (selectedAntet === undefined) {\n            formTemplate.antetId = -1;\n        } else {\n            formTemplate.antetId = selectedAntet.value;\n        }\n        let originalContent;\n        if (formTemplate.formContent) {\n            originalContent = formTemplate.formContent;\n            let encoded = new TextEncoder().encode(formTemplate.formContent);\n            let chunkSize = 1024;\n            let binaryString = \"\";\n            for (let i = 0; i < encoded.length; i += chunkSize) {\n                binaryString += String.fromCharCode.apply(null, encoded.slice(i, i + chunkSize));\n            }\n            formTemplate.formContent = btoa(binaryString);\n        }\n        if (formTemplate && formTemplate.id && (self.state.selectedTemplateId === undefined || formTemplate.id !== self.state.selectedTemplateId)) {\n            self.setState({selectedTemplateId: formTemplate.id})\n            requestK({\n                url: `/formtemplate/previewTemplateContent`,\n                responseType: 'arraybuffer',\n                method: \"post\",\n                data: formTemplate\n            }).then(function (response) {\n                let blob = new Blob([response.data], {type: response.headers[\"content-type\"]});\n                let urlCreator = window.URL || window.webkitURL;\n                let preview = urlCreator.createObjectURL(blob);\n                self.setState({preview});\n            }).catch(function (error) {\n                showAxiosError(error);\n            }).finally(function () {\n                if (originalContent !== undefined) {\n                    formTemplate.formContent = originalContent;\n                }\n            });\n        }\n    };\n\n    renderMimeInputs = () => {\n        return <Container>\n            <Row>\n                <Col sm={3} style={{top: '5px'}}>\n                    E-Posta İleti Konusu:\n                </Col>\n                <Col sm={8}>\n                    <Input type=\"textarea\" rows={3} value={this.state.mimeTitle}\n                           style={{height: 'auto', border: '1px solid #E3E3E3', marginTop: '2px', padding: '3px 3px'}}\n                           onChange={(e) => this.setState({mimeTitle: e.target.value})}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={3} style={{top: '25px'}}>\n                    E-Posta İleti İçeriği:\n                </Col>\n                <Col sm={8}>\n                    <Input type=\"textarea\" rows={6} value={this.state.mimeBody}\n                           style={{height: 'auto', border: '1px solid #E3E3E3', marginTop: '2px', padding: '3px 3px'}}\n                           onChange={(e) => this.setState({mimeBody: e.target.value})}/>\n                </Col>\n            </Row>\n        </Container>\n    };\n\n    renderFormTemplateInfo = () => {\n        return (\n            <div className=\"row\" style={{paddingLeft: '20px'}}>\n            </div>\n        );\n    };\n\n    isValid = (totalParamList) => {\n        return !(\n            (this.state.totalExtInputLenght > 0 &&\n                totalParamList !== this.state.totalExtInputLenght\n            )\n            || Object.keys(this.state.formEmployeeList).length === 0);\n    }\n\n    isValidEmployee = () => {\n        return !(Object.keys(this.state.formEmployeeList).length === 0);\n    }\n\n    acceptAndPreviewFirstly = () => {\n        if (!this.isValidEmployee()) {\n            if (this.state.formEmployeeList.length === 0) {\n                Alert.info(\"Çalışan seçimi yapılmalıdır.\", {\n                    position: 'top-right',\n                    effect: 'stackslide',\n                    timeout: 5000\n                });\n            }\n        }\n        else {\n            this.acceptAndPreview();\n        }\n    }\n\n    acceptAndPreview = () => {\n        let totalParamList = 0;\n        let shouldExecute = true;\n        this.state.formTemplates.forEach(value => {\n            totalParamList += value.formParamList ? Object.keys(value.formParamList).length : 0;\n        })\n        if (!this.isValid(totalParamList) || (Object.values(this.state.formParamList).includes(\"\"))) {\n            if (this.state.formParamList !== this.state.totalExtInputLenght || (Object.values(this.state.formParamList).includes(\"\"))) {\n                Swal({\n                    title: 'Uyarı! ',\n                    text: (\"Giriş Yapılacak Veriler alanında boş veri alanları bulunmakta, yine de form oluşturulsun mu?\"),\n                    cancelButtonText: \"Hayır\",\n                    confirmButtonText: 'Evet',\n                    showCancelButton: true,\n                }).then((result) => {\n                    if (result.dismiss === 'cancel' || result.dismiss === 'overlay') {\n                        this.props.history.push({pathname: `/${this.props.peykName}/formsend/multiCreate`});\n                    } else if (this.state.formEmployeeList.length === 0) {\n                        Alert.info(\"Çalışan seçimi yapılmalıdır.\", {\n                            position: 'top-right',\n                            effect: 'stackslide',\n                            timeout: 5000\n                        });\n                    } else {\n                        this.state.formTemplates.forEach(formTemplate => {\n                            if(formTemplate.formType.category ==='ŞABLONSUZ TASLAK' && shouldExecute){\n                                Alert.error(\"Şablonsuz Taslak için toplu gönderim yapılamaz.\", {\n                                    position: 'top-right',\n                                    effect: 'stackslide',\n                                    timeout: 5000\n                                });\n                                shouldExecute = false;\n                            }\n                        })\n                        if (shouldExecute) {\n                            this.checkParametersAndSendForEmployees(this.state.formTemplates);\n                        }\n                    }\n                });\n            }\n            if (this.state.formEmployeeList.length === 0) {\n                Alert.info(\"Çalışan seçimi yapılmalıdır.\", {\n                    position: 'top-right',\n                    effect: 'stackslide',\n                    timeout: 5000\n                });\n            }\n        } else {\n            this.state.formTemplates.forEach(formTemplate => {\n                if(formTemplate.formType.category ==='ŞABLONSUZ TASLAK' && shouldExecute){\n                    Alert.error(\"Şablonsuz Taslak için toplu gönderim yapılamaz.\", {\n                        position: 'top-right',\n                        effect: 'stackslide',\n                        timeout: 5000\n                    });\n                    shouldExecute = false;\n                }\n            })\n            if (shouldExecute) {\n                this.checkParametersAndSendForEmployees(this.state.formTemplates);\n            }\n        }\n    };\n\n    checkParametersAndSendForEmployees = (formTemplates) => {\n        this.setState({alert: null});\n        let data = {};\n        data.formTemplates = formTemplates.map(formTemplate => formTemplate.id);\n        data.idList = this.state.formEmployeeList;\n        let params = {\n            url: '/employee/checkMultiTemplateParameters',\n            method: \"post\",\n            data: data\n        };\n        this.setState({disabledBtn: true});\n        requestK(params)\n            .then(response => {\n                if (response.data && !!response.data.length) {\n                    this.setState({disabledBtn: false});\n                    this.setState({\n                        alert: (\n                            <SweetAlert warning\n                                        confirmBtnText=\"Onayla\"\n                                        cancelBtnText=\"İptal\"\n                                        confirmBtnBsStyle=\"primary\"\n                                        cancelBtnBsStyle=\"error\"\n                                        title=\"Eksik Parametre Verisi\"\n                                        showCancel\n                                        onConfirm={() => {\n                                            this.setState({alert: null}, () => this.acceptMultiTemplates(formTemplates));\n                                        }}\n                                        onCancel={() => this.setState({alert: null})}>\n                                <div>\n                                    <label>{\"Form şablonları için listenizde verisi eksik olan çalışanlar vardır. Aşağıda listelenmiştir. Eksik veri olmasına rağmen yine de onaylansın mı?\"}</label>\n                                    <Input type=\"textarea\" rows={10}\n                                           style={{height: '200px', border: '1px solid #E3E3E3', marginTop: '2px'}}\n                                           value={response.data}\n                                           disable={true}/>\n                                </div>\n                            </SweetAlert>\n                        )\n                    });\n                } else {\n                    this.acceptMultiTemplates(formTemplates);\n                }\n            })\n            .catch(error => {\n                this.setState({disabledBtn: false});\n                showAxiosError(error);\n            });\n    }\n\n    acceptMultiTemplates = (formTemplates) => {\n        formTemplates.forEach(formTemplate => {\n            this.acceptOperation(formTemplate);\n        });\n    }\n\n    timerStatus(status){\n        this.props.onTimerStatus(status);\n    };\n\n    acceptOperation = (formTemplate) => {\n        this.setState({alert: null});\n        if ((formTemplate.mimeTitle && formTemplate.mimeTitle.toString().includes(\"{\"))\n            || (formTemplate.mimeBody && formTemplate.mimeBody.toString().includes(\"{\"))) {\n            Alert.error(\"E-posta içerik alanında parametre verisi veya '{' karakteri bulunmamalıdır. \" +\n                \"Tüm e-posta gönderimleri otomatik olarak 'Sayın {ÇalışanAdSoyad} şablonu ile gitmektedir.'\", {\n                position: 'top-right',\n                effect: 'stackslide',\n                timeout: 15000\n            });\n            this.setState({disabledBtn: false});\n        } else {\n            let params;\n            let formData = this.createUpdateFormData(formTemplate);\n            formData.append(\"formTemplateId\", formTemplate.id);\n            params = {\n                url: `/formsession/createFormSession`,\n                method: \"post\",\n                data: formData\n            };\n            this.setState({disabledBtn: true});\n            this.timerStatus(true);\n            requestK(params)\n                .then(response => {\n                    this.waitCompletion(response.data);\n                }).catch(error => {\n                showAxiosError(error);\n                this.setState({disabledBtn: false, completionLoading: false});\n                this.timerStatus(false);\n            });\n        }\n    };\n\n    waitCompletion = (sessionId) => {\n        let self = this;\n        if (!self.state.sessionIds.includes(sessionId)) {\n            self.state.sessionIds.push(sessionId);\n        }\n        let params = {\n            url: '/formsession/waitIfCompletionOK',\n            method: \"post\",\n            data: sessionId\n        };\n        this.timerStatus(true);\n        self.setState({completionLoading: true});\n        requestK(params)\n            .then(function (response) {\n                if (response.data) {\n                    self.setState({completionLoading: false, disabledBtn: false});\n                    Alert.info(\"Yükleme tamamlandı.\", {\n                        position: 'top-right',\n                        effect: 'stackslide',\n                        timeout: 10000\n                    });\n                    self.props.history.push({\n                        pathname: `/${self.props.peykName}/multiSessionForms`,\n                        selectedFormSessions: self.state.sessionIds,\n                        });\n                    self.timerStatus(false);\n                } else {\n                    self.waitCompletion(sessionId);\n                }\n            })\n            .catch(function (error) {\n                self.setState({completionLoading: false, disabledBtn: false});\n                showAxiosError(error);\n                this.timerStatus(false);\n            });\n    };\n\n    createUpdateFormData = (formTemplate) => {\n        let formData = new FormData();\n        if(formTemplate.formParamList === undefined || formTemplate.formParamList === null || Object.keys(formTemplate.formParamList).length === 0 ){\n            if(formTemplate.formParams !== \"\"){\n            let formParamList = {};\n            for (let i = 0; i < JSON.parse(formTemplate.formParams).externalList.length; i++) {\n                formParamList[JSON.parse(formTemplate.formParams).externalList[i]] = \"\";\n            }\n            formData.append(\"formParamList\", JSON.stringify(formParamList));}\n            else {\n                formData.append(\"formParamList\", !!formTemplate.formParamList ? JSON.stringify(formTemplate.formParamList) : JSON.stringify({}));\n            }\n        }\n        else if (Object.keys(formTemplate.formParamList).length !== 0 && Object.keys(formTemplate.formParamList).length !== JSON.parse(formTemplate.formParams).externalList.length ) {\n            let formParamList = formTemplate.formParamList;\n            let formParamListArray = Object.keys(formTemplate.formParamList);\n            let extInputLabelList = JSON.parse(formTemplate.formParams).externalList;\n            extInputLabelList.forEach(value => {\n                if (!formParamListArray.includes(value)) {\n                    formParamList[value] = \"\";\n                }\n            })\n            formData.append(\"formParamList\", !!formTemplate.formParamList ? JSON.stringify(formParamList) : JSON.stringify({}));\n        } else {\n            formData.append(\"formParamList\", !!formTemplate.formParamList ? JSON.stringify(formTemplate.formParamList) : JSON.stringify({}));\n        }\n        // formData.append(\"formParamList\", !!formTemplate.formParamList ? JSON.stringify(formTemplate.formParamList) : JSON.stringify({}));\n        formData.append(\"formEmployeeList\", this.state.formEmployeeList);\n        formData.append(\"mimeTitle\", this.state.mimeTitle ? this.state.mimeTitle : \"\");\n        formData.append(\"mimeBody\", this.state.mimeBody ? this.state.mimeBody : \"\");\n        formData.append(\"removeAttachment\", formTemplate.removeAttachment ? formTemplate.removeAttachment : false);\n        formData.append(\"attachment\", formTemplate.attachment);\n        formData.append(\"mergeToEmployee\", formTemplate.mergeToEmployee ? formTemplate.mergeToEmployee : false);\n        formData.append(\"conditionalList\", this.state.conditionalList);\n        formData.append(\"declineList\", formTemplate.isDecline ? this.state.declineList : []);\n        return formData;\n    };\n\n    fetchData = (accessor, direction, page, size) => {\n        let self = this;\n        let sortStr = accessor !== undefined ? ('&sort=' + accessor + ',' + direction) : '';\n        let params = {\n            url: '/employee/getEmployeeList?page=' + page + '&size=' + size + sortStr,\n            method: \"post\",\n            data: self.state.formEmployeeList\n        };\n        self.setState({tableLoading: true, searching: true, manual: self.manual === true ? false : self.manual});\n        requestK(params)\n            .then(function (response) {\n                self.setState({\n                    page: page,\n                    size: size,\n                    total: response.data.totalElements,\n                    content: response.data.content,\n                    tableLoading: false,\n                    searching: false\n                });\n            }).catch(function (error) {\n            self.setState({tableLoading: false, searching: false});\n            showAxiosError(error);\n        });\n    };\n\n    removeEmployeeList = (row) => {\n        let newList = [];\n        this.state.formEmployeeList && this.state.formEmployeeList.map(employeeId => {\n            if (employeeId !== row.id) {\n                newList.push(employeeId);\n            }\n        });\n        let conditionalList = this.state.conditionalList;\n        conditionalList.splice(conditionalList.indexOf(row.id), 1);\n        let declineList = this.state.declineList;\n        declineList.splice(declineList.indexOf(row.id), 1);\n        this.setState({formEmployeeList: newList, manual: true, conditionalList, declineList});\n    };\n\n    clearAllEmployees = () => {\n        let conditionalList = this.state.conditionalList;\n        let declineList = this.state.declineList;\n        this.state.formEmployeeList && this.state.formEmployeeList.map(employeeId => {\n            conditionalList.splice(conditionalList.indexOf(employeeId), 1);\n            declineList.splice(declineList.indexOf(employeeId), 1);\n        });\n        this.setState({formEmployeeList: []});\n    };\n\n    renderEmployeeListInfo() {\n        let columnList = [\n\n            {\n                Header: \"Adı\",\n                accessor: \"name\"\n            },\n            {\n                Header: \"Soyadı\",\n                accessor: \"surname\"\n            },\n            {\n                accessor: [\n                    {Header: \"Departman\", accessor: \"department\"},\n                    {Header: \"Görev\", accessor: \"jobTitle\"}\n                ],\n                Cell: row => (\n                    <div style={{margin: 0}}>\n                        {row.department && <TextOverFlowTooltip text={row.department.name}/>}\n                        {row.department && <br/>}\n                        <TextOverFlowTooltip text={row.jobTitle}/>\n                    </div>\n                )\n            },\n            {\n                Header: \"TCKN\",\n                accessor: \"tckn\"\n            }\n        ];\n        if (!this.state.formSession || !this.state.formSession.areFormsSent) {\n            columnList.push(\n                {\n                    Header: \"İşlemler\",\n                    accessor: \"\",\n                    sortable: false,\n                    Cell: row => (\n                        <div style={{textAlign: 'left'}}>\n                            <button title=\"Çalışanı Kaldır\" className=\"btn-icon btn btn-danger btn-sm\"\n                                    disabled={this.state.disabledBtn}\n                                    style={{margin: '0px 3px'}}\n                                    onClick={() => this.removeEmployeeList(row)}>\n                                <i className=\"now-ui-icons ui-1_simple-remove\"/>\n                            </button>\n                        </div>\n                    ),\n                    width: '35px'\n                }\n            );\n        }\n        let columns = renewListForDepartment(this, columnList, \"accessor\");\n\n        return (\n            <div className=\"row col-sm-12\" style={{display: 'inline-block'}}>\n                <div className=\"col-sm-12\">\n                    <label style={{fontWeight: 'bold', display: 'block', textAlign: 'center', margin: '0 20px 20px 0'}}>\n                        Seçilen Çalışanlar\n                    </label>\n                </div>\n                {this.state.formEmployeeList && this.state.formEmployeeList.length > 0 &&\n                    <div style={{padding: '10px'}}>\n                        <div id='clearAllContainer' style={{position: 'relative'}}>\n                            <button id='clearAllEmployess' className='simpleButton trash'\n                                    data-toggle='toggle'\n                                    title='Hepsini Sil'\n                                    style={{\n                                        position: 'absolute',\n                                        bottom: '5px',\n                                        right: '10px'\n                                    }}\n                                    onClick={() => this.clearAllEmployees()}\n                            />\n                        </div>\n                        <Table columns={columns}\n                               content={this.state.content}\n                               loading={this.state.tableLoading}\n                               total={this.state.total}\n                               page={this.state.page}\n                               manual={this.state.manual}\n                               size={this.state.size}\n                               options={[\"5\", \"10\", \"20\", \"50\", \"100\"]}\n                               fetchData={this.fetchData}/>\n                    </div>}\n                {!(this.state.formEmployeeList && this.state.formEmployeeList.length > 0) &&\n                    <div className=\"col-sm-12\"\n                         style={{display: 'inline-block', textAlign: '-webkit-center', marginLeft: '-5px'}}>\n                        <label style={{\n                            display: 'table-caption', marginRight: '70px', lineHeight: '27px',\n                            border: 'dashed 1.2px #bbb', borderRadius: '12px', height: '30px', width: '220px'\n                        }}\n                               onClick={() => this.setState({showModal: true})}>\n                            Lütfen çalışan seçimi yapınız.\n                        </label>\n                    </div>}\n            </div>\n        );\n    };\n\n    render() {\n        return (<div className=\"row baseBackground\">\n            {this.state.alert}\n            <Nav className=\"topbar\" style={{paddingLeft: '14px', height: '53px'}}>\n                <NavBarKS offsetWidth={this.props.offsetWidth} innerWidth={window.innerWidth}\n                          btnDisabled={this.state.btnDisabled}\n                          selection={this.state.selection} name='archiveInvoiceList'>\n                    <StickButton position=\"leftSide\" className=\"zocial GeriDon\" style={{fontSize: 'x-small'}}\n                                 label=\"Geri\" title=\"Önceki Sayfaya Git\"\n                                 disabled={this.state.disabledBtn}\n                                 onClick={() => {\n                                     if (this.props.location.previousPage === \"formsession\" && this.props.match && this.props.match.params) {\n                                         this.props.history.push({pathname: `/${this.props.peykName}/formsession/${this.props.match.params.formSessionId}`});\n                                     } else {\n                                         this.props.history.push({pathname: `/${this.props.peykName}/formsend`});\n                                     }\n                                 }}/>\n                    <StickButton position=\"leftSide\" className=\"zocial User\" style={{fontSize: 'x-small'}}\n                                 label=\"Çalışan Ekle\" title=\"Çalışanları Ekle\"\n                                 disabled={this.state.disabledBtn}\n                                 onClick={() => this.setState({showModal: true})}/>\n                    <StickButton position=\"leftSide\" className=\"zocial Onay\"\n                                 style={{fontSize: 'x-small', backgroundColor: 'forestgreen'}}\n                                 label=\"Onayla\" title=\"Bilgileri onayla\"\n                                 disabled={this.state.disabledBtn || this.state.formTemplates.length===0}\n                                 onClick={this.acceptAndPreviewFirstly}/>\n                </NavBarKS>\n            </Nav>\n            {!this.state.completionLoading &&\n                <CardHeader style={{marginTop: \"56px\"}}>\n                    <CardTitle tag=\"h4\">\n                        Çoklu Form Gönderimi\n                    </CardTitle>\n                    <CardBody>\n                        <label style={{color: 'grey'}}>\n                            Seçmiş olduğunuz form şablonları için seçeceğiniz çalışanlara form oluşturma işlemini bu\n                            sayfadan gerçekleştirebilirsiniz.\n                        </label>\n                    </CardBody>\n                </CardHeader>}\n            {this.state.completionLoading &&\n                <CardHeader style={{marginTop: \"56px\"}}>\n                    <CardTitle tag=\"h4\">\n                        Çoklu Form Gönderimi (Düzenle)...YÜKLENİYOR&nbsp;\n                    </CardTitle>\n                </CardHeader>}\n            <CardBody>\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        {this.renderFormTemplateInfo()}\n                    </div>\n                </div>\n                <div className=\"row\" style={{marginTop: '20px'}}>\n                    <div className=\"col-sm-6\">\n                        <Accordion open=\"close\" toggle=\"toggle\">\n                            {this.state.formTemplates && this.state.formTemplates.length > 0 && this.state.formTemplates.map((template) => {\n                                return this.renderAccordionItem(template);\n                            })}\n                        </Accordion>\n                    </div>\n                    <div className=\"col-sm-6\">\n                        <div className=\"FormRenk col-sm-12\">\n                            {this.renderEmployeeListInfo()}\n                        </div>\n                    </div>\n                </div>\n            </CardBody>\n            {this.state.showModal &&\n                <AddEmployeeModal\n                    isOpen={this.state.showModal}\n                    selectedList={this.state.formEmployeeList}\n                    sidebarMenus={this.props.sidebarMenus}\n                    reload={e => this.props.reload(e)}\n                    close={() => this.setState({showModal: false})}\n                    conditionalList={this.state.conditionalList}\n                    declineList={this.state.declineList}\n                    completed={(formEmployeeList, conditionalList, declineList) =>\n                        this.setState({formEmployeeList, conditionalList, declineList, manual: true, showModal: false})}\n                    removeEmployee={() => this.removeEmployee}\n                    decline={this.state.isDecline}\n                />}\n        </div>)\n    }\n\n}\n\nexport default MultiFormSessionEditPage;"],"sourceRoot":""}