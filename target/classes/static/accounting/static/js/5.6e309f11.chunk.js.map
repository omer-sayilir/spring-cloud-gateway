{"version":3,"sources":["components/AutoCompleteList.js","accounting/kepik/employee/component/CreateEditEmployeeModal.js"],"names":["AutoCompleteList","Component","constructor","props","super","formatCreateLabelCreator","value","this","allowNew","name","state","changeLabel","bind","createLabel","checkUpperCase","generateOptions","onChange","list","length","newValue","onlyLabel","label","push","updateList","i","valueCheck","text","useUpperCase","toString","replace","toUpperCase","options","map","e","render","React","createElement","Select","Creatable","clearable","multi","className","id","placeholder","promptTextCreator","noResultsText","onNewOptionClick","defaultProps","CreateEditEmployeeModal","getEmployeeInfo","self","setState","loading","requestK","url","method","then","response","departmentList","expenditureDepList","ntfTypeList","data","catch","error","showAxiosError","finally","getGroupList","groupList","group","getEmployee","getJobTitles","params","jobTitles","readCustomFields","Object","keys","customFields","handleChangeCustomFields","type","target","intFormat","match","doubleFormat","substring","indexOf","handleChangeCustomDoubleFields","isNaN","parseFloat","split","join","handleChangeCustomDateTimeFields","moment","isValid","dateValidation","format","handleBooleanFields","checked","generateJobTitle","employee","jobTitle","handleSaveClick","setDepartmentInfo","isPhoneNumberValid","telephone","Alert","warning","isTCValid","tckn","isBildTuruSelected","employeeNotificationTypeList","isEmailSelected","email","trim","isDepartmanSelected","department","isLoading","isDisabled","saveClicked","getEmployeeGroupList","selectedGroupList","employeeGroups","employeeGroup","selectedEmpGroupList","hasGrant","grant","handleChange","validateClass","getNtfTypeList","onManagerChange","onSecondManagerChange","onThirdManagerChange","onDepartmentChange","handleChangeDouble","handleChangeInteger","onChangeNtfTypeList","handleSalaryDouble","isNumeric","onChangeOnJobTitle","getTelephoneNumber","validateField","validateMessage","rule","dataset","vdata","boundary","vlength","turkishCharacterPattern","result","assign","undefined","message","expenditureDepartment","integrationCode","conformToMask","guide","conformedValue","componentWillMount","isDepartmentMandatory","componentDidMount","statusType","isCandidate","manager","secondManager","thirdManager","getDepartmentElement","expenditureDep","getExpenditureElement","letter","btnDisabled","str","valid","validateEmail","position","effect","timeout","html","notificationTypeList","Array","isArray","some","item","ntfType","longCode","phone","setExpenditureDepInfo","isValidEmployee","errorMessage","departmentMandatory","kepAddressUnique","isKepAddressUnique","JSON","stringify","success","checkIfRegistryManual","toggleModal","parseInt","recordId","parse","onChangeGroupList","forEach","selected","_employee$employeeGro","existEmpGroup","find","empGroup","onExpenditureDepChange","dept","alert","SweetAlert","confirmBtnText","confirmBtnBsStyle","title","onConfirm","DefaultModal","isOpen","modal","fade","size","closeOnEsc","Fragment","confirmButtonStyle","cursor","opacity","cancelBtnText","onCancel","style","marginTop","Form","marginBottom","paddingLeft","paddingRight","fontWeight","display","renderInput","renderInputInteger","FormGroup","row","Label","sm","Col","Async","ignoreAccents","autoload","cache","filterOptions","searchPromptText","loadingPlaceholder","clearValueText","loadOptions","getEmployees","disabled","ReactLoading","width","height","margin","fill","isKepOwner","MaskedInput","mask","textAlign","filter","v","includes","emailMask","inputProps","ref","onBlur","UncontrolledTooltip","placement","delay","statusTypeSetData","employmentContract","employmentContractData","SEE_SALARY_DATA","NumberFormat","isNumericString","salary","onValueChange","suffix","thousandSeparator","decimalSeparator","displayType","allowNegative","decimalScale","Input","vip","Datetime","locale","input","closeOnSelect","passiveEndDate","isValidDate","current","startOf","isAfter","dateFormat","timeFormat","reason","statusReasonData","Row","fontSize","employmentStartDate","renderInputSmaller","renderInputSmallerDouble","gender","genderData","dateOfBirth","titleList","renderCustomFields","prevKey","key","index","renderCustomInputSmaller","fieldName","maxLength","readOnly","arguments","check","customFieldsBooleanControl","onClick"],"mappings":"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","file":"static/js/5.6e309f11.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Select from \"../local_node_modules/react-select\"\n\nclass AutoCompleteList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.changeLabel = this.changeLabel.bind(this);\n        this.createLabel = this.createLabel.bind(this);\n        this.checkUpperCase = this.checkUpperCase.bind(this);\n        this.generateOptions = this.generateOptions.bind(this);\n    }\n\n    changeLabel(value) {\n        this.props.onChange(this.checkUpperCase(value));\n    }\n\n    createLabel(value) {\n        if (this.props.allowNew) {\n            let list = this.props.list;\n            if (list.length === 0) {\n                let newValue;\n                if (!this.props.onlyLabel) {\n                    newValue = {value: \"0\", label: this.checkUpperCase(value.label)};\n                } else {\n                    newValue = {value: this.checkUpperCase(value.label), label: this.checkUpperCase(value.label)};\n                }\n                list.push(newValue);\n                this.props.updateList(list);\n                this.changeLabel(newValue);\n            } else {\n                let i = list.length - 1;\n                let valueCheck = list[i];\n                if (!this.props.onlyLabel) {\n                    if (valueCheck.value === \"0\") {\n                        list[i].label = this.checkUpperCase(value.label);\n                        this.props.updateList(list);\n                        this.changeLabel(list[i]);\n                    } else {\n                        let newValue = {value: \"0\", label: this.checkUpperCase(value.label)};\n                        list.push(newValue);\n                        this.props.updateList(list);\n                        this.changeLabel(newValue);\n                    }\n                } else {\n                    if (valueCheck.value === this.checkUpperCase(value.label)) {\n                        list[i].label = this.checkUpperCase(value.label);\n                        this.props.updateList(list);\n                        this.changeLabel(list[i]);\n                    } else {\n                        let newValue = {\n                            value: this.checkUpperCase(value.label),\n                            label: this.checkUpperCase(value.label)\n                        };\n                        list.push(newValue);\n                        this.props.updateList(list);\n                        this.changeLabel(newValue);\n                    }\n                }\n            }\n        }\n    }\n\n    checkUpperCase(text) {\n        if (text && this.props.useUpperCase) {\n            if (text.value != null && text.label) {\n                text.label = text.label.toString().replace(\"i\", \"İ\").toUpperCase();\n            } else {\n                text = text.toString().replace(\"i\", \"İ\").toUpperCase();\n            }\n        }\n        return text;\n    }\n\n    generateOptions() {\n        let options = [];\n        this.props.list &&\n        this.props.list.length > 0 &&\n        this.props.list.map(e => {\n            options.push({value: e.value, label: this.checkUpperCase(e.label)})\n        });\n        return options;\n    }\n\n    formatCreateLabelCreator = (value) => {\n        if (this.props.allowNew)\n            return 'Ekle \"' + value + '\"';\n        else\n            return 'Lütfen, var olan bir ' + this.props.name + ' seçimi yapınız.'\n    };\n\n    render() {\n        let options = this.generateOptions();\n        return (\n            <Select.Creatable\n                clearable={false}\n                multi={false}\n                className=\"select-control\"\n                name=\"autoCompleteList\"\n                id=\"autoCompleteList\"\n                value={this.props.value}\n                placeholder={this.props.placeholder}\n                promptTextCreator={this.formatCreateLabelCreator}\n                noResultsText={\"Henüz kaydedilmiş veri yok\"}\n                onChange={(e) => this.changeLabel(e)}\n                onNewOptionClick={(e) => this.createLabel(e)}\n                options={options}\n            />\n        );\n    }\n}\n\nAutoCompleteList.defaultProps = {\n  allowNew: true,\n  useUpperCase: false,\n  onlyLabel: false,\n  updateList: (list) => {}\n};\nexport default AutoCompleteList;\n","import React, {Component} from 'react';\nimport {customFieldsBooleanControl, showAxiosError} from \"../../../../helper/helper\";\nimport {requestK} from \"../../../../helper/APIUtils\";\nimport DefaultModal from \"../../../../components/DefaultModal\";\nimport Alert from \"react-s-alert\";\nimport {isValidEmployee} from \"../../../../common/componentValidation\";\nimport MaskedInput, {conformToMask} from \"react-text-mask\";\nimport {\n    employmentContractData,\n    genderData,\n    getEmployees,\n    isDepartmentMandatory,\n    isKepAddressUnique,\n    statusReasonData,\n    statusTypeSetData\n} from \"../../common/PeykHelper\";\nimport {Col, Form, FormGroup, Input, Label, Row, UncontrolledTooltip} from \"reactstrap\";\nimport Select from \"../../../../local_node_modules/react-select\";\nimport moment from \"moment/moment\";\nimport Datetime from \"react-datetime\";\nimport AutoCompleteList from \"../../../../components/AutoCompleteList\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport NumberFormat from 'react-number-format';\nimport {SEE_SALARY_DATA} from \"../../../../common/authorities/GrantDef\";\nimport emailMask from \"text-mask-addons/dist/emailMask\";\nimport {validateField} from \"../../../../common/validation\";\nimport ReactLoading from \"react-loading\";\n\nclass CreateEditEmployeeModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            employee: {},\n            error: {},\n            departmentList: [],\n            expenditureDepList: [],\n            ntfTypeList: [],\n            customFields: {},\n            dateValidation: true,\n            groupList: [],\n            selectedGroupList: [],\n            selectedEmpGroupList: [],\n            jobTitles: [],\n            jobTitle: {value: \"\", label: \"\"},\n            isLoading: false,\n            isDisabled: false,\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.saveClicked = this.saveClicked.bind(this);\n        this.validateClass = this.validateClass.bind(this);\n        this.getNtfTypeList = this.getNtfTypeList.bind(this);\n        this.onManagerChange = this.onManagerChange.bind(this);\n        this.onSecondManagerChange = this.onSecondManagerChange.bind(this);\n        this.onThirdManagerChange = this.onThirdManagerChange.bind(this);\n        this.onDepartmentChange = this.onDepartmentChange.bind(this);\n        this.handleChangeDouble = this.handleChangeDouble.bind(this);\n        this.handleChangeInteger = this.handleChangeInteger.bind(this);\n        this.onChangeNtfTypeList = this.onChangeNtfTypeList.bind(this);\n        this.handleSalaryDouble = this.handleSalaryDouble.bind(this);\n        this.getEmployeeGroupList = this.getEmployeeGroupList.bind(this);\n        this.getEmployee = this.getEmployee.bind(this);\n        this.isNumeric = this.isNumeric.bind(this);\n        this.onChangeOnJobTitle = this.onChangeOnJobTitle.bind(this);\n        CreateEditEmployeeModal.getTelephoneNumber = CreateEditEmployeeModal.getTelephoneNumber.bind(this);\n        this.validateField = this.validateField.bind(this);\n        this.validateMessage = this.validateMessage.bind(this);\n    }\n\n    validateField(e) {\n        let { name, value } = e.target;\n        let id = e.target.id;\n        let rule = e.target.dataset.vdata;\n        let boundary = e.target.dataset.vlength;\n        const turkishCharacterPattern = /[şŞıİçÇöÖüÜĞğ]/g;\n        if (name === \"email\") {\n            if (value.match(turkishCharacterPattern)) {\n                return;\n            }\n        }\n        let result = validateField(rule, boundary, value);\n        let error = this.state.error;\n        error = Object.assign(error, {[id]: result});\n        this.setState({error});\n    }\n\n    validateMessage(id) {\n        let error = this.state.error;\n        return (error[id] === undefined ? '' : (error[id].message));\n    }\n\n    static getDepartmentElement(data) {\n        if (data.department) {\n            return {value: data.department.id.toString(), label: data.department.name};\n        } else {\n            return null;\n        }\n    }\n\n    static getExpenditureElement(data) {\n        if (data.expenditureDepartment) {\n            return {\n                value: data.expenditureDepartment.id.toString(),\n                label: data.expenditureDepartment.name + \"-(\" + data.expenditureDepartment.integrationCode + \")\"\n            };\n        } else {\n            return null;\n        }\n    }\n\n    static getTelephoneNumber(telephone) {\n        let phoneNumberMask = ['0', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n        let conformedPhoneNumber = conformToMask(\n            telephone,\n            phoneNumberMask,\n            {guide: false}\n        );\n        return conformedPhoneNumber.conformedValue;\n    }\n\n    componentWillMount() {\n        if (isDepartmentMandatory(this)) {\n            this.getEmployeeInfo();\n        }\n        if (!!this.props.id) {\n            this.readCustomFields();\n        }\n    }\n\n    getEmployeeInfo = () => {\n        let self = this;\n        let params = {\n            url: '/employee/getList',\n            method: \"get\",\n        };\n        self.setState({loading: true});\n        requestK(params)\n            .then(function (response) {\n                let {departmentList, expenditureDepList, ntfTypeList} = response.data;\n                self.setState({departmentList, ntfTypeList, expenditureDepList, loading: false});\n            }).catch(function (error) {\n            showAxiosError(error);\n        })\n            .finally(function () {\n                self.setState({ loading: false });\n            });\n    };\n\n    getGroupList = () => {\n        let self = this;\n        let params = {\n            url: '/employee/getGroups',\n            method: \"get\"\n        };\n        requestK(params)\n            .then(function (response) {\n                let groupList = [];\n                response.data.map((group) => {\n                    groupList.push({value: group.id, label: group.name, group: group})\n                });\n                self.setState({groupList});\n                self.getEmployee();\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    }\n\n    getJobTitles = () => {\n        let self = this;\n        let params = {\n            url: `/job/titles`,\n            method: \"get\"\n        };\n        requestK(params)\n            .then(function (response) {\n                let jobTitles = response.data;\n                self.setState({jobTitles});\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    };\n\n    readCustomFields = () => {\n        let self = this;\n        let params = {\n            url: `/employeecustom/readCustomFields`,\n            method: \"post\",\n            data: self.props.id\n        };\n        requestK(params)\n            .then(function (response) {\n                if (response.data && Object.keys(response.data) && Object.keys(response.data).length) {\n                    self.setState({customFields: response.data});\n                }\n            })\n            .catch(function (error) {\n            });\n    };\n\n    componentDidMount() {\n        let self = this;\n        self.getGroupList();\n        self.getJobTitles();\n    }\n\n    getEmployee() {\n        let self = this;\n        let params = {\n            url: `/employee/getEmployeeById`,\n            method: \"post\",\n            data: self.props.id ? self.props.id : -1\n        };\n        requestK(params)\n            .then(function (response) {\n                if (!response.data.id && self.props.tckn) {\n                    response.data.tckn = self.props.tckn;\n                }\n                let employee = response.data;\n                if (!self.props.id) {\n                    employee.statusType = self.props.isCandidate ? \"CANDIDATE\" : \"ACTIVE\";\n                }\n                self.setState({\n                    employee,\n                    jobTitle: {value: 1, label: employee.jobTitle},\n                    manager: response.data.manager,\n                    secondManager: response.data.secondManager,\n                    thirdManager: response.data.thirdManager,\n                    department: CreateEditEmployeeModal.getDepartmentElement(response.data),\n                    expenditureDep: CreateEditEmployeeModal.getExpenditureElement(response.data)\n                });\n                self.getEmployeeGroupList();\n            }).catch(function (error) {\n            showAxiosError(error);\n        });\n    }\n\n    handleChange(e) {\n        let { name, value, type } = e.target;\n\n        if (name === \"name\" || name === \"surname\") {\n            let letter = /^[a-zA-Z\\süÜığĞİşŞçÇöÖ]+$/;\n            if (value.match(letter) || value.length === 0) {\n                let employee = this.state.employee;\n                employee[name] = value;\n                this.setState({ employee });\n            }\n        } else if (name === \"email\") {\n            const turkishCharacterPattern = /[şŞıİçÇöÖüÜĞğ]/g;\n            let employee = this.state.employee;\n            employee[name] = value;\n            this.setState({ employee });\n\n            if (value.match(turkishCharacterPattern)) {\n                this.setState({ btnDisabled: true });\n            } else {\n                this.setState({ btnDisabled: false });\n            }\n        } else if (name === 'statusType') {\n            let employee = this.state.employee;\n            if (value !== \"PASSIVE\") {\n                employee[\"passiveEndDate\"] = null;\n                employee[\"reason\"] = null;\n            }\n            employee[name] = value;\n            this.setState({ employee });\n        } else {\n            if (type === 'checkbox')\n                value = e.target.checked;\n\n            let employee = this.state.employee;\n            employee[name] = value;\n            this.setState({ employee });\n        }\n    }\n\n    isNumeric(str) {\n        if (typeof str != \"string\") return false\n        return !isNaN(str) && !isNaN(parseFloat(str))\n    }\n\n    handleChangeDouble(e) {\n        let self = this;\n        let {name, value} = e.target;\n        if (value.length > 1) {\n            value = value.toString().replace(\",\", \".\");\n        }\n        if (self.isNumeric(value) || value.length === 0) {\n            let employee = self.state.employee;\n            if (value && value.length === 1) {\n                value = value.split(\" \").join(\"\");\n                employee[name] = value;\n                self.setState({employee});\n            } else {\n                employee[name] = value;\n                self.setState({employee});\n            }\n        }\n    }\n\n    handleSalaryDouble(e) {\n        let self = this;\n        let value = e.value;\n        if (!isNaN(parseFloat(value) || value.length === 0)) {\n            let employee = self.state.employee;\n            if (value && value.length === 1) {\n                value = value.split(\" \").join(\"\");\n                employee[\"salary\"] = value;\n                self.setState({employee});\n            } else {\n                employee[\"salary\"] = value;\n                self.setState({employee});\n            }\n        }\n    }\n\n    handleChangeInteger(e) {\n        let {name, value} = e.target;\n        if (name === \"telephone\" && value && value.length > 0) {\n            value = value.split(\" \").join(\"\");\n            value = value.replace(/[{()}]/g, '').replace(/-/g, \"\").replace(/_/g, \"\");\n            if (value[0] === \"0\") {\n                value = value.substring(1, value.length);\n            }\n        } else if (name === \"telephone\" && value && value.length === 0) {\n            value = \"0\";\n        }\n        if (name === \"telephone\" && value.length > 10) {\n            value = value.substring(0, 10);\n        }\n        if (!isNaN(value)) {\n            let employee = this.state.employee;\n            if (value && value.length === 1) {\n                value = value.split(\" \").join(\"\");\n                employee[name] = value;\n                this.setState({employee});\n            } else {\n                employee[name] = value;\n                this.setState({employee});\n            }\n        }\n    }\n\n    handleChangeCustomFields = (e, type) => {\n        let {name, value} = e.target;\n        if (type === \"INTEGER\") {\n            let intFormat = /^\\d+$/;\n            if (value.length > 0 && !value.match(intFormat)) {\n                return;\n            }\n        } else if (type === \"DOUBLE\") {\n            let doubleFormat = /^[0-9.]+$/;\n            if (value.length > 0 && !(value.match(doubleFormat) && value.toString().substring(value.toString().indexOf(\".\") + 1).indexOf(\".\") === -1)) {\n                return;\n            }\n        }\n        let customFields = this.state.customFields;\n        customFields[name] = value;\n        this.setState({customFields});\n    };\n\n    handleChangeCustomDoubleFields = (e, type, name) => {\n        let value = e.value;\n        let customFields = this.state.customFields;\n        if (!isNaN(parseFloat(value) || value.length === 0)) {\n            if (value && value.length === 1) {\n                value = value.split(\" \").join(\"\");\n                customFields[name] = value;\n                this.setState({customFields});\n            } else {\n                customFields[name] = value;\n                this.setState({customFields});\n            }\n        }\n    };\n\n    handleChangeCustomDateTimeFields = (name, value) => {\n        let dateFormat = /^[0-9\\s\\-:]+$/;\n        if (value.length > 0 && (!value.match(dateFormat) || !moment(value, \"YYYY-MM-DD HH:mm:ss\", true).isValid())) {\n            this.setState({dateValidation: false});\n            return;\n        }\n        if (value && value.toString().length) {\n            value = value.format(\"YYYY-MM-DD HH:mm:ss\").toString();\n        }\n        let customFields = this.state.customFields;\n        customFields[name] = value;\n        this.setState({customFields, dateValidation: true});\n    };\n\n    handleBooleanFields = (name, e) => {\n        let customFields = this.state.customFields;\n        customFields[name] = e.target.checked;\n        this.setState({customFields});\n    };\n\n    validateClass(id) {\n        let error = this.state.error;\n        return (error[id] === undefined ? \"\" : (error[id].valid ? \" has-success\" : \" has-danger\"));\n    }\n\n    validateEmail(e) {\n        let { value } = e.target;\n        const turkishCharacterPattern = /[şŞıİçÇöÖüÜĞğ]/g;\n\n        if (value.match(turkishCharacterPattern)) {\n            let error = this.state.error;\n            error[\"cEmail\"] = {\n                \"message\": \"E-posta Türkçe karakter içeremez.\",\n                \"valid\": false\n            };\n            this.setState({ error });\n            Alert.error('E-posta Türkçe karakter içeremez.', {\n                position: 'top-right',\n                effect: 'stackslide',\n                timeout: 5000,\n                html: false\n            });\n        } else {\n            let error = this.state.error;\n            delete error[\"cEmail\"];\n            this.setState({ error });\n        }\n    }\n\n    generateJobTitle = () => {\n        let {employee, jobTitle} = this.state;\n        employee.jobTitle = jobTitle.label;\n        this.setState({employee});\n    }\n    isEmailSelected(notificationTypeList) {\n        return Array.isArray(notificationTypeList) &&\n            notificationTypeList.some(item => item.ntfType && item.ntfType.longCode === 'EMAIL');\n    }\n\n    handleSaveClick = () => {\n        let { employee } = this.state;\n        employee = this.setDepartmentInfo({ ...employee });\n\n        // Telefon numarası kontrolü\n        if (!this.isPhoneNumberValid(employee.telephone)) {\n            Alert.warning(\"Lütfen geçerli bir telefon numarası giriniz.\");\n            return;\n        }\n\n        // T.C. kimlik no kontrolü\n        if (!this.isTCValid(employee.tckn)) {\n            Alert.warning(\"Lütfen geçerli bir T.C. Kimlik numarası giriniz.\");\n            return;\n        }\n\n        // Bildirim türü kontrolü\n        if (!this.isBildTuruSelected(employee.employeeNotificationTypeList)) {\n            Alert.warning(\"Lütfen en az bir bildirim türü seçiniz.\");\n            return;\n        }\n\n        const emailSelected = this.isEmailSelected(employee.employeeNotificationTypeList);\n        if (emailSelected && (!employee.email || employee.email.trim() === '')) {\n            Alert.warning(\"E-posta bildirimi seçili iken e-Posta alanı boş bırakılamaz.\");\n            return;\n        }\n\n\n        // Departman kontrolü\n        if (!this.isDepartmanSelected(employee.department)) {\n            Alert.warning(\"Lütfen departman bilgisini giriniz.\");\n            return;\n        }\n\n        // Tüm kontroller geçti, şimdi kayıt başlatılabilir\n        this.setState({ isLoading: true, isDisabled: true }, () => {\n            this.saveClicked();\n        });\n    };\n\n    isDepartmanSelected(department) {\n        return department && department.id;\n    }\n\n    isBildTuruSelected(notificationTypeList) {\n        return Array.isArray(notificationTypeList) && notificationTypeList.length > 0;\n    }\n\n    isPhoneNumberValid(phone) {\n        return phone && phone.length === 10;\n    }\n\n    isTCValid(tckn) {\n        return tckn && tckn.length === 11;\n    }\n\n\n    saveClicked() {\n        let self = this;\n        this.generateJobTitle();\n        let employee = self.setDepartmentInfo(self.state.employee);\n        employee.employeeGroups = self.state.selectedEmpGroupList;\n        employee = self.setExpenditureDepInfo(employee);\n        let result = isValidEmployee(self, employee);\n        let error = result.error;\n        let valid = result.valid;\n        if (!self.state.dateValidation) {\n            valid = false;\n            result = { errorMessage: \"Girilen tarih bilgisi formata uygun değildir.\" };\n        }\n\n        if (valid) {\n            let params = {\n                url: `/employee/saveEmployee`,\n                method: \"post\",\n                data: {\n                    employee: employee,\n                    departmentMandatory: isDepartmentMandatory(self),\n                    kepAddressUnique: isKepAddressUnique(self),\n                    customFields: JSON.stringify(self.state.customFields),\n                },\n            };\n            self.setState({ btnDisabled: true, isLoading: true });\n            requestK(params)\n                .then(function (response) {\n                    let message = response.data;\n                    self.setState({ btnDisabled: false, isLoading: false });\n                    Alert.success(message, {\n                        position: 'top-right',\n                        effect: 'stackslide',\n                        timeout: 5000,\n                    });\n                    if (!employee.id && self.props.checkIfRegistryManual) {\n                        self.props.checkIfRegistryManual();\n                    }\n                    self.props.toggleModal(false, true);\n                })\n                .catch(function (error) {\n                    showAxiosError(error);\n                    self.setState({ btnDisabled: false, isLoading: false, isDisabled: false });\n                });\n        } else {\n            Alert.error(result.errorMessage, {\n                position: 'top-right',\n                effect: 'stackslide',\n                timeout: 8000,\n            });\n            self.setState({ error: error, isDisabled: false });\n        }\n    }\n\n    setDepartmentInfo(employee) {\n        if (this.state.department) {\n            employee.department = {id: parseInt(this.state.department.value), name: this.state.department.label};\n        }\n        return employee;\n    }\n\n    setExpenditureDepInfo(employee) {\n        if (this.state.expenditureDep) {\n            employee.expenditureDepartment = {\n                id: parseInt(this.state.expenditureDep.value),\n                name: this.state.expenditureDep.label\n            };\n        }\n        return employee;\n    }\n\n    getNtfTypeList() {\n        return this.state.employee && this.state.employee.employeeNotificationTypeList ? this.state.employee.employeeNotificationTypeList.map(ntfType => (JSON.stringify(ntfType.ntfType))) : [];\n    }\n\n    getEmployeeGroupList = () => {\n        let self = this;\n        let selectedGroupList = [];\n        self.state.employee.employeeGroups.map(employeeGroup => (selectedGroupList.push({\n            value: employeeGroup.group.id,\n            label: employeeGroup.group.name,\n            group: employeeGroup.group\n        })));\n        let selectedEmpGroupList = self.state.employee.employeeGroups;\n        self.setState({selectedGroupList, selectedEmpGroupList});\n    }\n\n    onChangeNtfTypeList(e) {\n        let result = e.map(ntfType => ({recordId: null, ntfType: JSON.parse(ntfType.value)}));\n        let employee = this.state.employee;\n        employee.employeeNotificationTypeList = result;\n        this.setState({employee});\n    }\n\n    onChangeGroupList(e) {\n        let self = this;\n        let employee = self.state.employee;\n        let selectedGroupList = [];\n        let selectedEmpGroupList = [];\n        e.forEach(selected => {\n            let existEmpGroup = employee?.employeeGroups?.find(empGroup => (empGroup.group.id === selected.group.id));\n            if (existEmpGroup) {\n                selectedEmpGroupList.push(existEmpGroup);\n            } else {\n                selectedEmpGroupList.push({id: null, \"group\": selected.group})\n            }\n        });\n\n        selectedEmpGroupList.map(selected => (selectedGroupList.push({\n            value: selected.group.id,\n            label: selected.group.name,\n            group: selected.group\n        })));\n        self.setState({selectedGroupList, selectedEmpGroupList});\n    }\n\n    onExpenditureDepChange(dept) {\n        if (dept) {\n            this.setState({expenditureDep: dept});\n        } else {\n            this.setState({expenditureDep: {value: null, label: null}});\n        }\n    }\n\n    onDepartmentChange(dept) {\n        if (this.state.manager && this.state.manager.value) {\n            this.setState({\n                alert: (\n                    <SweetAlert warning\n                                confirmBtnText=\"Tamam\"\n                                confirmBtnBsStyle=\"error\"\n                                title=\"Uyarı\"\n                                onConfirm={() => {\n                                    this.setState({alert: null});\n                                }\n                                }>\n                        Yönetici bilgisini kontrol edin!\n                    </SweetAlert>\n                )\n            });\n        }\n        if (dept) {\n            this.setState({department: dept});\n        } else {\n            this.setState({department: {value: null, label: null}});\n        }\n    }\n\n    onManagerChange(data) {\n        this.handleChange({\n            target: {\n                name: 'parentUserId',\n                value: data && data.value\n            }\n        });\n        this.setState({manager: data})\n    }\n\n    onSecondManagerChange(data) {\n        this.handleChange({\n            target: {\n                name: 'secondParentUserId',\n                value: data && data.value\n            }\n        });\n        this.setState({secondManager: data})\n    }\n    onThirdManagerChange(data) {\n        this.handleChange({\n            target: {\n                name: 'thirdParentUserId',\n                value: data && data.value\n            }\n        });\n        this.setState({thirdManager: data})\n    }\n    onChangeOnJobTitle(jobTitle) {\n        if (jobTitle) {\n            this.setState({jobTitle: jobTitle});\n        } else {\n            this.setState({jobTitle: {value: 0, label: \"\"}});\n        }\n    }\n\n    hasGrant = (grant) => {\n        return this.props.hasGrant(grant);\n    };\n\n    render() {\n        return <DefaultModal\n            isOpen={this.props.modal}\n            hasGrant={this.props.hasGrant}\n            fade={false}\n            size=\"lg\"\n            closeOnEsc={false}\n            title=\"Çalışan Ekle/Düzenle Ekranı\"\n            confirmBtnText={\n                <span>\n                    {this.state.isLoading ? (\n                        <>\n                            KAYDEDİLİYOR\n                            <span className=\"spinner\"></span>\n                        </>\n                    ) : (\n                        \"KAYDET\"\n                    )}\n                </span>\n            }\n            confirmButtonStyle={{\n                cursor: this.state.isLoading ? \"not-allowed\" : \"pointer\",\n                opacity: this.state.isLoading ? 0.6 : 1,\n            }}\n            cancelBtnText=\"Kapat\"\n            onConfirm={!this.state.isLoading ? this.handleSaveClick : null}\n            onCancel={() => this.props.toggleModal(false, false)}\n        >\n            <div style={{marginTop: '20px'}}>\n                <Form>\n                    <div className=\"FormRenk\" style={{marginBottom: '10px', paddingLeft: '20px', paddingRight: '20px'}}>\n                        <label style={{fontWeight: 'bold', display: 'block'}}>\n                            Genel:\n                        </label>\n                        {this.renderInput(\"Ad *\", \"name\")}\n                        {this.renderInput(\"Soyad *\", \"surname\")}\n                        {this.renderInputInteger(\"TCKN *\", \"tckn\", 11, this.props.id !== null)}\n\n                        {isDepartmentMandatory(this) &&\n                            <FormGroup row className={this.validateClass(\"department\")}>\n                                <Label sm={4}>Departman *</Label>\n                                <Col sm={8}>\n                                    <AutoCompleteList name={\"Departman\"}\n                                                      useUpperCase={false} onlyLabel={false} allowNew={false}\n                                                      list={this.state.departmentList}\n                                                      value={this.state.department}\n                                                      onChange={e => this.onDepartmentChange(e)}\n                                                      updateList={e => this.setState({departmentList: e})}\n                                                      placeholder={\"Departman Seçiniz veya Departman Adı Yazınız...\"}\n                                    />\n                                </Col>\n                            </FormGroup>\n                        }\n                        {isDepartmentMandatory(this) &&\n                            <FormGroup row className={this.validateClass(\"jobTitle\")}>\n                                <Label sm={4}>{\"Görev\"}</Label>\n                                <Col sm={8}>\n                                    <AutoCompleteList name={\"Görev\"}\n                                                      useUpperCase={false} onlyLabel={false} allowNew={true}\n                                                      list={this.state.jobTitles}\n                                                      value={this.state.jobTitle}\n                                                      onChange={e => this.onChangeOnJobTitle(e)}\n                                                      updateList={e => this.setState({jobTitles: e})}\n                                                      placeholder={\"Görev Seçiniz veya Görev Adı Yazınız...\"}\n                                    />\n                                </Col>\n                            </FormGroup>\n                        }\n\n                        {isDepartmentMandatory(this) &&\n                            <FormGroup row className={this.validateClass(\"manager\")}>\n                                <Label sm={4}>Bağlı Olduğu Yönetici</Label>\n                                <Col sm={8}>\n                                    <Select.Async multi={false}\n                                                  ignoreAccents={false}\n                                                  value={this.state.manager}\n                                                  onChange={(e) => this.onManagerChange(e)}\n                                                  isLoading={true}\n                                                  autoload={false}\n                                                  cache={false}\n                                                  clearable={true}\n                                                  filterOptions={(options) => options}\n                                                  noResultsText=\"Kayıt bulunamadı.\"\n                                                  searchPromptText=\"Arama için en az 2 karakter giriniz.\"\n                                                  placeholder=\"İsim veya soyisim ile ara...\"\n                                                  loadingPlaceholder=\"Yükleniyor...\"\n                                                  clearValueText=\"Seçimi kaldır\"\n                                                  loadOptions={getEmployees}\n                                                  disabled={this.state.isDisabled} />\n                                </Col>\n                            </FormGroup>\n                        }\n                        {isDepartmentMandatory(this) &&\n                            <FormGroup row className={this.validateClass(\"manager\")}>\n                                <Label sm={4}>Bağlı Olduğu 2. Yönetici</Label>\n                                <Col sm={8}>\n                                    <Select.Async multi={false}\n                                                  ignoreAccents={false}\n                                                  value={this.state.secondManager}\n                                                  onChange={(e) => this.onSecondManagerChange(e)}\n                                                  isLoading={true}\n                                                  autoload={false}\n                                                  cache={false}\n                                                  clearable={true}\n                                                  filterOptions={(options) => options}\n                                                  noResultsText=\"Kayıt bulunamadı.\"\n                                                  searchPromptText=\"Arama için en az 2 karakter giriniz.\"\n                                                  placeholder=\"İsim veya soyisim ile ara...\"\n                                                  loadingPlaceholder=\"Yükleniyor...\"\n                                                  clearValueText=\"Seçimi kaldır\"\n                                                  loadOptions={getEmployees}\n                                                  disabled={this.state.isDisabled} />\n                                </Col>\n                            </FormGroup>\n                        }\n                        {isDepartmentMandatory(this) &&\n                            <FormGroup row className={this.validateClass(\"manager\")}>\n                                <Label sm={4}>Bağlı Olduğu 3. Yönetici</Label>\n                                <Col sm={8}>\n                                    <Select.Async multi={false}\n                                                  ignoreAccents={false}\n                                                  value={this.state.thirdManager}\n                                                  onChange={(e) => this.onThirdManagerChange(e)}\n                                                  isLoading={true}\n                                                  autoload={false}\n                                                  cache={false}\n                                                  clearable={true}\n                                                  filterOptions={(options) => options}\n                                                  noResultsText=\"Kayıt bulunamadı.\"\n                                                  searchPromptText=\"Arama için en az 2 karakter giriniz.\"\n                                                  placeholder=\"İsim veya soyisim ile ara...\"\n                                                  loadingPlaceholder=\"Yükleniyor...\"\n                                                  clearValueText=\"Seçimi kaldır\"\n                                                  loadOptions={getEmployees}\n                                                  disabled={this.state.isDisabled} />\n                                </Col>\n                            </FormGroup>\n                        }\n                        {this.state.loading && (\n                            <ReactLoading\n                                type=\"spinningBubbles\"\n                                style={{width: \"60px\", height: \"60px\", margin: \"20px auto 0 auto\", fill: \"#888\"}}/>)}\n                        {!this.props.isKepOwner &&\n                            <FormGroup row className={this.validateClass(\"employeeNtfResultList\")}>\n                                <Label sm={4}>Bildirim Türleri *</Label>\n                                <Col sm={8}>\n                                    <Select\n                                        className=\"select-control\"\n                                        name=\"employeeNtfResultList\"\n                                        id=\"employeeNtfResultList\"\n                                        multi={true}\n                                        placeholder=\"Seçiniz...\"\n                                        noResultsText={\"Veri yok\"}\n                                        value={this.getNtfTypeList()}\n                                        onChange={(e) => e && this.onChangeNtfTypeList(e)}\n                                        options={this.state.ntfTypeList && this.state.ntfTypeList.map(ntfType => ({\n                                            value: JSON.stringify(ntfType),\n                                            label: ntfType.longCode\n                                        }))}\n                                        disabled={this.state.isDisabled}\n                                    />\n                                </Col>\n                            </FormGroup>}\n                        {this.props.isKepOwner &&\n                            this.renderInput(\"KEP Adresi *\", \"kepAddress\")}\n                        <FormGroup row className={this.validateClass(\"telephone\")}>\n                            <Label sm={4}>Telefon Numarası *</Label>\n                            <Col sm={8}>\n\n                                <MaskedInput\n                                    className=\"form-control\"\n                                    mask={['0', '(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n                                    style={{textAlign: \"left\"}}\n                                    type=\"text\"\n                                    placeholder=\"(5xx) xxx-xxxx\"\n                                    name=\"telephone\"\n                                    value={this.state.employee.telephone}\n                                    size=\"10\"\n                                    onChange={(e) => this.handleChangeInteger(e)}\n                                    disabled={this.state.isDisabled}\n                                />\n                            </Col>\n                        </FormGroup>\n\n                        <FormGroup row className={this.validateClass(\"cEmail\")}>\n                            <Label sm={4}>{this.getNtfTypeList().filter(v => v.includes('EMAIL')).length === 1  ? 'e-Posta' + ' *' : 'e-Posta'}</Label>\n                            <Col sm={8}>\n                                <MaskedInput\n                                    className=\"form-control\"\n                                    mask={emailMask}\n                                    placeholder=\"_________@______.___\"\n                                    type=\"text\"\n                                    name=\"email\"\n                                    inputProps={{ vdata: \"email\", vlength: '1,255' }}\n                                    id=\"cEmail\"\n                                    ref=\"cEmail\"\n                                    onBlur={(e) => this.validateEmail(e)}\n                                    value={this.state.employee.email}\n                                    onChange={(e) => this.handleChange(e)}\n                                    disabled={this.state.isDisabled}\n                                />\n                                {this.validateMessage('cEmail') !== \"\" &&\n                                    <UncontrolledTooltip placement=\"right\" target=\"cEmail\" delay={0}>\n                                        {this.validateMessage(\"cEmail\")}\n                                    </UncontrolledTooltip>}\n                            </Col>\n                        </FormGroup>\n\n                        <FormGroup row className={this.validateClass(\"statusType\")}>\n                            <Label sm={4}>Durumu</Label>\n                            <Col sm={8}>\n                                <Select\n                                    placeholder=\"Seçiniz...\"\n                                    value={this.state.employee.statusType ? this.state.employee.statusType : 'ACTIVE'}\n                                    clearable={false}\n                                    options={statusTypeSetData()}\n                                    noResultsText={\"Veri yok\"}\n                                    onChange={(e) => {\n                                        this.handleChange({\n                                            target: {\n                                                name: 'statusType',\n                                                value: (e && e.value) ? e.value : 'ACTIVE'\n                                            }, e\n                                        });\n                                    }}\n                                    disabled={this.state.isDisabled}\n                                />\n                            </Col>\n                        </FormGroup>\n                        {this.renderInput(\"Entegrasyon Kodu\", \"integrationCode\")}\n                        <FormGroup row className={this.validateClass(\"employmentContract\")}>\n                            <Label sm={4}>İş Sözleşmesi Türü</Label>\n                            <Col sm={8}>\n                                <Select value={this.state.employee.employmentContract}\n                                        clearable={false}\n                                        options={employmentContractData()}\n                                        placeholder=\"Seçiniz...\"\n                                        noResultsText={\"Veri yok\"}\n                                        onChange={(e) => {\n                                            this.handleChange({\n                                                target: {\n                                                    name: \"employmentContract\",\n                                                    value: (e && e.value) ? e.value : 'UNDECLARED'\n                                                }, e\n                                            });\n                                        }}\n                                        disabled={this.state.isDisabled}\n                                />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row className={this.validateClass(\"salary\")}>\n                            <Label sm={4}>Ücret</Label>\n                            {this.hasGrant(SEE_SALARY_DATA) ?\n                                <Col sm={8}>\n                                    <NumberFormat\n                                        placeholder=\"0,00\"\n                                        isNumericString={true}\n                                        value={this.state.employee.salary}\n                                        onValueChange={(e) => this.handleSalaryDouble(e)}\n                                        sm={12}\n                                        suffix={' ₺'}\n                                        style={{textAlign: 'right'}}\n                                        thousandSeparator={'.'} decimalSeparator={','}\n                                        displayType=\"input\"\n                                        allowNegative={false}\n                                        decimalScale={2}\n                                        disabled={this.state.isDisabled}\n                                    />\n                                </Col> :\n                                <Col sm={8}>\n                                    <Input type=\"text\" name={\"salary\"}\n                                           value={\"********\"}\n                                    />\n                                </Col>\n                            }\n                        </FormGroup>\n                        <FormGroup row className={this.validateClass(\"vip\")}>\n                            <Label sm={4}>VIP</Label>\n                            <Col sm={8}>\n                                <input type=\"checkbox\" name=\"vip\"\n                                       checked={this.state.employee.vip}\n                                       onChange={(e) => this.handleChange(e)}\n                                       disabled={this.state.isDisabled}\n                                />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row className={this.validateClass(\"expenditure\")}>\n                            <Label sm={4}>Masraf Yeri </Label>\n                            <Col sm={8}>\n                                <AutoCompleteList name={\"Masraf Yeri\"}\n                                                  useUpperCase={false} onlyLabel={false} allowNew={false}\n                                                  list={this.state.expenditureDepList}\n                                                  value={this.state.expenditureDep}\n                                                  onChange={e => this.onExpenditureDepChange(e)}\n                                                  updateList={e => this.setState({expenditureDepList: e})}\n                                                  placeholder={\"Masraf Yeri Seçiniz veya Masraf Yeri Adı Yazınız...\"}\n                                />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row className={this.validateClass(\"groups\")}>\n                            <Label sm={4}>Gruplar</Label>\n                            <Col sm={8}>\n                                <Select\n                                    className=\"select-control\"\n                                    name=\"groups\"\n                                    id=\"groups\"\n                                    multi={true}\n                                    placeholder=\"Seçiniz...\"\n                                    value={this.state.selectedGroupList}\n                                    onChange={(e) => e && this.onChangeGroupList(e)}\n                                    options={this.state.groupList}\n                                    noResultsText={\"Henüz kaydedilmiş veri yok\"}\n                                    disabled={this.state.isDisabled}\n                                />\n                            </Col>\n                        </FormGroup>\n                        {this.state.employee.statusType === 'PASSIVE' &&\n                            <FormGroup row className={this.validateClass(\"passiveEndDate\")}>\n                                <Label sm={4}>Pasif Durumunun Biteceği Tarih</Label>\n                                <Col sm={8}>\n                                    <Datetime locale=\"tr\"\n                                              className=\"datepicker\"\n                                              input={true}\n                                              closeOnSelect={true}\n                                              inputProps={{disabled: this.state.employee.statusType !== 'PASSIVE' || this.state.isDisabled}}\n                                              value={\n                                                  moment(this.state.employee.passiveEndDate, \"YYYY-MM-DD\", true).isValid() ?\n                                                      moment(this.state.employee.passiveEndDate).format(\"DD-MM-YYYY\") :\n                                                      this.state.employee.passiveEndDate\n                                              }\n                                              isValidDate={function (current) {\n                                                  return current.startOf('date').isAfter(Datetime.moment().startOf('date'));\n                                              }}\n                                              dateFormat=\"DD-MM-YYYY\"\n                                              timeFormat={false}\n                                              onChange={e => {\n                                                  this.handleChange({\n                                                      target: {\n                                                          name: 'passiveEndDate',\n                                                          value: (e && moment(e).isValid()) ? e.format(\"YYYY-MM-DD\") : null\n                                                      }\n                                                  });\n                                              }}\n                                    />\n                                </Col>\n                            </FormGroup>\n                        }\n                        {this.state.employee.statusType === 'PASSIVE' &&\n                            <FormGroup row className={this.validateClass(\"reason\")}>\n                                <Label sm={4}>Pasif Durumun Gerekçesi</Label>\n                                <Col sm={8}>\n                                    <Select value={this.state.employee.reason}\n                                            clearable={false}\n                                            disabled={this.state.employee.statusType !== 'PASSIVE' || this.state.isDisabled}\n                                            options={statusReasonData()}\n                                            placeholder=\"Seçiniz...\"\n                                            onChange={(e) => {\n                                                this.handleChange({\n                                                    target: {\n                                                        name: \"reason\",\n                                                        value: (e && e.value) ? e.value : null\n                                                    }\n                                                });\n                                            }}\n                                    />\n                                </Col>\n                            </FormGroup>\n                        }\n                    </div>\n                    <div className=\"FormRenk\" style={{paddingLeft: '20px', paddingRight: '20px'}}>\n                        <label style={{fontWeight: 'bold', display: 'block'}}>\n                            Detay:\n                        </label>\n                        <Row>\n                            <Col sm={6}>\n                                <FormGroup row className={this.validateClass(\"employmentStartDate\")}\n                                           style={{marginTop: '-2px'}}>\n                                    <Label sm={4} style={{fontSize: '11px'}}>İşe Başlama Tarihi</Label>\n                                    <Col sm={8}>\n                                        <Datetime locale=\"tr\"\n                                                  className=\"datepicker\"\n                                                  input={true}\n                                                  closeOnSelect={true}\n                                                  value={\n                                                      moment(this.state.employee.employmentStartDate, \"YYYY-MM-DD\", true).isValid() ?\n                                                          moment(this.state.employee.employmentStartDate).format(\"DD-MM-YYYY\") :\n                                                          this.state.employee.employmentStartDate\n                                                  }\n                                                  dateFormat=\"DD-MM-YYYY\"\n                                                  timeFormat={false}\n                                                  onChange={e => {\n                                                      this.handleChange({\n                                                          target: {\n                                                              name: 'employmentStartDate',\n                                                              value: (e && moment(e, \"YYYY-MM-DD\", true).isValid()) ? moment(e).format(\"YYYY-MM-DD\") : null\n                                                          }\n                                                      });\n                                                  }}\n                                                  disabled={this.state.isDisabled}\n                                        />\n                                    </Col>\n                                </FormGroup>\n                            </Col>\n                            {this.renderInputSmaller(\"Çalışma Şekli\", \"employmentStatus\")}\n                        </Row>\n                        <Row>\n                            {this.renderInputSmallerDouble(\"Yıllık İzin Hakkı\", \"remainingAnnualVacation\", 5)}\n                            {this.renderInputSmallerDouble(\"Mazeret İzin Hakkı\", \"remainingExcuseVacation\", 5)}\n                        </Row>\n                        <Row>\n                            <Col sm={6}>\n                                <FormGroup row className={this.validateClass(\"gender\")}>\n                                    <Label sm={4} style={{fontSize: '11px'}}>Cinsiyet</Label>\n                                    <Col sm={8}>\n                                        <Select value={this.state.employee.gender}\n                                                clearable={false}\n                                                options={genderData()}\n                                                placeholder=\"Seçiniz...\"\n                                                noResultsText={\"Veri Yok\"}\n                                                onChange={(e) => {\n                                                    this.handleChange({\n                                                        target: {\n                                                            name: \"gender\",\n                                                            value: (e && e.value && e.value !== ' ') ? e.value : null\n                                                        }\n                                                    });\n                                                }}\n                                                disabled={this.state.isDisabled}\n                                        />\n                                    </Col>\n                                </FormGroup>\n                            </Col>\n                            {this.renderInputSmaller(\"Adres\", \"address\")}\n                        </Row>\n                        <Row>\n                            <Col sm={6}>\n                                <FormGroup row className={this.validateClass(\"dateOfBirth\")}\n                                           style={{marginTop: '-2px'}}>\n                                    <Label sm={4} style={{fontSize: '11px'}}>Doğum Tarihi</Label>\n                                    <Col sm={8}>\n                                        <Datetime locale=\"tr\"\n                                                  className=\"datepicker\"\n                                                  input={true}\n                                                  closeOnSelect={true}\n                                                  value={\n                                                      moment(this.state.employee.dateOfBirth, \"YYYY-MM-DD\", true).isValid() ?\n                                                          moment(this.state.employee.dateOfBirth).format(\"DD-MM-YYYY\") :\n                                                          this.state.employee.dateOfBirth\n                                                  }\n                                                  dateFormat=\"DD-MM-YYYY\"\n                                                  timeFormat={false}\n                                                  onChange={e => {\n                                                      this.handleChange({\n                                                          target: {\n                                                              name: 'dateOfBirth',\n                                                              value: (e && moment(e, \"YYYY-MM-DD\", true).isValid()) ? moment(e).format(\"YYYY-MM-DD\") : null\n                                                          }\n                                                      });\n                                                  }}\n                                                  disabled={this.state.isDisabled}\n                                        />\n                                    </Col>\n                                </FormGroup>\n                            </Col>\n                            {this.renderInputSmaller(\"Doğum Yeri\", \"cityOfBirth\")}\n                        </Row>\n                        <Row>\n                            {this.renderInputSmaller(\"Eğitim Durumu\", \"educationLevel\")}\n                            {this.renderInputSmaller(\"Askerlik Durumu\", \"militaryStatus\")}\n                        </Row>\n                        {this.props.titleList && !!this.props.titleList.length &&\n                            this.renderCustomFields()}\n                    </div>\n                </Form>\n                {this.state.alert}\n            </div>\n        </DefaultModal>\n    }\n\n    renderCustomFields() {\n        let prevKey = \"\";\n\n        return this.props.titleList.map((key, index) => {\n            if (index % 2 === 1) {\n                return (\n                    <Row>\n                        {this.renderCustomInputSmaller(prevKey.title, prevKey.type, this.state.customFields[prevKey.title])}\n                        {this.renderCustomInputSmaller(key.title, key.type, this.state.customFields[key.title])}\n                    </Row>\n                );\n            } else if (index === (this.props.titleList.length - 1)) {\n                return (\n                    <Row>\n                        {this.renderCustomInputSmaller(key.title, key.type, this.state.customFields[key.title])}\n                    </Row>\n                );\n            } else {\n                prevKey = key;\n            }\n        })\n    }\n\n    renderInput(label, fieldName) {\n        return (\n            <FormGroup row className={this.validateClass(fieldName)}>\n                <Label sm={4}>{label}</Label>\n                <Col sm={8}>\n                    <Input\n                        type=\"text\"\n                        name={fieldName}\n                        value={this.state.employee[fieldName] || ''}\n                        onChange={(e) => this.handleChange(e)}\n                        disabled={this.state.isDisabled}\n                    />\n                </Col>\n            </FormGroup>\n        );\n    }\n\n    renderInputInteger(label, fieldName, maxLength, readOnly = false) {\n        return (\n            <FormGroup row className={this.validateClass(fieldName)}>\n                <Label sm={4}>{label}</Label>\n                <Col sm={8}>\n                    <Input\n                        type=\"text\"\n                        name={fieldName}\n                        maxLength={maxLength}\n                        disabled={this.state.isDisabled || readOnly}\n                        value={this.state.employee[fieldName] || ''}\n                        onChange={(e) => {\n                            this.handleChangeInteger(e)\n                        }}\n                    />\n                </Col>\n            </FormGroup>\n        );\n    }\n\n    renderInputSmaller(label, fieldName) {\n        return <Col sm={6}>\n            <FormGroup row className={this.validateClass(fieldName)}>\n                <Label sm={4} style={{fontSize: '11px'}}>{label}</Label>\n                <Col sm={8}>\n                    <Input type=\"text\" name={fieldName}\n                           value={this.state.employee[fieldName] || ''}\n                           onChange={(e) => {\n                               this.handleChange(e)\n                           }}\n                           disabled={this.state.isDisabled}\n                    />\n                </Col>\n            </FormGroup>\n        </Col>;\n    }\n\n    renderInputSmallerDouble(label, fieldName, maxLength) {\n        return <Col sm={6}>\n            <FormGroup row className={this.validateClass(fieldName)}>\n                <Label sm={4} style={{fontSize: '11px'}}>{label}</Label>\n                <Col sm={8}>\n                    <Input type=\"text\" name={fieldName} maxLength={maxLength}\n                           value={this.state.employee[fieldName] || ''}\n                           onChange={(e) => {\n                               this.handleChangeDouble(e)\n                           }}\n                           disabled={this.state.isDisabled}\n                    />\n                </Col>\n            </FormGroup>\n        </Col>;\n    }\n\n    renderCustomInputSmaller(label, type, value) {\n        return <Col sm={6}>\n            <FormGroup row>\n                <Label sm={4} style={{fontSize: '11px'}}>{label}</Label>\n                <Col sm={8}>{type !== \"DATETIME\" && type !== \"BOOLEAN\" && type !== \"DOUBLE\" &&\n                    <Input type=\"text\" name={label}\n                           value={value || ''}\n                           onChange={(e) => {\n                               this.handleChangeCustomFields(e, type)\n                           }}\n                           disabled={this.state.isDisabled}\n                    />}\n                    {type === \"DATETIME\" &&\n                        <Datetime locale=\"tr\"\n                                  className=\"datepicker\"\n                                  input={true}\n                                  closeOnSelect={true}\n                                  value={moment(value, \"YYYY-MM-DD HH:mm:ss\", true).isValid() ? moment(value).format(\"DD-MM-YYYY HH:mm:ss\") : value}\n                                  dateFormat=\"DD-MM-YYYY\"\n                                  timeFormat=\"HH:mm:ss\"\n                                  onChange={(e) => this.handleChangeCustomDateTimeFields(label, e)}\n                                  disabled={this.state.isDisabled}\n                        />}\n                    {type === \"BOOLEAN\" &&\n                        <Label check>\n                            <Input type=\"checkbox\" checked={customFieldsBooleanControl(value)}\n                                   onClick={(e) => this.handleBooleanFields(label, e)}\n                                   disabled={this.state.isDisabled}\n                            />\n                        </Label>\n                    }\n                    {type === \"DOUBLE\" &&\n                        <NumberFormat\n                            placeholder=\"0,00\"\n                            isNumericString={true}\n                            value={value}\n                            onValueChange={(e) =>this.handleChangeCustomDoubleFields(e, type,label)}\n                            sm={12}\n                            style={{textAlign: 'right'}}\n                            thousandSeparator={'.'}\n                            decimalSeparator={','}\n                            displayType=\"input\"\n                            allowNegative={true}\n                            name={label}\n                            id={\"numberFormat-component\"}\n                            className=\"form-control\"\n                            disabled={this.state.isDisabled}\n                        />\n                    }\n                </Col>\n            </FormGroup>\n        </Col>;\n    }\n}\n\nexport default CreateEditEmployeeModal;\n"],"sourceRoot":""}